  
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI SOFTWARE SICURO 
 
 
 
 
LINEE GUIDA PER L ’ ADOZIONE DI UN 
CICLO DI SVILUPPO DI SOFTWARE 
SICURO  
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 2 a 137  
 
SOMMARIO 
1 INTRODUZIONE ...................................... ................................................... ................................................... ...... 6  
1.1  SCOPO  .................................................. ................................................... ................................................... ......... 6  
1.2  STRUTTURA DEL DOCUMENTO  .................................................. ................................................... .............................. 6  
2 RIFERIMENTI ....................................... ................................................... ................................................... ......... 7  
2.1  DOCUMENTI DI RIFERIMENTO  .................................................. ................................................... .............................. 7  
3 DEFINIZIONI E ACRONIMI ............................ ................................................... ................................................... . 8 
3.1  DEFINIZIONI  .................................................. ................................................... ................................................... .. 8 
3.2  ACRONIMI  .................................................. ................................................... ................................................... .... 8 
4 ESIGENZE E AMBITI DI APPLICAZIONE ................. ................................................... ...........................................10  
4.1  IL PANORAMA DELLE VULNERABILITÀ APPLICATIVE  .................................................. ................................................... .. 10  
4.2  SVILUPPO APPLICAZIONI SICURE  .................................................. ................................................... .......................... 11  
4.3  SECURITY TOOLS  .................................................. ................................................... ............................................. 14  
5 ANALISI DELLE INIZIATIVE E DEGLI STANDARD ......... ................................................... ......................................18  
5.1  INIZIATIVE INTERNAZIONALI  .................................................. ................................................... ............................... 18  
5.1.1  Open Web Application Security Project (OWASP) ..... ................................................... ............................... 18  
5.1.2  Common Criteria (CC)............................... ................................................... ................................................ 20  
5.1.3  IEEE Computer Society ............................. ................................................... ................................................ 21  
5.1.4  International Organisation for Standardization (ISO ) ................................................. ................................ 22  
5.1.5  International Society of Automation (ISA) ......... ................................................... ...................................... 24  
5.1.6  Software Assurance Forum for Excellence in Code (SA FECODE) ........................................... ...................... 26  
5.1.7  SANS Software Security Institute (SANS SSI) ....... ................................................... ..................................... 27  
5.1.8  Web Application Security Consortium (WASC) ........ ................................................... ................................. 28  
5.1.9  Institute For Software Quality (ifSQ) ............. ................................................... ........................................... 29  
5.2  INIZIATIVE EUROPEE  .................................................. ................................................... ......................................... 30  
5.2.1  Networked European Software and Services Initiative  (NESSI) .......................................... ......................... 30  
5.2.2  Piattaforme Nazionali NESSI ....................... ................................................... ............................................. 31  
5.2.3  OWASP Local Chapters............................... ................................................... .............................................. 33  
5.2.4  Motor Industry Software Reliability Association (MI SRA) .............................................. ............................. 36  
5.2.5  European Space Agency (ESA) ....................... ................................................... ........................................... 37  
5.3  INIZIATIVE US ................................................ ................................................... ...................................................  38  
5.3.1  CERT Secure Coding ................................ ................................................... .................................................. 38  
5.3.2  Software Assurance Metrics and Tool Evaluation (SAM ATE) .............................................. ........................ 39  
5.3.3  Common Weakness Enumeration (CWE) ................. ................................................... ................................ 41  
5.3.4  Common Attack Pattern Enumeration and Classificatio n (CAPEC) ......................................... .................... 43  
6 LA SICUREZZA IN TUTTE LE FASI DEL CICLO DI SVILUPPO  DEL SOFTWARE ..................................... .....................45  
6.1  SECURE SDLC .............................................. ................................................... ................................................... . 45  
6.2  RISK ASSESSMENT  .................................................. ................................................... ........................................... 46  
6.2.1  Tool per l’analisi del rischio .................... ................................................... .................................................. 49  
6.3  REQUISITI  .................................................. ................................................... ................................................... ... 50  
6.3.1  Linguaggi per la specifica dei requisiti .......... ................................................... ........................................... 50  
6.3.2  Tool per la specifica dei requisiti ............... ................................................... ............................................... 53  
6.4  PROGETTAZIONE  .................................................. ................................................... ............................................. 54  
6.4.1  Secure Design Languages ........................... ................................................... .............................................. 54  
6.4.2  Software Design Tools ............................. ................................................... ................................................. 5 4  
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 3 a 137  
 
6.5  IMPLEMENTAZIONE  .................................................. ................................................... .......................................... 55  
6.5.1  Software Implementation Tools ..................... ................................................... .......................................... 55  
6.6  VERIFICA  .................................................. ................................................... ................................................... .... 57  
6.6.1  Software Verification Tools ....................... ................................................... ............................................... 57  
6.7  VALIDAZIONE  .................................................. ................................................... .................................................. 61  
6.7.1  Software Release Tools ............................ ................................................... ................................................ 62  
6.8  SUPPORTO  .................................................. ................................................... ................................................... .. 63  
6.8.1  Software Response Tools ........................... ................................................... .............................................. 63  
6.9  CATALOGO SECURITY TOOLS  .................................................. ................................................... .............................. 66  
6.10  TRAINING E FORMAZIONE  .................................................. ................................................... .................................. 66  
6.10.1  Secure Coding in C and C++ ........................ ................................................... ......................................... 67  
6.10.2  Writing Secure Code - C++ ......................... ................................................... .......................................... 67  
6.10.3  Writing Secure Code - Java (J2EE) ................. ................................................... ....................................... 68  
6.10.4  Foundstone (Mcafee) Courses ....................... ................................................... ...................................... 68  
6.10.5  Threat Modeling ................................... ................................................... ............................................... 68  
6.10.6  Writing Secure Code - ASP.NET (C#) ................ ................................................... .................................... 69  
6.10.7  Oracle Courses .................................... ................................................... ................................................. 6 9  
6.10.8  Developing Secure Java Web Services, Java EE 6 .... ................................................... ............................. 69  
6.10.9  MySQL and PHP - Developing Dynamic Web Applications  .................................................. ................... 70  
6.10.10  Google Gruyere .................................... ................................................... ................................................ 71  
6.10.11  OWASP Training Courses ............................ ................................................... ......................................... 71  
7 CERTIFICAZIONI PROFESSIONALI ...................... ................................................... ..............................................72  
7.1  GIAC  SECURE SOFTWARE PROGRAMMER (GSSP)  CERTIFICATION  .................................................. ............................... 72  
7.2  INTERNATIONAL COUNCIL OF E-COMMERCE CONSULTANTS (EC-C OUNCIL ) CERTIFICATIONS  ............................................... 72  
7.3  CERTIFIED ETHICAL HACKER (CEH) ............................................. ................................................... .......................... 73  
7.4  CERTIFIED SECURITY ANALYST (ECSA) ............................................ ................................................... ....................... 73  
7.5  CERTIFIED SECURE PROGRAMMER (ECSP) ............................................ ................................................... ................. 73  
7.6  CERTIFIED SOFTWARE SECURITY LIFECYCLE PROFESSIONAL (CSSLP)  AND CERTIFIED INFORMATION SYSTEMS SECURITY 
PROFESSIONAL (CISSP) ........................................... ................................................... ................................................... ..... 74  
7.7  CERTIFICAZIONI ISACA  (CISA,  CISM,  CRISC) ............................................ ................................................... ........... 75  
7.8  INTERNATIONAL SECURE SOFTWARE ENGINEERING COUNCIL (ISSECO) .......................................... ................................ 76  
8 SECURE SOFTWARE DEVELOPMENT LIFE CYCLE (SSDLC): ANA LISI DELLE METODOLOGIE E DEI PROCESSI ..........78  
8.1  LIFE CYCLE & MATURITY MODELS  .................................................. ................................................... ...................... 78  
8.1.1  Software Assurance Maturity Model (SAMML) ......... ................................................... .............................. 78  
8.1.2  Systems Security Engineering Capability Maturity Mo del (SEE-CMM) ..................................... .................. 79  
8.1.3  Building Security In Maturity Model (BSIMM) ....... ................................................... .................................. 80  
8.2  ANALISI DEI PROCESSI SSDLC ............................................. ................................................... ................................. 82  
8.2.1  McGraw’s Secure Software Development Life Cycle Pro cess .............................................. ........................ 82  
8.2.2  Microsoft Software Development Life Cycle (MS SDL) ................................................... ............................. 83  
8.2.3  Appropriate and Effective Guidance for Information Security (AEGIS) .................................. ..................... 84  
8.2.4  Secure Software Development Model (SSDM) .......... ................................................... ............................... 85  
8.2.5  Aprville and Pourzandi’s Secure Software Developmen t Life Cycle Process .............................. .................. 85  
8.2.6  Secure Software Development Model (SecSDM) ........ ................................................... ............................. 86  
8.2.7  Software Security Assessment Instrument (SSAI) .... ................................................... ................................. 86  
8.2.8  Hadawi’s Set of Secure Development Activities ..... ................................................... .................................. 86  
8.2.9  Comprehensive, Lightweight Application Security Pro cess (CLASP) ...................................... ...................... 87  
8.2.10  Secure Software Development Process Model (S2D-ProM ) ................................................. ................... 87  
8.2.11  Team Software Process for Secure Software Developme nt (TSP Secure) ................................... ............ 87  
9 LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO SOFTWARE SICURO ................................... ...............89  
9.1  DEFINIZIONE DEI REQUISITI DI SICUREZZA  .................................................. ................................................... .............. 90  
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 4 a 137  
 
9.1.1  Identificazione degli strumenti a supporto ........ ................................................... ...................................... 92  
9.2  PROGETTAZIONE DI APPLICAZIONI SICURE  .................................................. ................................................... ............. 93  
9.2.1  Identificazione degli strumenti a supporto ........ ................................................... ...................................... 93  
9.3  IMPLEMENTAZIONE DI APPLICAZIONI SICURE  .................................................. ................................................... ......... 94  
9.3.1  Identificazione degli strumenti a supporto ........ ................................................... ...................................... 94  
9.4  VERIFICA DELLA SICUREZZA DELLE APPLICAZIONI  .................................................. ................................................... ..... 97  
9.4.1  Identificazione degli strumenti a supporto ........ ................................................... ...................................... 98  
9.5  SUPPORTO PER LA MANUTENZIONE DI APPLICAZIONI SICURE  .................................................. ........................................ 98  
9.5.1  Identificazione degli strumenti a supporto ........ ................................................... ...................................... 99  
10  LINEE GUIDA PER L’IMPLEMENTAZIONE DELLA PRIVACY BY DESIGN NEL SDLC ................................... ............. 100  
10.1  INTRODUZIONE E CONCETTI BASE  .................................................. ................................................... ...................... 100  
10.1.1  Principi della Privacy ............................ ................................................... .............................................. 100  
10.1.2  Obiettivi di protezione ........................... ................................................... ............................................ 103  
10.1.3  Privacy by design ................................. ................................................... .............................................. 104  
10.1.4  Data protection Impact Assessment ................. ................................................... ................................. 105  
10.1.5  Flusso informativo del trattamento ................ ................................................... ................................... 110  
10.1.6  Privacy Implementation Strategy ................... ................................................... ................................... 111  
10.2  CICLO DI VITA DELLO SVILUPPO SOFTWARE NELL 'AMBITO DEL GDPR .............................................. ............................... 111  
10.3  IMPLEMENTAZIONE DELLA STRATEGIA NELLE FASI DI SVILUP PO DEL SOFTWARE  .................................................. .............. 114  
10.3.1  Scopo ............................................. ................................................... ................................................... . 114  
10.3.2  Le fasi di implementazione della Engineering Privac y by Design........................................ .................. 114  
10.4  INTEGRAZIONE DELLA ENGINEERING PRIVACY BY DESIGN NEL SOFTWARE LIFE CYCLE PROCESS  ........................................... 115  
APPENDICE 1.  CATALOGO SECURITY TOOLS ........................... ................................................... ........................ 116  
APPENDICE 2.  VALUTAZIONE STRUMENTI ............................. ................................................... ......................... 128  
A. CHECKMARX ......................................... ................................................... ................................................... ....... 128  
B. CODE DX ................................................ ................................................... ................................................... ......... 132  
C. SONAR QUBE  .................................................. ................................................... ................................................... . 134  
11  BIBLIOGRAFIA ...................................... ................................................... ................................................... ..... 137  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 5 a 137  
 
LISTA DELLE TABELLE 
Tabella 1 - Documenti di Riferimento .............. ................................................... ................................................... ............. 7  
Tabella 2 - Definizioni ........................... ................................................... ................................................... ........................ 8  
Tabella 3 - Acronimi .............................. ................................................... ................................................... ........................ 9  
Tabella 4 - Struttura del Catalogo Security Tool .. ................................................... ................................................... ....... 66  
Tabella 5 - Principi generali della privacy ....... ................................................... ................................................... .......... 101  
Tabella 6 - I sette principi della Privacy by Desig n ................................................. ................................................... ...... 105  
Tabella 7 - Tipologie di trattamento che rappresent ano un rischio elevato ............................ ...................................... 107  
Tabella 8 - Esempi di attributi per indentificare u na persona ........................................ ................................................ 10 9  
Tabella 9 - Fasi dell'Engineering Privacy by Design  .................................................. ................................................... .... 114  
 
LISTA DELLE FIGURE 
Figura 1 - Andamento delle vulnerabilità per anno [ Fonte: https://www.cvedetails.com] ................ ............................. 11  
Figura 2 - Il costo degli attacchi ................ ................................................... ................................................... .................. 12  
Figura 3 - Defence-in-Depth model for IT .......... ................................................... ................................................... ......... 13  
Figura 4 - OWASP Top 10 - 2017 .................... ................................................... ................................................... ............. 14  
Figura 5 - Augment the life cycle with security too ls ................................................ ................................................... ..... 16  
Figura 6 - Una porzione dell’albero di classificazi one CWE ........................................... ...................................................  42  
Figura 7- CWE Top 25 [Fonte: https://cwe.mitre.org/ top25/archive/2019/2019_cwe_top25.html] ........... ................... 43  
Figura 8 - Secure development activities .......... ................................................... ................................................... .......... 45  
Figura 9 - Modello fasi SSDLC ..................... ................................................... ................................................... ................ 45  
Figura 10 - Esempio di Schema di Risk Assessment .. ................................................... ................................................... .. 47  
Figura 11 - Gestione del rischio nel ciclo di vita del Software ...................................... ................................................... . 48  
Figura 12 - Cyber Risk Management di AgID – Report dei rischi per categoria di minaccia .............. ............................... 49  
Figura 13 - Input e Output della fase Final Review - Secure Release .................................. .............................................. 62  
Figura 14 - SAMM Structure ........................ ................................................... ................................................... ............... 79  
Figura 15 - BSIMM SSF ............................. ................................................... ................................................... ................... 81  
Figura 16 - Training practice BSIMM ............... ................................................... ................................................... ............ 82  
Figura 17 - Microsoft SDL ......................... ................................................... ................................................... ................... 83  
Figura 18 - Input e Output della fase Risk Assessme nt ................................................ ................................................... .. 92  
Figura 19 - Input e Output della fase Threat Modeli ng Attack Surface Analysis ........................ ...................................... 93  
Figura 20 - Input e Output della fase Static Analys is ................................................ ................................................... ..... 94  
Figura 21 -  Report di Checkmarx .................. ................................................... ................................................... .............. 96  
Figura 22 -  Interfaccia CodeDx ................... ................................................... ................................................... ................ 96  
Figura 23 - Info Security Product Guide 2016 : Rece nsione CodeDX ..................................... ........................................... 97  
Figura 24 - SonarQube ............................. ................................................... ................................................... ................... 97  
Figura 25 - Input e Output della fase Dynamic Analy sis ............................................... ................................................... . 98  
Figura 26 - Continuous Security ................... ................................................... ................................................... ............... 99  
Figura 27 – Esempio di flusso di valutazione necess ità DPIA .......................................... ................................................ 10 6  
Figura 28 - Esempio di flusso informativo del tratt amento ............................................ ................................................ 11 1  
Figura 29 - Integrazione della Engineering privacy by design nel Software Life Cycle Process ......... ............................. 115  
  
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 6 a 137  
 
1 INTRODUZIONE 
1.1  Scopo 
Scopo del presente documento è fornire le linee gui da per intraprendere un processo di sviluppo del 
software “sicuro”, nel corso di tutte le fasi SDLC,  attraverso l’identificazione e l’implementazione d i 
opportune azioni di sicurezza. 
 
1.2  Struttura del documento 
Il presente documento è articolato come di seguito:  
• Esigenze e Ambiti di Applicazione , come nasce l’esigenza dello sviluppo di software sicuro. 
• Analisi delle iniziative e degli standard , analizza lo scenario nazionale e globale fornendo  una 
vista delle iniziative e dei risultati prodotti in termini di: metodi e modelli, standard best 
practices, strumenti. L’analisi dello scenario ha c onsentito la creazione del Catalogo dei Security 
Tools . 
• Secure Software Development Life Cycle (SSDLC): Ana lisi delle metodologie e dei processi, 
analizza i diversi metodi e modelli SDLC esistenti,  con l’obiettivo di identificare le caratteristiche  
che rendono un ciclo di sviluppo software sicuro ed  efficace.  
• La sicurezza in tutte le fasi del ciclo di sviluppo  software  è un approfondimento sulle fasi SDLC 
poiché, tradizionalmente, gli aspetti di sicurezza non sono mai considerati con sufficiente 
attenzione fin dall’inizio del SDLC stesso. 
• Training e formazione , focalizza l’attenzione  sul fatto che  molti degli attuali problemi di 
sicurezza derivano da errori di progettazione e/o d i implementazione, risolvibili solo 
disponendo di personale formato e consapevole.  
• Certificazioni professionali , è un elenco delle principali certificazioni ricon osciute in ambito 
InfoSec.  
 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 7 a 137  
 
2 RIFERIMENTI 
2.1  Documenti di Riferimento 
Rif.  Codice Titolo 
DR-1.  -- Reg. (UE) 679/2016 “Regolamento generale sulla prot ezione dei dati” del 27/04/2017 
DR-2.  --  ISO/IEC 12207:2008 “Software life cycle processes”,  01/02/2008 
DR-3.  --  ENISA “Privacy and Data Protection by Design – from  policy to engineering”, 12/2014 
DR-4.  --  Ann Cavoukian “Privacy by Design – The 7 Foundation al Principles”, Information & 
Privacy Commissioner, Ontario, Canada, 01/2011 
DR-5.  --  ISO/IEC 29151:2017 “Code of practice for personally  identifiable information 
protection”, 01/08/2017 
DR-6.  --  MITRE Privacy Engineering Framework, MITRE Privacy Community of Practice (CoP), 
18/07/2014 
DR-7.  --  WP ART29 “Guidelines on Data Protection Impact Asse ssment (DPIA) and determining 
whether processing is “likely to result in a high r isk” for the purposes of Regulation 
2016/679”, 04/10/2017 
DR-8.  --  32nd International Conference of Data Protection an d Privacy Commissioners. “Privacy 
by design Resolution”, Jerusalem, Israele, 10/2010 
Tabella 1 - Documenti di Riferimento 
 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 8 a 137  
 
3 DEFINIZIONI E ACRONIMI 
3.1  Definizioni 
Vocabolo Titolo 
Applicazione Cloud Applicazione sviluppata sfruttando la tecnologia Cl oud Computing  
Defence in Depth Difesa a differenti livelli-Layered Defense. 
Gray Box  Metodo di test del software costituito da una combi nazione tra il metodo Black Box 
Testing e il metodo White Box Testing. Nel Black Bo x Testing, la struttura interna 
dell'elemento da testare è sconosciuta al tester e nel White Box Testing la struttura 
interna è nota. Nel Gray Box Testing, la struttura interna è parzialmente nota. Ciò 
comporta l'accesso alle strutture dati e agli algor itmi interni per definire i casi d'uso. Il test 
finale è assimilabile al tipo Black Box. 
Hardening processo che mira attraverso operazioni di configurazione  specifica di un dato sistema  e 
dei suoi componenti, a minimizzare l'impatto di pos sibili vulnerabilità, migliorandone 
quindi la sicurezza complessiva 
Tabella 2 - Definizioni 
3.2  Acronimi 
Codice Titolo 
Amministrazione  AgID  
AgID  Agenzia per l'Italia Digitale  
APP Atom Publishing Protocol  
AsmL Abstract State Machine Language  
BRP Business Risk Profile  
CAPEC Common Attack Pattern Enumeration and Classificatio n  
CC Common Criteria  
CCRA Common Criteria Recognition Agreement  
CE  Contratto Esecutivo  
CERT Computer Emergency Response Team  
CQ  Contratto Quadro  
CWE Common Weakness Enumeration  
DAST Dynamic Application Security Testing  
DiDI Defense -in -Depth Index  
ESA European Space Agency  
IACS Automation and Control Systems  
IASP Instrumented application security testing  
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 9 a 137  
 
Codice Titolo 
IFSQ Institute for Software Quality  
IDS Intrusion Detection System  
IFSQ Institute for Software Quality  
ISA International Society of Automation  
I&O IT Infrastructure & Operations  
MISRA Motor Industry Software Reliability Association  
MSAT Microsoft Security Assessment Tool  
NESSI Networked European Software and Services Initiative  
OWASP Open Web Application Security Project  
PII Personal Identification Information  
RASP Runtime application security testing  
RTI  Raggruppamento Temporaneo di Impresa  
SAFE CODE Software Assurance Forum for Excellence in Code  
SAMATE Software Assurance Metrics and Tool Evaluation  
SAMML Software Assurance Maturity Model  
SANSI SANS Software Security Institute  
SAST Static Application Security Testing  
SCA Software composition analysis  
SDLC Software Development Life Cycle  
SSA Software Security A ssessment  
SSE Secure Software Engineering  
SSDLC Secure Software Development Life Cycle  
S&R Security & Risk  
SW Software  
WASC Web Application Security Consortium  
Tabella 3 - Acronimi  
 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 10  a 137  
 
4 ESIGENZE E AMBITI DI APPLICAZIONE  
4.1  Il panorama delle vulnerabilità applicative 
Il panorama delle minacce per la sicurezza delle ap plicazioni è in costante evoluzione.  
Secondo la fonte Gartner 1, già nel 2005, OLTRE IL 75% DEGLI ATTACCHI ERANO INDIRIZZATI 
DIRETTAMENTE VERSO LE APPLICAZIONI . 
I fattori chiave di questa evoluzione sono i progre ssi fatti dagli attaccanti, il rilascio di nuove te cnologie, 
l’uso di sistemi sempre più complessi. Gli obiettiv i degli attacchi sono le vulnerabilità, celate all’ interno 
delle applicazioni software, che forniscono un faci le percorso d’ingresso per compromettere i sistemi o 
lanciare nuovi attacchi e malware.  
I dati riportati dal Clusit 2 nel “Rapporto 2019 sulla Sicurezza ICT”3, confermano un trend ancora in crescita 
degli attacchi informatici:  
• Nel biennio 2017-2018 il tasso di crescita del nume ro di attacchi gravi è cresciuto del 37,7% 
aumentando fino a dieci volte rispetto al precedent e biennio 2015-2016. Il settore pubblico rimane 
sempre in primo piano dei criminali (+44%).   
• I punti deboli delle applicazioni e le vulnerabilit à del software continuano a essere il mezzo più 
comune con cui i criminali informatici compiono att acchi esterni e, ancora più grave, lo 
sfruttamento di vulnerabilità note è ancora in cres cita (+39,4%). Nonostante queste vulnerabilità 
possano essere risolte con misure adeguate, le vuln erabilità più comuni nelle applicazioni Web 
continuato a essere le stesse degli ultimi anni: il  60% presenta errori di convalida dell'input, il 70 % 
difetti di incapsulamento di dati o funzionalità cr itiche all’interno dei componenti e oltre un terzo 
(35%) presenta problematiche provocate dall’abuso d i API. 
• Il numero di vulnerabilità segnalate al National Vu lnerability Database (NVD) 4 nel 2018 ha raggiunto 
quota 16.517, con un incremento del 12,8% rispetto all'anno precedente (14.647 nel 2017). 
Secondo CVE Details 5, nel 2017 il totale delle falle di sicurezza è cre sciuto più del doppio rispetto al 
2016 ed è continuato a crescere anche nel 2018: 
                                                           
1 http://selagroup.sela.co.il/_Uploads/dbsAttachedFi les/GartnerNowIsTheTimeForSecurity.pdf 
2 Clusit (Associazione Italiana per la Sicurezza Info rmatica): www.clusit.it  
3 https://web.uniroma1.it/infosapienza/sites/default/f iles/RapportoClusit2019.pdf  
4 www.nvd.nist.gov/ 
5 https://www.cvedetails.com/  
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 11  a 137  
 
 
Figura 1 - Andamento delle vulnerabilità per anno [ Fonte: https://www.cvedetails.com ] 
Nella Figura 1 è rappresentato il numero delle vuln erabilità nel periodo 1999-2019. Sull’asse delle as cisse 
sono riportati gli anni progressivamente dal 1999 a l 2019, mentre nelle ordinate è indicata la numeros ità 
delle vulnerabilità riscontrate per anno. 
Tra le principali cause, si riscontra l’adozione di  metodologie concentrate, soprattutto, sulla correz ione di 
difetti funzionali e di attenzione alle performance  delle logiche applicative, trascurando l’attuazion e di 
pratiche di progettazione e programmazione che gara ntiscono la sicurezza del codice. 
Da qui anche l’appello della comunità OWASP 6 che sottolinea la necessità di accrescere la consa pevolezza 
sulla sicurezza delle applicazioni, poiché il SW no n sicuro mette a repentaglio le infrastrutture anch e più 
critiche (finanziarie, sanitarie e difensive).  
E’ necessario rispondere in modo efficace alle sfid e sulla sicurezza delle applicazioni, dotandosi di soluzioni 
adeguate per: 
• Migliorare la gestione del programma di sicurezza d elle applicazioni. Le componenti chiavi di un 
programma di sicurezza devono includere: 
o Risk Management Integration , 
o Architect & Developer Guidance,  
o Process Improvement (SDLC), 
o Secure Development Activities, 
o Vulnerability Management Integration; 
 • Valutare il codice software e le applicazioni al fi ne di identificare le vulnerabilità; 
• Automatizzare la correlazione dei risultati della v erifica della sicurezza per applicazioni interattiv e, 
statiche e dinamiche. 
4.2  Sviluppo applicazioni sicure  
La sicurezza informatica è l’insieme delle tecniche  che mirano a proteggere l'ambiente informatico che  
include: gli utenti, le reti, le applicazioni, i pr ocessi e i dati. Questa sicurezza “integrata” impli ca una visione 
della security a 360° il cui obiettivo principale è  di ridurre i rischi, compreso la prevenzione e la mitigazione 
degli attacchi informatici.  
                                                           
6 A free and open software security community (https: //www.owasp.org)  

  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 12  a 137  
 
Le applicazioni software dovrebbero avere caratteri stiche di sicurezza base di default ( Secure By Default ) 
quali, ad esempio, l’abilitazione automatica di mec canismi di costruzione di password complesse piutto sto 
che procedure di rinnovo delle stesse secondo una s cadenza di natura temporale. Un cambiamento di 
paradigma nello sviluppo di software (security by d esign/default) è invocato anche nel nuovo regolamen to 
UE per la protezione dei dati (Art. 25 7). 
Le violazioni causano danni economici reali alle az iende che spesso richiedono mesi e addirittura anni  per 
risolversi. Secondo l’ultimo Report Cisco (2018 Ann ual Cybersecurity Report), più della metà di tutti gli 
attacchi (circa il 53%) ha causato danni finanziari  per oltre 500.000 dollari americani e ha riguardat o perdite 
di fatturato, di clienti, di opportunità e il dover  sostenere costi aggiuntivi non previsti.  
 
 
Figura 2 - Il costo degli attacchi 
[Fonte: Cisco 2018 Security Capabilities Benchmark Study] 
Lo studio ha coinvolto oltre 3600 intervistati in v entisei paesi. Riguardo l’Italia: il 38% delle azie nde 
intervistate all’interno dello studio stima di aver  subito danni inferiori ai 100.000 dollari, e il 37 % ha subito 
danni che hanno superato i 500.000 dollari, mentre il 25% ha subito danni per cifre comprese tra i 100 .000 
e i 499.000. 
  
                                                           
7 http://www.privacy-regulation.eu/it/25.htm  

  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 13  a 137  
 
L’approccio migliore per proteggere un sistema info rmativo, è garantire che 
ogni sua componente abbia un proprio meccanismo di protezione. La 
costruzione di strati multipli di controlli di sicu rezza posti lungo un sistema è 
definita Defence in Depth .  
La Defense-in-Depth è l’approccio alla sicurezza de lle informazioni che 
prevede il raggiungimento di una adeguato livello d i sicurezza attraverso 
l’utilizzo coordinato e combinato di molteplici con tromisure.  
Questa strategia difensiva si fonda sull’integrazio ne di differenti categorie di 
elementi: persone, tecnologie e modalità operative.  La ridondanza e la 
distribuzione delle contromisure possono essere sin tetizzate in una “difesa a 
differenti livelli” (“Layered Defenses”). Il concet to, di derivazione militare, si 
basa sull’assunto che nel caso in cui un attacco ab bia successo, a causa del 
fallimento di un meccanismo di sicurezza, altri mec canismi di sicurezza 
possono intervenire per consentire un’adeguata prot ezione dell’intero 
Sistema. 
 
Diverse sono le iniziative che si sono incentrate s ulle problematiche Secure Development promuovendo 
azioni di sensibilizzazione (indirizzate ad aziende  e community di sviluppatori) quali:  
• la diffusione delle fondamentali best practices in materia di sicurezza applicativa (le prime tra tutt e 
riconducibili a una buona ingegnerizzazione del sof tware);  
• una piena comprensione delle minacce più comuni (co mpresi i difetti propri dei linguaggi di 
programmazione);  
• ancora più importante, una considerazione della pro blematica fin dalle prime fasi del ciclo di svilupp o. 
L’OWASP traccia periodicamente la lista delle vulne rabilità più critiche delle applicazioni web. L’obi ettivo è 
appunto, quello di educare e sensibilizzare sulle c onseguenze che possono scaturire da implementazioni  
errate e facilmente vulnerabili. L’ultimo rapporto OWASP è stato rilasciato nel novembre del 2017 (OWA SP 
Top 10 – 2017). La maggior parte delle problematich e identificate nella OWASP Top 10 – 2017 sono le 
stesse (o comunque molto simili) a quelle identific ate nel rapporto precedente (OWASP Top 10 – 2013) c on 
qualche novità, come si evince dalla figura che seg ue:  Figura 3 - Defence -in -Depth model for IT  
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 14  a 137  
 
 
Figura 4 - OWASP Top 10 - 2017 
L’adozione di un Secure Software Development Life C ycle (SSDLC) atto a considerare e implementare 
opportune attività di sicurezza, nel corso di tutte  le sue fasi del ciclo di vita del SW (dall’analisi  fino alla 
manutenzione), è una necessità inderogabile per ris pondere in modo efficace alle problematiche di 
sicurezza e per ridurre i costi che comportano tras curarla. 
Ripensare alla sicurezza tra responsabilità e consa pevolezza, oltre ad essere una buona pratica, è anc he un 
obbligo di legge (Regolamento UE 679/2016).  
 
4.3  Security Tools 
Nell’ambito della cybersecurity, Forrester 8, nel suo report “ Five steps to reinforce and harden application 
security ”9, rileva la necessità di cooperazione tra i team Se curity & Risk (S&R) e gli IT manager (I&O), 
ribadendo più volte come i primi non siano in grado , da soli, di coprire tutte le vulnerabilità scatur ite dalle 
nuove esigenze in ambiti IT e digital business. Dal  punto di vista dell’analista, infatti, l’IT team d eve 
adottare, attraverso opportuni meccanismi di automa zione e integrazione, le security practices  all’interno 
di una ‘ continuous delivery pipeline ’. Questo garantisce una maggiore visibilità nelle interazioni tra 
hardware, software, servizi web e customer data. I professionisti I&O hanno, quindi, l’obiettivo di cr eare un 
ambiente di sicurezza ‘responsive’.  
A tal fine, Forrester propone cinque steps per cost ruire un responsive security environment : 
 
 
Innanzitutto è necessario eliminare tutte le proble matiche di sicurezza spesso derivanti da vulnerabil ità 
riconducibili a servizi non più utilizzati e non pi ù mantenuti o una cattiva gestione degli accessi e delle 
autorizzazioni. Tale attività deve essere svolta at traverso la collaborazione tra i team dedicati (I&O  e S&R). 
                                                           
8 https://www.forrester.com/  
9 https://www.forrester.com/report/Five+Steps+To+Rein force+And+Harden+Application+Security/-/E-RES127875  
Step 1 : rimuovere le ‘inconsistenze’ e creare un ‘conto’ dei materiali  
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 15  a 137  
 
In aggiunta, il censimento delle componenti applica tive (attraverso un approccio ‘application modeling ’) 
consente di ottenere ulteriori benefici in termini di: riduzione del mean-time-to-repair (attraverso l ’impiego 
di strumenti di gestione della configurazione a sos tegno del processo di monitoraggio delle modifiche 
applicative e dell’infrastruttura a supporto); util izzo limitato di software per l’analisi delle vulne rabilità di 
terze parti (la visione completa dell’applicazione e di come interagisce con gli altri sistemi esisten ti 
consente di limitare l’uso di ulteriori strumenti);  rapida rimozione dei ‘difetti’ che possono generar e 
vulnerabilità. 
 
 
Generalmente l’accesso intenzionale, non autorizzat o, ai dati presenti all’interno della propria 
organizzazione, consegue, essenzialmente, da vulner abilità derivanti da un hardening non adeguato, da 
problematiche di sicurezza nel software/hardware e/ o da una cattiva progettazione del sistema stesso. E’ 
necessario lavorare a livello infrastrutturale per bloccare tutti gli accessi non autorizzati monitora ndo 
costantemente network e traffico sui sistemi. I tea m di gestione dell’infrastruttura e quelli della si curezza 
dovrebbero cooperare nel processo di identificazion e delle policy e dei tool per il monitoraggio, dell e 
applicazioni in particolare, per verificare in temp o reale eventuali cambiamenti prima che questi si 
traducano in vulnerabilità.  
 
 
E’ richiesto l’impiego di sistemi infrastrutturali e tool tecnologici a supporto delle politiche di si curezza. 
Questi svolgono un ruolo determinante nella prevenz ione (e nella risposta) delle intrusioni in quanto,  a 
fronte di anomalie (legate ad esempio all’utilizzo delle Cpu o al numero delle transazioni di sistema) , 
avendo il controllo di tutto lo stack tecnologico, riescono a fornire in tempo utile alert e informazi oni al 
team di sicurezza. Un sistema di controllo di quest o tipo accelera il mean-time-to-detection (il tempo  di 
localizzazione di una vulnerabilità o di un attacco ) e il tempo di risposta. Inoltre, cosa molto impor tante, 
riduce il range dei falsi allarmi di sicurezza (gra zie ai controlli incrociati tra i team di infrastru ttura e i team 
della sicurezza). 
 
E’ estremamente importante l’attività di tracciamen to e di monitoraggio in tutte le fasi del ciclo di vita di 
sviluppo dell’applicazione. L’obiettivo è di analiz zare tutte le fonti dati nonché il materiale di cia scuna 
applicazione, e monitorarne ogni minimo cambiamento . A tal fine, dal punto di vista tecnologico, Forre ster 
suggerisce:  
i)  l’integrazione degli Application Release Automation  tool nei processi di auditing; 
ii)  l’adozione di sistemi di Automate Change Tracking e  dashboard a supporto dai team di I&O e 
S&R. 
 
Gli step precedenti concorrono alla creazione di un  vero e proprio stack tecnologico incentrato sulla 
sicurezza applicativa. Al fine di indirizzare corre ttamente una protezione efficace delle applicazioni , è di Step 2 : limitare e rinforzare l’accesso ai sistemi e ai n etwork device , monitorare i cambiamenti  
Step 3 : assistere i team di Security&Risk sul fronte intrusion detectio n  & response  
Step 4 : ‘loggare’ quanto più possibile  
Step 5 : creare uno stack di application security tool  
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 16  a 137  
 
fondamentale importanza individuare le vulnerabilit à (e porvi rimedio) sin dalle prime fasi del ciclo di vita 
dello sviluppo, quando è ancora poco costoso e poco  rischioso intervenire. 
 
 
Figura 5 - Augment the life cycle with security too ls 
[Fonte: Forrester, Five Steps To Reinforce And Hard en Application Security] 
Per comporre lo stack, queste le tecnologie cui gli  I&O professional dovrebbero porre attenzione:  
• Static Application Security Testing (SAST) , tool che esaminano il codice binario e il codice di 
programmazione delle applicazioni senza ‘mandare in  esecuzione’ l’applicazione (ossia senza la 
necessità di farla girare sui sistemi nei processi di testing);  
• Software composition analysis (SCA) tool , tecnologie che consentono di analizzare le buildi ng block 
applicative per scovare vulnerabilità all’interno, per esempio, delle librerie, dei componenti open 
source o dei vari ‘blocchi’ di software che compong ono l’applicazione.  
• Dynamic Application Security Testing (DAST) , sistemi che permettono di osservare in dettaglio come si 
comporta l’applicazione quando è in funzione per sc ovarne imperfezioni o vulnerabilità prima che si 
prosegua con lo step di sviluppo successivo;   
• Fuzz testing tool , sistemi che analizzano le vulnerabilità sul front e di protocolli network, application 
data e input location (sempre durante i cicli di te sting applicativo);  
• Hybrid analysis tool , si tratta di tecnologie di testing per la sicurez za delle applicazioni che integrano 
funzionalità di Instrumented application security t esting (LAST) e Runtime application security testin g 
(RASP) utili per ridurre i falsi positivi e i falsi  negativi generalmente evidenziati dai sistemi DAST ; 

  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 17  a 137  
 
• Vulnerability assessment tool , sistemi utili a rendere visibili eventuali critic ità a livello di sistema 
operativo, configurazione dei sistemi, micro-config urazioni dei server e delle altre architetture con cui 
l’applicazione in sviluppo dovrà interagire una vol ta messa in produzione; 
• Penetration testing tool , tecnologie utili a ‘validare’ l’assessment delle vulnerabilità perché mostrano 
come potrebbero avvenire gli attacchi simulando la penetrazione nei sistemi e nelle applicazioni. 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 18  a 137  
 
5 ANALISI DELLE INIZIATIVE E DEGLI STANDARD  
5.1  Iniziative Internazionali 
5.1.1  Open Web Application Security Project (OWASP) 
L'Open Web Application Security Project (chiamato s emplicemente OWASP) è un progetto open-source per 
la sicurezza delle applicazioni Web. L'OWASP offre guide con consigli sulla creazione di applicazioni Internet 
sicure, e indicazioni per i test cui andrebbero sot toposte. È stato, inoltre, pubblicato WebGoat, util e ad 
apprendere, attraverso esempi concreti, le minacce più diffuse per la sicurezza delle applicazioni web . Nel 
2004 è stata istituita una fondazione no-profit che  supporta l'OWASP e che persegue l'obiettivo di 
aumentare la sicurezza delle applicazioni consenten do di prendere le decisioni in base ai rischi. In E uropa è 
un'organizzazione no-profit registrata da giugno 20 11 ed è presente anche in Italia. 
La filosofia cui si ispira OWASP si può riassumere nei seguenti punti: 
• Apertura . Tutto in OWASP è aperto e trasparente, dal codice  sorgente ai bilanci societari. 
• Innovazione . OWASP incoraggia e supporta l'innovazione e la sp erimentazione per trovare nuove e 
sempre più efficaci soluzioni alle sfide della sicu rezza del software. 
• Universalità . Chiunque è incoraggiato a partecipare alla comuni tà OWASP. 
• Integrità . OWASP è una comunità globale, che si basa sull’on està e sull’indipendenza. 
 
URL  https://www.owasp.org/  
Country of HQ location  
Geographic Scope  US  
International  
Type  Various Industry (not for profit)   
 
L'iniziativa è organizzata come una comunità collab orativa che produce tool e documenti nelle seguenti  tre 
aree principali: 
• Protection, 
• Detection, 
• Life-cycle security. 
Relativamente a queste tre aree, OWASP ha prodotto:  
• un insieme di guide sulle buone pratiche quali: OWA SP Testing Guide, OWASP Code Review e 
Software Assurance Maturity Model; 
•  il Report’ OWASP Top 10’ sui rischi per le applica zioni web.  
Da considerare inoltre, come attività rilevanti svo lte da OWASP, quanto segue: 
Good Practice  [Protection Area] OWASP Secure Coding Practices - Quick Reference Guide v2.0 - Un 
insieme indipendente dalla tecnologia di pratiche d i codifica della sicurezza generale 
del software, in formato checklist, che può essere integrata nel ciclo di vita dello 
sviluppo del software. 
[Protection Area] OWASP Developers Guide v2.0 (2005 ) - Un documento completo 
che copre tutti gli aspetti della sicurezza delle a pplicazioni e dei servizi web. 
[Detection Area] OWASP Code Review Guide v2.0 - Una  guida che raccoglie le 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 19  a 137  
 
migliori pratiche per la revisione del codice.  
[Detection Area] OWASP Testing Guide v4.0 - Una gui da sulle procedure e checklist di 
test di sicurezza dell'applicazione. 
[Detection Area] OWASP Mobile Security Testing Guid e (MSTG). Un manuale 
completo per il test di sicurezza delle applicazion i “mobile” e il reverse engineering 
per il security testing delle piattaforme iOS e And roid. 
Standards  [Detection  Area] Application Security Verification Standard (A SVS). L'ASVS definisce 
uno standard internazionale per la valutazione dell a sicurezza delle applicazioni e 
copre sia la verifica delle applicazioni automatizz ata che quella manuale, utilizzando 
tecniche di test di sicurezza e di revisione del co dice. 
[Detection Area] OWASP Mobile Application Security Verification Standard (MASVS). 
Uno standard per la sicurezza delle applicazioni mo bili. 
Tools  (Projects ) [Detection Area] Progetto OWASP Web Testing Environ ment (WTE). Una raccolta di 
strumenti di sicurezza delle applicazioni e di docu mentazione disponibile in diversi 
formati come VM, pacchetti di distribuzione Linux, installazioni basate su cloud e 
immagini ISO. Il progetto OWASP WTE è un migliorame nto dell'originale OWASP Live 
CD Project. 
[Detection Area] Progetto Zed Attack Proxy (ZAP) - Questo progetto di punta di 
OWASP è tecnicamente uno strumento proxy per interc ettare, attraverso il traffico di 
rete, le vulnerabilità nelle applicazioni web. È st ato progettato per essere utilizzato 
da persone con un’esperienza consolidata in materia  di sicurezza e, come tale, è 
ideale per gli sviluppatori e tester funzionali chi amati a svolgere il penetration 
testing. Include le caratteristiche dei vecchi prog etti WebScarab e DirBuster. 
[Detection Area] Progetto SWFIntruder. È uno strume nto per analizzare e testare la 
sicurezza delle applicazioni flash in fase di esecu zione. 
[Life cycle security Area] Progetto OWASP WebGoat. Un'applicazione web insicura 
per insegnare la sicurezza delle applicazioni web a ttraverso lezioni pratiche 
interattive.   
[Life cycle security Area] Piattaforma OWASP O2. Un a raccolta di moduli Open 
Source a supporto dei professionisti della sicurezz a delle applicazioni web per 
massimizzare i loro sforzi e ottenere rapidamente u na significativa conoscenza del 
profilo di sicurezza di un'applicazione. 
[Protection Area] OWASP OWASP OWTF. Un altro strume nto di punta di OWASP per i 
pen-test. 
[Detection Area] OWASP Dependency Check. Strumento per controllare e verificare 
la vulnerabilità delle librerie di terze parti util izzate nei progetti di sviluppo software. 
[Protection Area] OWASP Security Shepherd. Strument o destinato a migliorare la 
capacità di pen-test del personale di sicurezza. 
[Protection Area] OWASP DefectDojo. Uno strumento o pen source di gestione delle 
vulnerabilità che semplifica il processo di testing , fornendo template, report, 
metriche e strumenti di base. 
[Life cycle security Area] OWASP Juice Shop. Un'app licazione web volutamente 
insicura per i corsi di sicurezza scritta interamen te in JavaScript che comprende 
l'intera Top Ten di OWASP e altri gravi difetti di sicurezza. 
[Protection Area] OWASP Security Knowledge Framewor k. Uno strumento che viene 
utilizzato come guida per la creazione e la verific a di software sicuro; può essere 
utilizzato anche per formare gli sviluppatori sulla  sicurezza delle applicazioni. 
[Detection Area] OWASP Dependency Track. Una piatta forma di analisi della 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 20  a 137  
 
composizione del software (SCA) che tiene traccia d i tutti i componenti di terze parti 
per identificare proattivamente le vulnerabilità de i componenti che mettono a 
rischio le applicazioni. 
[Life cycle security Area] OWASP Software Assurance  Maturity Model (SAMM). Un 
framework aperto per aiutare le organizzazioni a fo rmulare e implementare una 
strategia per la sicurezza del software su misura p er i rischi specifici 
dell'organizzazione. 
Code Projects  [Protection Area] Progetto OWA SP AntiSamy - Una libreria per la codifica HTML e 
CSS: API Java e .NET per la convalida degli input H TML/CSS forniti dagli utenti al fine 
di prevenire gli attacchi di cross-site scripting e  phishing. 
[Life cycle security Area] Progetto OWASP Enterpris e Security API (ESAPI) - Una 
raccolta di librerie di sicurezza gratuite e open s ource che possono essere utilizzate 
dagli sviluppatori per costruire applicazioni web s icure. 
[Protection Area] Progetto OWASP ModSecurity Core R ule Set (CRS). Un insieme di 
regole di sicurezza per configurare strumenti di fi rewall come ModSecurity. 
[Protection Area] Progetto OWASP CSRFGuard. Una lib reria da includere nei progetti 
di sviluppo software per costruire una difesa contr o gli attacchi CSRF (Cross-Site 
Request Forgery). 
[Detection Area] Progetto OWASP AppSensor. Un quadr o concettuale e una 
metodologia che offre una guida prescrittiva per im plementare il rilevamento delle 
intrusioni e la risposta automatica nelle applicazi oni. 
[Protection Area] Progetto OWASP Top Ten. La pubbli cazione OWASP più famosa: le 
prime 10 minacce per le applicazioni web, classific ate per prevalenza, sfruttabilità, 
rilevabilità e impatto. 
 
5.1.2  Common Criteria (CC) 
I Common Criteria sono uno standard pubblicato dall ’ISO (ISO/IEC 15408-1:200910 ), lo standard è costituito 
da tre parti: 
• Introduzione e modello generale 
• Requisiti di sicurezza funzionali 
• Requisiti di sicurezza di assurance 
Con i CC è fornita anche una metodologia per la val utazione, la Common Criteria Evaluation Methodology  
(CEM), anch’essa standardizzata dall’ISO (ISO/IEC 1 8405:2008). Il processo di valutazione CC di un pro dotto 
(software o hardware) riguarda diverse fasi del SDL C applicato:  
• Requisiti (Protection Profile document - PP) 
• Implementazione (Security Target document – ST) 
• Test 
Le verifiche previste sul sistema/prodotto, nel cor so della valutazione da parte dello sviluppatore e del 
valutatore, mirano ad accertare che siano stati sod disfatti opportuni requisiti di assurance che diven tano 
sempre più severi al crescere del livello di valuta zione.  
I CC definiscono una scala di sette livelli di valu tazione: 
                                                           
10  https://www.iso.org/standard/50341.html  
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 21  a 137  
 
• EAL1. Functionally tested  
• EAL2. Structurally tested  
• EAL3. Methodically tested and checked  
• EAL4. Methodically designed, tested and reviewed  
• EAL5. Semi-formally designed and tested  
• EAL6. Semi-formally verified design and tested  
• EAL7. Formally verified design and tested.  
 
I seguenti paesi hanno firmato l’accordo Common Cri teria Recognition Agreement (CCRA) che si applica d a 
EAL1 to EAL4: 
• Paesi EU/EFTA: Austria, Repubblica Ceca, Danimarca,  Finlandia, Francia, Germania, Grecia, 
Ungheria, Italia, Paesi Bassi, Norvegia, Spagna, Sv ezia e Regno Unito; 
• Paesi Non-EU/EFTA: Australia, Canada, India, Israel e, Giappone, Corea, Malesia, Nuova Zelanda, 
Pakistan, Singapore, Turchia e Stati Uniti. 
 
L’European Mutual Recognition Agreement of IT Secur ity Evaluation Certificates o ‘SOGIS-agreement’ è u n 
accordo tra alcune nazioni europee con l'adesione d ell'UE o dell’EFTA relativo al mutuo riconoscimento  dei 
certificati di valutazione secondo gli standard CC per tutti i livelli di valutazione (EAL1 EAL7). 
 
URL  https://www.co mmoncriteriaportal.org  
Country of HQ location  
Geographic Scope  International  
Type  Government  
 
I criteri comuni per la valutazione della sicurezza  informatica e la metodologia comune per la sicurez za delle 
tecnologie di valutazione sono stati pubblicati com e standard ISO. 
 
Risultati più rilevanti: 
Standard  Common Methodology for Information Technology Secur ity Evaluation and Common 
Criteria for Information Technology Security Evalua tion 
Queste costituiscono la base tecnica di un accordo internazionale (CCRA). La versione 
2.3 è stata pubblicata anche come ISO/IEC 15408:200 9 e ISO/IEC 18045:2008.  
Future  
Related Standard JTC 1/SC 27  
ISO/IEC NP 20004  
Tecnologie dell'informazione, tecniche di sicurezza , sviluppo di software sicuro e 
valutazione secondo le norme ISO/IEC 15408 e ISO/IE C 18405. 
 
5.1.3  IEEE Computer Society 
L’Iniziativa IEEE Computer Society è un'organizzazi one senza fini di lucro, i principali progetti sono  finalizzati 
alla pubblicazione di standard su tecnologie IT.  
 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 22  a 137  
 
URL  http s://www. computer .org   
Country of HQ location  
Geographic Scope  US  
International 
Type  Academic (not for profit)  
 
Risultati di questa iniziativa sono libri, conferen ze, pubblicazioni relative a conferenze, riviste, c orsi on-line, 
certificazioni di sviluppo software, standard e riv iste tecniche. 
 
Risultati più rilevanti: 
Good Practice  Guide to the Software Engineering Body of Knowledge  (SWEBOK), la guida descrive le 
conoscenze generalmente accettate in materia di ing egneria del software. Le sue 15 
aree di conoscenza (knowledge areas) riassumono i c oncetti di base e includono un 
elenco di riferimento per informazioni più dettagli ate. 
Enterprise Information Technology Body of Knowledge  (EITBOK) Guide. Un 
compendio di descrizioni di alto livello delle aree  di conoscenza (knowledge areas) 
che sono generalmente necessarie per il buon funzio namento della tecnologia 
dell'informazione (IT). 
Standard  Software & Systems Engineering Standards Committee (S2ESC)  
Formal Liaisons with ISO/IEC JTC1/SC7. 
 
5.1.4  International Organisation for Standardization (ISO ) 
ISO è il più grande sviluppatore e editore al mondo  di standard internazionali. Industrie ed esperti d el 
settore generalmente contribuiscono come membri dei  comitati tecnici ISO proponendo nuove normative 
che devono essere approvate almeno dal 70% dei memb ri ISO. 
 
Il comitato tecnico che opera nell’ambito degli sta ndard IT è il JTC 1 che, a sua volta, è organizzato  in 22 
sottocomitati che coprono aree specifiche. Si ripor ta di seguito un sottoinsieme significativo: 
• ISO / IEC JTC 1 / SC 7: Ingegneria del software e d ei sistemi; 
• ISO / IEC JTC 1 / SC 22: Linguaggi di programmazion e, compresi ambienti e interfacce software di 
sistema; 
• ISO / IEC JTC 1 / SC 27: Sicurezza delle informazio ni, sicurezza informatica e protezione della 
privacy; 
• ISO / IEC JTC 1 / SC 38: Cloud Computing e piattafo rme distribuite; 
• ISO / IEC JTC 1 / SC 41: Internet of Things e tecno logie correlate; 
• ISO / IEC JTC 1 / SC 42: Intelligenza artificiale. 
 
Relativamente agli ambiti SSE troviamo: 
• pubblicazione di rapporti tecnici e standard: 
o ISO / IEC TR 15026-1: 2013, ISO / IEC TR 24731-1: 2 007, ISO / IEC TR 24772: 2013, ISO / IEC 
15408 e ISO / IEC 18405  
• 2 progetti in corso.  
 
 
 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 23  a 137  
 
URL  https://www.iso.org  
Geographic Scope  International  
Type  Network of national standards institutes  
 
Risultati più rilevanti: 
ISO/IEC JTC 1/SC 7  
 ISO/IEC 15026 -1: 2019  Systems and software engineering --  Systems and 
software assurance -- Part 1: Concepts and vocabula ry 
 
ISO/IEC JTC 1/SC 22  
 ISO/IEC TR 24731 -1:2007  Information technology - Programming languages, 
their environments and system software interfaces -  Extensions to the C library 
- Part 1: Bounds-checking interfaces.  
Specifica una serie di estensioni del linguaggio di  programmazione C, 
specificato dalla norma internazionale ISO/IEC 9899 : 1999. Queste estensioni 
possono essere utili nella mitigazione delle vulner abilità di sicurezza nei 
programmi. 
ISO/IEC TR 24731-2:2010 Information technology — Pr ogramming languages, 
their environments and system software interfaces —  Extensions to the C 
library — Part 2: Dynamic Allocation Functions. 
Fornisce funzioni alternative per la libreria C che  favoriscono la 
programmazione sicura.  
ISO/IEC TR 24772:2013 Information technology - Prog ramming languages - 
Guidance on avoiding vulnerabilities in programming  languages through 
language selection and use.  
Specifica le vulnerabilità del linguaggio di progra mmazione software da evitare 
nello sviluppo di sistemi in cui è richiesto un com portamento sicuro ai fini 
security/safety, mission critical e software busine ss-critical. In generale, questa 
guida è applicabile al software sviluppato, rivisto , o mantenuto per qualsiasi 
applicazione. Le vulnerabilità sono descritte in mo do generico, applicabili a una 
vasta gamma di linguaggi di programmazione. 
Questa guida può essere anche utilizzata dagli svil uppatori per produrre o 
selezionare gli strumenti di valutazione del codice  sorgente capaci di scoprire 
ed eliminare alcuni costrutti che potrebbero portar e alla vulnerabilità del 
software o per selezionare un linguaggio di program mazione che consenta di 
evitare i problemi attesi. 
 
  
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 24  a 137  
 
Progetti in corso: 
ISO/IEC JTC 1/SC 7  
 ISO/IEC 15026 -2:2011  - Systems and software engineering - Systems and 
software assurance -- Part 2: Assurance case.  
Specifica i requisiti minimi per la struttura e il contenuto di un Assurance Case 
per migliorare la coerenza e la comparabilità degli  Assurance Case e per 
facilitare le comunicazioni delle parti interessate , le decisioni d’ingegneria e 
altri Assurance Case. 
Secondo questo documento ISO “ An assurance case includes a top-level claim 
for a property of a system or product (or set of claim s), systematic 
argumentation regarding this claim, and the evidenc e and explicit assumptions 
that underly this argumentation. Arguing through mu ltiple levels of 
subordinate claims, this structured argumentation c onnects the top-level claim 
to the evidence and assumptions ”. 
ISO/IEC CD 15026-3 Systems and software engineering  -- Systems and software 
assurance -- Part 3:2015 System Integrity levels.  
Si riferisce ai livelli d’integrità dell’Assurance Case e include i requisiti relativi al 
loro utilizzo con e senza un Assurance Case. 
Secondo questo documento ISO “ A software integrity level denotes a range of 
values of a software property necessary to maintain s ystem risks within 
tolerable limits ”. 
ISO/IEC JTC 1/SC 27  
 ISO/IEC 27021:2017  Information technology --  Security techniques --  
Competence requirements for information security ma nagement systems 
professionals 
ISO/IEC/IEE 15026-1:2019: Systems and software engi neering -- Systems and 
software assurance -- Part 1: Concepts and vocabula ry 
ISO/IEC 15026-2:2011 Systems and software engineeri ng — Systems and 
software assurance — Part 2: Assurance case 
ISO/IEC NP 20004: Information technology - Security  techniques - Secure 
software development and evaluation under ISO/IEC 1 5408 and ISO/IEC 18405. 
Si riferisce a un problema differente e più urgente  associato all’uso pratico dei 
Common Criteria, ossia la relazione tra i processi di sviluppo e di valutazione 
con l’analisi dei potenziali attacchi. E’ legato al l’iniziativa CAPEC. 
ISO/IEC TS 19608: 2018 Guidance for developing secu rity and privacy 
functional requirements based on ISO/IEC 15408 
ISO/IEC TS 19249: 2017 Information technology — Sec urity techniques — 
Catalogue of architectural and design principles fo r secure products, systems 
and applications 
ISO/IEC 27002:2013 Information technology — Securit y techniques — Code of 
practice for information security controls 
 
5.1.5  International Society of Automation (ISA) 
ISA è un'organizzazione globale no-profit che svilu ppa standard per l'industria, certifica i professio nisti di 
settore, offre istruzione e formazione, pubblica li bri e articoli tecnici, ospita convegni e fiere per  i 
professionisti dell’automazione. 
La cybersecurity per l’industria è diversa dalle al tre aree. Nell’automazione industriale la priorità è 
mantenere l’impianto in funzione garantendo, laddov e possibile, integrità e riservatezza (AIC - availa bility, 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 25  a 137  
 
integrity and confidentiality) mentre nelle altre a ree la priorità è la protezione dei dati (CIA - con fidentiality, 
integrity, availability). 
 
URL  https://www.isa.org/   
Country of HQ location  
Geographic Scope  US  
International 
Type  Industry (not for profit)  
 
I membri ISA pagano una tassa regolare (annuale o b iennale), in base al loro tipo di appartenenza, al fine di 
ottenere i benefici ISA come l'accesso alle informa zioni tecniche e alle risorse per lo sviluppo profe ssionale. 
Risultati più rilevanti: 
Standards   ANSI/ISA 62443 (formerly  ISA -99 ) - Security for industrial automation and 
control systems  - è una serie di standard, report tecnici e relati ve informazioni 
che definiscono le procedure per l'implementazione di sistemi sicuri di 
automazione e controllo industriale (IACS). La pres ente guida si applica a tutte 
le parti interessate che attuano o gestiscono l'IAC S. Tutti gli standard ISA-
62443 e i report tecnici sono organizzati in quattr o categorie generali 
denominate General , Policies and Procedures , System and Component . 
 
INDUSTRIAL 
CYBERSECURITY 
STANDARDS ANSI/ISA -62443 -4-2-2018, Security for industrial automation and control 
systems – Part 4-2: Technical security requirements  for IACS components. 
ANSI/ISA-62443-4-1-2018, Security for industrial au tomation and control 
systems, Part 4-1: Product security development lif e-cycle requirements. 
Definisce un secure development life-cycle (SSDLC)  allo scopo di realizzare e 
mantenere prodotti software sicuri. Questo ciclo di  vita comprende la 
definizione dei requisiti di sicurezza, la progetta zione sicura, l'implementazione 
sicura (incluse le linee guida di codifica), la ver ifica e la convalida, la gestione 
dei difetti di sicurezza, la gestione delle patch e  la fine del ciclo di vita del 
prodotto. Tali requisiti possono essere applicati a  processi nuovi o esistenti per 
sviluppare, mantenere e dismettere hardware, softwa re o firmware per 
prodotti nuovi o esistenti. Tali requisiti si rivol gono allo sviluppatore e al 
manutentore del prodotto, ma non agli addetti all’i ntegrazione né all'utente 
finale del prodotto. 
ANSI/ISA-62443-2-4-2018 / IEC 62443-2-4:2015+AMD1:2 017 CSV, Security for 
industrial automation and control systems, Part 2-4 : Security program 
requirements for IACS service providers (IEC 62443- 2-4:2015+AMD1:2017 CSV, 
IDT). 
ANSI/ISA-62443-3-3 (99.03.03)-2013, Security for In dustrial Automation and 
Control Systems Part 3-3: System Security Requireme nts and Security levels. 
Questo standard definisce i requisiti di sicurezza che sono raggruppati in sette 
categorie: 1) Controllo degli accessi, 2) Controllo  dell'utilizzo, 3) Integrità dei 
dati, 4) Riservatezza dei dati, 5) Limitazione dei flussi di dati, 6) Risposta 
tempestiva a un evento e 7) Disponibilità delle ris orse di rete. Ogni categoria 
comprende una mappatura dei requisiti per garantire  un adeguato livello di 
sicurezza. 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 26  a 137  
 
ANSI/ISA -62443 -2-1 (99.02.01 )-2009, Security for Industrial Automation and 
Control Systems: Establishing an Industrial Automat ion and Control Systems 
Security Program.  
ANSI/ISA-62443-1-1 (99.01.01)-2007, Security for In dustrial Automation and 
Control Systems Part 1: Terminology, Concepts, and Models. 
INDUSTRIAL 
CYBERSECURITY 
CERTIFICATE PROGRAM Certificate 1: ISA/IEC 62443 Cybersecurity Fundamen tals Specialist . 
Certificate 2: ISA/IEC 62443 Cybersecurity Risk Ass essment Specialist. 
Certificate 3: ISA/IEC 62443 Cybersecurity Design S pecialist. 
Certificate 4: ISA/IEC 62443 Cybersecurity Maintena nce Specialist. 
ISA/IEC 62443 Cybersecurity Expert. 
CONFORMITY 
ASSESSMENT Cybersecurity Certification to ISA/IEC 62443 Standa rds – It certifies devices and 
systems to the ISA/IEC 62443 Industrial Automation and Control Systems 
(IACS) cybersecurity standards. 
TRAINING COURSES  Introduction to Industrial Automation Security and the ANSI/ISA99 Standards 
(IC32C). 
Using the ANSI/ISA99 Standard to Secure Your Contro l System (IC32). 
Industrial Networking and Security (TS12). 
Assessing the Cybersecurity of New or Existing IACS  Systems (IC33).  
IACS Cybersecurity Design & Implementation (IC34).   
IACS Cybersecurity Operations & Maintenance (IC37).  
 
5.1.6  Software Assurance Forum for Excellence in Code (SA FECODE) 
SAFECode è un'iniziativa privata creata da sviluppa tori software e fornitori. Individuando e promuoven do le 
migliori pratiche in SSE, questa iniziativa sostien e che l'industria del software potrebbe rilasciare software, 
hardware e servizi più sicuri e affidabili. Tra le sue uscite principali, ci sono i documenti che racc olgono le 
migliori pratiche, tenendo conto del ciclo di vita di sviluppo del software. 
 
URL  https://www.safecode.org  
Country of HQ loca tion  
Geographic Scope  US  
International 
Type  Industry (not for profit ) 
 
SAFECode afferma che i suoi obiettivi sono: 
1.  Identificare e condividere collaudate pratiche di g aranzia del software;  
2.  Promuovere una più ampia adozione di tali pratiche nell'ecosistema informatico;  
3.  Lavorare con istituzioni e fornitori di infrastrutt ure critiche per sfruttare le pratiche nella gestio ne 
dei rischi aziendali. 
 
Risultati più rilevanti: 
Training   Security Engineering Training  
Un quadro di riferimento per i programmi di formazi one aziendale sui principi 
dello sviluppo sicuro del software. 
Security engineering training by SAFECode è una ris orsa della comunità online 
che offre corsi gratuiti di formazione sulla sicure zza del software erogati 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 27  a 137  
 
tramite webcast on -demand.  
Good Practice  Software Integrity Controls  
Un approccio impiegato per ridurre al minimo i risc hi nella catena di fornitura 
del software. Sulla base delle pratiche dei membri SAFECode, il rapporto 
fornisce controlli di integrità per l'approvvigiona mento, lo sviluppo, i test, la 
consegna e la resilienza del software. 
The Software Supply Chain Integrity Framework  
Documento che definisce i rischi e le responsabilit à per rendere sicuro il 
software nella catena di fornitura globale. Sulla b ase dell'esperienza dei 
membri del SAFECode, descrive la catena di fornitur a del software (modello a 
scala dei fornitori di software) e i principi per l a progettazione dei controlli di 
integrità del software. 
Fundamental Practices for Secure Software Developme nt  
Sulla base delle pratiche dei membri SAFECode, ques to documento delinea un 
insieme di pratiche per lo sviluppo sicuro del soft ware che possono essere 
applicate nelle diverse fasi del ciclo di vita dell o sviluppo del software. 
Software Assurance: An Overview of Current Industry  Best Practices  
Documento che descrive i metodi di sviluppo e i con trolli di integrità utilizzati 
dai membri SAFECode per migliorare la sicurezza del  software e la sicurezza nel 
rilascio. 
Practices for Secure Development of Cloud Applicati ons 
SAFECode e la Cloud Security Alliance (CSA) rilasci ano una guida per lo sviluppo 
sicuro di applicazioni cloud. Questo documento rapp resenta il prodotto di tale 
collaborazione ed è destinato ad aiutare i lettori a comprendere meglio e 
implementare le migliori pratiche per lo sviluppo d i software cloud sicuro. 
Tactical Threat Modeling 
Questo documento sfrutta le intuizioni dei membri d el SAFECode per offrire 
modi efficaci per integrare meglio la modellazione delle minacce nei processi di 
sviluppo. 
Managing Security Risks Inherent in the Use of Thir d-party Components 
L'uso di componenti di terze parti (TPC), compresi i componenti software open 
source (OSS) o commerciali off-the-shelf (COTS), è diventato di fatto uno 
standard nello sviluppo del software. Questo docume nto analizza il processo e 
le procedure di cui gli sviluppatori necessitano pe r testare, migliorare e 
quantificare la sicurezza dei componenti di terze p arti. 
5.1.7  SANS Software Security Institute (SANS SSI) 
SANS SSI offre una libreria di iniziative di ricerc a e di community per aiutare sviluppatori, architet ti, 
programmatori e responsabili della sicurezza delle applicazioni a proteggere le loro applicazioni 
software/web. 
Questa iniziativa raccoglie e fornisce informazioni  tecniche aggiornate, come l’accesso gratuito alle risorse 
sui più recenti vettori di attacco e sulle vulnerab ilità di sicurezza delle applicazioni, tra cui un b log 
aggiornato, news-letters settimanali, webcast, arti coli e documenti in materia di sicurezza del softwa re. 
 
URL  https://www.sans.org  
Country of HQ location  
Geographic Scope  US  
International 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 28  a 137  
 
Type  Academic  
 
SANS pubblica relazioni annuali (Top 25 Software Er rors) con l’analisi sugli errori di programmazione più 
pericolosi: http://www.sans.org/top25-software-errors/ .  
L’ultima release ( 2019 CWE Top 25 Most Dangerous Software Errors ) è fruibile al seguente link: 
https://cwe.mitre.org/top25/archive/2019/2019_cwe_t op25.html . 
 
Risultati più rilevanti: 
Resources  Application Security Resources: Whitepapers e webcasts sulla sicurezza della 
applicazioni.  
Security Laboratory: Il "Security Laboratory" è un insieme informale di articoli 
e whitepaper sulla sicurezza, l'informatica e l'ind ustria della sicurezza 
informatica. 
Fundamental Practices for Secure Software Internet Storm Center (ISC)  
Il ISC fornisce un servizio gratuito di analisi e d i allarme agli utenti di Internet e 
alle organizzazioni. I volontari donano il loro tem po per analizzare difetti e 
anomalie e pubblicare un diario giornaliero delle l oro analisi e riflessioni sul 
sito web di Storm Center. 
Application Security Procurement Language: Questo è un progetto di 
contratto software per gli acquirenti di software p ersonalizzato. Il suo obiettivo 
è quello di rendere gli sviluppatori di codice resp onsabili del controllo del 
codice e della correzione dei difetti di sicurezza prima della consegna del 
software. 
Top 25 Software Errors . Sono elencate in tre categorie: 
• Interazione non sicura fra componenti 
• Risky Resource Management 
• Difesa insufficiente. 
Ciascun errore include: 
• La classificazione all’interno della Top 25 
• Collegamenti a tutti i riferimenti alla CWE 
• Frequenza delle CWE e relative conseguenze nei camp i dati 
• Costi di risanamento 
• Facilità di rilevamento 
• Esempi di codice 
• Metodi di rilevamento 
• Frequenza degli attacchi e consapevolezza degli agg ressori 
• Le relative CWE e i modelli di attacco per questa v ulnerabilità. 
Comprende anche misure di prevenzione e bonifica su fficientemente estese 
che gli sviluppatori possono adottare per mitigare o eliminare la vulnerabilità.  
 
5.1.8  Web Application Security Consortium (WASC) 
WASC produce best practice per le applicazioni web.  WASC riassume la sua missione nella seguente frase  
“to develop, adopt, and advocate standards for web ap plication security ”. 
 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 29  a 137  
 
URL  http://www.webappsec.org/  
Country of HQ location  
Geographic Scope  US  
International 
Type  Industry (not for profit)  
 
Risultati più rilevanti: 
Resources  Web Application Security Scanner Evaluation Criteri a  (WASSEC ) 
Una serie di linee guida per valutare gli strumenti  di scansione delle 
applicazioni web riguardo la loro efficacia nel tes tare e identificare le 
vulnerabilità. 
The Web Hacking Incidents Database (WHID)  
WHID è un progetto del Web Application Security Con sortium dedicato al 
mantenimento di un elenco di applicazioni web relat ive agli incidenti di 
sicurezza. 
WASC Script Mapping Project 
Elenco delle modalità di esecuzione degli script al l'interno di una pagina web 
senza usare i tag <script>. 
Distributed Web Honeypot (DWH) Project 
Identificare gli attacchi emergenti contro le appli cazioni web e segnalarli alla 
comunità. 
Web Security Glossary 
Indice dei termini e della terminologia relativa al la sicurezza delle applicazioni 
web. 
WASC Threat Classification v2.0 
È un effort per classificare le debolezze e gli att acchi che possono portare alla 
compromissione di un sito web, dei suoi dati o dei suoi utenti. 
Web Application Firewall Evaluation Criteria 
Sviluppo di criteri dettagliati per la valutazione di un firewall di un'applicazione 
web (WAF). 
WASC Web Application Security Statistics 
Raccolta di statistiche sulla vulnerabilità delle a pplicazioni per identificare e 
mappare i problemi di sicurezza delle applicazioni sui siti web aziendali. 
 
5.1.9  Institute For Software Quality (ifSQ) 
L'Istituto per la Qualità del Software, con sede ne i Paesi Bassi, è un gruppo di professionisti coinvo lti nello 
sviluppo e nella distribuzione di software. ifSQ pe rsegue un obiettivo comune: aumentare gli standard 
software (e dello sviluppo software) in tutto il mo ndo attraverso la promozione del Code Inspection, c ome 
prerequisito del Software Testing nel ciclo di prod uzione e rilascio del software. 
 
URL  http://ifsq. org  
Country of HQ location  
Geographic Scope  The Netherlands  
International 
Type  Industry (non profit)  
 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 30  a 137  
 
ifSQ ha analizzato, quantificato e migliorato lo st ato dell’arte della ricerca sulla qualità del softw are, e ha 
definito un set di indicatori (Defect Indicators) c he sono stati raccolti in un insieme coordinato di tre 
standard, pubblicati sul sito, in forma di opuscolo  e sotto forma di corsi e workshop. La maggior part e dei 
criteri di valutazione, in particolare "major strin g", "parametri non controllati" e " unexpected stat e not 
trapped", sono rilevanti per migliorare la sicurezz a del software. 
Risultati più rilevanti: 
Resources  Software Quality Standards - Levels 1  (An Entry -Level Standard for Computer 
Program Source Code), 2 (A Foundation-Level Standar d for Computer Program 
Source Code) and 3 (Industry Best Practice for Comp uter Program Source Code 
- is not yet complete ) are available. 
 
5.2  Iniziative europee 
Questo paragrafo ha l’obiettivo di fornire una vist a delle iniziative in ambito Europeo. Le iniziative  di seguito 
presentate sono state classificate sulla base dell’ ambito geografico e della tipologia di appartenenza  
(accademiche, governative, industria).  
Analizzando ambiti, obiettivi e risultati di ognuna , emerge che: 
• Un insieme di iniziative rappresentano per obiettiv i e risultati una categoria isolata. Tra queste 
iniziative, definiamole ‘non raggruppabili’, ci son o: NESSI, OWASP Local Chapters, MISRA e Serenity 
Forum. 
• Altre iniziative posso essere ‘raggruppate’ sulla b ase di alcuni elementi che li caratterizzano e li 
accomunano: Events and Periodicals, Certifications,  Academic Education. Queste iniziative 
potrebbero essere classificate con più tag sulla ba se dei loro risultati rilevanti o attesi in SSE: 
standardisation, industry platform, vulnerability d etection, vulnerability protection, information 
sharing, specialised workshop, certification and tr aining. 
 
5.2.1  Networked European Software and Services Initiative  (NESSI) 
NESSI è la piattaforma tecnologica europea dedicata  al Software e ai Servizi. L'obiettivo principale d i NESSI 
si indirizza sul potenziamento dei servizi Internet  attraverso attività di ricerca, standard e policy,  e 
contributi costruiti attraverso una community indus tria/università. 
I partecipanti NESSI sono divisi in tre gruppi: 
• partner NESSI: prevalentemente industriale, ma ci s ono anche alcuni profili accademici -  
coordinano la piattaforma e forniscono il sostegno finanziario per le attività NESSI; 
• I membri NESSI: industria, mondo accademico e gli u tenti - rappresentano i principali stakeholders 
del dominio della fornitura di servizi ICT.  Non è obbligatorio un contributo finanziario 
• abbonati NESSI: usano diversi canali di informazion e per tenersi aggiornati sulle attività di NESSI. 
 
URL  http://www.nessi -europe.com  
Country of HQ location  
Geographic Scope  Belgium  
Europe 
Type  Industry  
 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 31  a 137  
 
Piattaforme tecnologiche nazionali e regionali sono  parte della rete NESSI: gestiscono obiettivi NESSI  da un 
punto di vista locale. 
I focus NESSI hanno alcune correlazioni SSE: 
• Identificare le direzioni della ricerca futura sui servizi; 
• costruire contributi formali sui settori chiave; 
• investire sulla rete NESSI per migliorare il coordi namento tra i programmi di ricerca europei, 
nazionali e regionali. 
 
Risultati più rilevanti: 
Research Agenda  NESSI Strategic Research and Innovation Agenda  (NESSI SRIA 2017 )  
 
Next Generation Software Technologies Empowering the  Digital 
Transformation of Europe.  Recommendations on Software Technology 
Research for Horizon Europe. 
 
 
Working Group related 
to SSE Security and Privacy: From the Perspective of Softwar e, Services, Cloud and 
Data . NESSI è la Horizon 2020 European Technology Platf orm (ETP) per il 
software, i servizi e i dati. Il presente white pap er si concentra sul ruolo 
crescente della sicurezza e della privacy e mette i n evidenza le direzioni di 
ricerca di una prospettiva NESSI.  
 
Software and the Next Generation Internet (2019-05- 09). Per sfruttare il 
potenziale delle NGI sono necessarie ricerca e inno vazione per affrontare le 
sfide poste dalle crescenti minacce derivanti da at tacchi informatici, compresa 
la gestione dei rischi e il contenimento delle intr usioni, nonché le minacce 
derivanti dalle nuove tecnologie. 
 
5.2.2  Piattaforme Nazionali NESSI  
L'obiettivo generale delle Piattaforme NESSI è di p romuovere lo sviluppo e l'applicazione di tecnologi e e 
servizi ICT per affrontare le sfide future all'inte rno dell'industria europea e del governo. 
Nella tabella che segue vengono sintetizzate le att ività di ciascuna piattaforma nazionale il cui scop o è di 
gestire gli obiettivi NESSI da un punto di vista lo cale e di pubblicare le proprie SRA nazionali. 
URL  http://www.nessi -europe.com   
NESSI - Norway  E’ la filiale norvegese del NESSI. Il suo obiettivo  principale è quello di creare 
un'arena norvegese per gli stakeholders del settore  industria, ricerca/mondo 
accademico e pubblico e di influenzare la strategia  di ricerca ICT del governo 
norvegese. 
 
URL  http://www.nessi -europe .com  
NESSI - Slovenia  Alla base di queste attività è che NESSI assumerà l a responsabilità del 
contenuto e dell'attuazione del 7° programma quadro  dell'UE per R&D. Essi 
invitano chiunque sia coinvolto in attività di R&D a partecipare a questo lavoro.  
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 32  a 137  
 
 
 
URL  http://www -it.fmi .uni -sofia.bg/nessibg/  
NESSI -Bulgaria  NESSI -Bulgaria è stata fondata nel 2005. Si tratta di un forum per lo scambio di 
conoscenze, lo sviluppo di strategie e la ricerca d i nuove potenzialità a livello 
internazionale IT e servizi industriali. La visione  centrale della piattaforma è di 
consentire nuovi modelli di business orientate ai s ervizi. I loro obiettivi sono: 
• Definire una Roadmap bulgara e l’SRA per l’evoluz ione del programma di 
innovazione R&D bulgaro. 
• Supporto alle attività R&D nei settori del softwa re e dei servizi. 
•Fornire formazione: nuovi corsi, programmi MSc, pr ogrammi PhD e 
formazione 
 
URL  http://nessi.ik.bme.hu/  
NESSI - Hungary  NESSI -Ungheria è stata fondata nel 2007 con lo scopo di e volvere la direzione 
della ricerca e dello sviluppo strategico nel setto re del software e dei servizi, 
sulla base di un approccio unificato. 
Gruppi di lavoro di questa piattaforma sono divisi in due sottogruppi: domain-
oriented e technological-oriented. La piattaforma è  aperta a qualsiasi altra 
organizzazione ungherese. 
 
URL  http://www.bicc -net.de / 
Germany Bicc -Net  BICC -NET, Piattaforma di NESSI tedesca, è il Polo ICT ba varese della Germania. 
Fondata nel 2007, intende stimolare selettivamente l'innovazione. BICC-NET 
comprende quanto segue: 
• sviluppo e distribuzione del software 
• lo sviluppo e la distribuzione di hardware 
• telecomunicazioni 
• sistemi software e hardware embedded nei prodotti  
• processi basati su software in fase di sviluppo, la produzione, i servizi e della 
pubblica amministrazione 
• Servizi nelle aree di cui sopra. 
BICC-NET viene utilizzato per garantire la crescita  ICT in Baviera. Essa è guidata 
dalla BICC sede ufficiale "cluster", che è stato di rettamente commissionato dal 
Ministero bavarese per gli Affari economici, infras trutture, trasporti e 
tecnologia. 
BICC-NET supporterà i profili di innovazione delle aziende ICT bavaresi e gli 
sviluppi in corso. 
 
URL  https://www.fi -stockholm.eu/  
NESSI - Sweden  NESSI svedese è stata fondata nel 2010. L'obiettivo  generale di NESSI Svezia è 
di promuovere lo sviluppo e l'applicazione di tecno logie e servizi ICT per 
affrontare le sfide future all'interno dell'industr ia svedese e del governo 
 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 33  a 137  
 
URL  http:// www.nessi -europe.com/  
NESSI - Romania  NESSI Romania è stata fondata nel 2010.  Gli obiettivi a  breve termine di NESSI -
Romania sono: 
• istituire gruppi di lavoro nazionali su diversi a rgomenti definiti in NESSI SRA 
• Definire un SRA nazionale per l'evoluzione futura  del programma nazionale 
R&D e innovazione relativamente a software e serviz i 
• Diffondere i risultati NESSI dei progetti strateg ici e compatibili 
 
5.2.3  OWASP Local Chapters 
Questa sezione fornisce una vista dei gruppi di lav oro OWASP distribuiti sul territorio Europeo. 
URL  https://www.owasp.org/index.php/Belgium  
OWASP Belgium Local 
Chapter Le principali attività svolte riguardano l'organizz azione di incontri su come 
difendere le applicazioni web da attacchi. 
 
URL  https://www.owasp.org/index.php/Aarhus  
OWASP Denmark Local 
Chapter Le principali attività svolte riguardano l'organizz azione di incontri su diversi 
argomenti di sicurezza delle informazioni legate al le applicazioni web. Le 
presentazioni sono disponibili sul sito web 
 
URL  https://www.owasp.org/index.php/France  
OWASP France Local 
Chapter Le principali attività svolte riguardano l'organizz azione di incontri e la 
traduzione della documentazione OWASP in francese. Questo Chapter fornisce 
anche la formazione su progetti e risorse OWASP att raverso il programma 
"OWASP projects and resources you can use today", c he ha lo scopo di 
promuovere progetti OWASP, fornendo una selezione d i progetti maturi ed 
enterprise-ready, insieme con esempi pratici di com e usarli. 
 
URL  https://www.owasp.org/index.php/Germany  
OWASP Germany Local 
Chapter Le principali attività riguardano l'organizzazione di incontri, conosciuti come 
AppSec Germany Conference, che si svolge ogni anno.  
 
URL  https://www.owasp.org/index.php/Geneva  
OWASP Geneva Local 
Chapter Le principali attività svolte da questo capitolo ri guardano  l'organizzazione di 
incontri legati alle identità digitali e autenticaz ione nelle applicazioni web. 
 
URL  https://www.owasp.org/index.php/Greece  
OWASP Greece Local 
Chapter Il gruppo di lavoro OWASP greco è stata fondato nel  2005 con l'obiettivo di 
informare la comunità greca sui rischi per la sicur ezza nelle applicazioni web. Il 
motivo principale che ha spinto alla sua creazione è il sempre crescente 
numero di incidenti di sicurezza su Internet, come ad esempio i tentativi di 
phishing a banche greche. Oggi, il gruppo greco pro muove localmente 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 34  a 137  
 
l’iniziativa OWASP attraverso il Software Libero/Op en e la traduzione in greco 
della documentazione OWASP. Emettono una newsletter  mensile, 
mantengono una mailing list per gli aggiornamenti e  gestiscono dibattiti online 
su problemi di sicurezza di attualità. 
La comunità greca OWASP vuole riunire tutti coloro che sono interessati e 
preoccupati per la sicurezza delle applicazioni web . Allo stesso tempo, accoglie 
i volontari che sono disposti a lavorare su progett i coordinati dall’OWASP, 
utilizzando software libero/open source. Invitano a  chiunque di condividere le 
proprie idee, pensieri e riflessioni sugli attacchi , la difesa, i metodi di risposta, 
strumenti e buone pratiche in materia di sicurezza di Internet. 
 
URL  https://www.owasp.org/index.php/Category:Ireland  
OWASP Ireland Local 
Chapter Questo paese ha quattro gruppi locali: Belfast, Cork, Dublino e Limerick. Il 
gruppo più attivo è quello di Dublino le cui attivi tà principali riguardano 
l'organizzazione di eventi e conferenze. Questo gru ppo fornisce anche la 
formazione su progetti e risorse OWASP attraverso i l programma " OWASP 
projects and resources you can use today". Questo h a lo scopo di promuovere i 
progetti OWASP, fornendo una selezione di progetti maturi ed enterprise-
ready con esempi pratici di come usarli. 
 
URL  https://www.owasp.org/index.php/Italy  
OWASP Italy Local 
Chapter Le attività riguardano l’organizzazione di eventi e  lo sviluppo di tool. Il gruppo 
cerca di organizzare almeno 2 conferenze l’anno, un o in primavera e un altro in 
autunno. Recentemente, hanno lavorato sullo svilupp o di sqlmap, un 
automatic SQL injection tool  sviluppato in Python. L'iniziativa è sostenuta da 
partner come IsecLab, CLUSIT e ISACA Roma. 
 
URL  https://www.owasp.org/index.php/Latvia%20  
OWASP Latvia Local 
Chapter E’ stata creata nell’ottobre 2007. Le attività prin cipali riguardano 
l’organizzazione di eventi. Il gruppo non si è dimo strato molto attivo negli 
ultimi anni. 
 
URL  https://www.owasp.org/index.php/London  
OWASP London Local 
Chapter Le attività di OWASP Londra si concentrano sulla pr eparazione e 
l'organizzazione di eventi, conferenze e presentazi oni. Il gruppo ha registrato 
elevata attività nel corso del 2010. 
Esso prevede anche la formazione su progetti e riso rse OWASP attraverso il 
programma "OWASP projects and resources you can use  today", che mira a 
promuovere progetti OWASP, fornendo una selezione d i progetti maturi ed 
enterprise-ready con esempi pratici di come usarli.  
 
URL  https://www.owasp.org/index.php/Luxembourg  
OWASP Luxembourg 
Local Chapter Le attività del gruppo riguardano la preparazione e  l'organizzazione di eventi e 
conferenze come il Java User Group (YAJUG) o Chaos Computer Club 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 35  a 137  
 
Letzebuerg (C3L). Attualmente sembra che vi sia poc a attività in questo 
gruppo. 
 
URL  https://www.owasp.org/index.php/Norway  
OWASP Norway Local 
Chapter Le attività di OWASP Norvegia riguardano la prepara zione e l'organizzazione di 
eventi e conferenze. Questo gruppo è stato molto at tivo negli anni passati, 
quando ha organizzato 8 conferenze in Norvegia in u n anno. 
 
URL  https://www.owasp.org/index.php/Poland  
OWASP Poland Local 
Chapter L'attività principale che questo gruppo è di  organizzare eventi. In questo 
gruppo sembra essere molto attivo, sono stati coinv olti in 11 conferenze nel 
corso del 2010. L'iniziativa è sostenuta da ISSA. 
 
URL  https://www.owasp.org/index.php/Porto  
OWASP Portugal Local 
Chapter Le attività di questo gruppo riguardano l'organizza zione di conferenze e 
pubblicazioni. Ha organizzato uno dei più important i eventi di OWASP: Ibero-
American Web Application Security Conference IBWAS’2 010 .  
 
URL  https://www.owasp.org/index.php/Scotland  
OWASP Scotland Local 
Chapter Le principali attività svolte da questo gruppo, sec ondo quanto riportato sul loro 
sito, sono finalizzate a fornire risposte insieme a d altri gruppi britannici locali ai 
diversi uffici governativi del Regno Unito. Questo gruppo sembra che organizzi 
anche incontri annuali. 
 
URL  https://www.owasp.org/index.php/Spain  
OWASP Spain Local 
Chapter Questo gruppo svolge due attività principali. Da un  lato collabora attivamente 
con OWASP su un progetto per fornire le specifiche e i requisiti legali per le 
applicazioni Web. D'altra parte, come la maggior pa rte degli altri gruppi locali 
di questa sezione, organizza eventi e conferenze an nuali. Ha partecipato anche 
all'evento IBWAS'2010 [ https://www.owasp.org/index.php/IBWAS10 ] in 
collaborazione con il gruppo portoghese. 
 
URL  https://www.owasp.org/index.php/Sweden  
OWASP Sweden Local 
Chapter Questo gruppo si concentra sull'organizzazione di m eeting ed eventi. Ha 
organizzato conferenze anche in collaborazione con altri gruppi del nord, come 
il norvegese e il finlandese. 
 
URL  https://www.owasp.org/index.php/Switzerland  
OWASP Switzerland 
Local Chapter Questo gruppo organizza incontri su base periodica,  soprattutto nella parte 
tedesca della Svizzera. I loro incontri e gli event i sono principalmente su temi 
come test di sicurezza, lo sviluppo sicuro, hacking  e architetture sicure. Sul loro 
sito Web sono fruibili diapositive di eventi e conf erenze. 
 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 36  a 137  
 
URL  https://www.owasp.org/index.php/Ukraine  
OWASP Ukraine Local 
Chapter E’ un gruppo di recente formazione ancora in fase d i organizzazione . 
 
5.2.4  Motor Industry Software Reliability Association (MI SRA) 
MISRA è un Motor Companies Consortium  all’interno del Regno Unito. I suoi risultati (ric erca, risultati della 
ricerca e standard de facto, linee guida) sono fina lizzati principalmente allo sviluppo di software si curo e 
affidabile per sistemi embedded nel settore automob ilistico. 
MISRA instaura quindi una collaborazione tra costru ttori di veicoli, fornitori di componenti e di cons ulenza 
ingegneristica. Esso mira a promuovere le migliori pratiche nello sviluppo di sistemi elettronici lega ti alla 
sicurezza dei veicoli stradali e di altri sistemi e mbedded. 
La sua documentazione non è accessibile al pubblico , ma può essere acquistata sul sito web del consorz io. 
 
URL  https://www.misra.org.uk  
Country of HQ location  
Geographic Scope  UK  
National 
Type  Industry  
 
I lavori in corso MISRA includono: 
Model based development and autocode – Incoraggia a lle buone pratiche. 
• MISRA Autocode (Produzione di best practice di mode llazione) 
• MISRA C++ (Produzione di una serie di linee guida p er l'uso di C ++ in sistemi critici) 
• MISRA C3 (3rd review of MISRA C) 
• Mira a promuovere le migliori pratiche nello svilup po di sistemi elettronici legati alla sicurezza nei  
veicoli stradali e di altri sistemi embedded (è sta to adottato e utilizzato in una vasta gamma di 
settori e applicazioni, tra cui il settore ferrovia rio, aerospaziale, militare e medico) 
MISRA Safety Analysis – Linee Guida che descrivono come il ciclo di vita della sicurezza dei sistemi 
automotive si inserisce nel ciclo di vita dello svi luppo dei veicoli. 
 
Risultati più rilevanti: 
Good Practice  MISRA Compliance 2016: Achieving compliance with MI SRA coding guidelines, ISBN 
978-906400-13-2 (PDF), April 2016.  
Guidelines for the Use of the C Language in Vehicle  Based Software, ISBN 978-0-
9524156-6-5, April 1998, October 2002 
Guidelines for the Use of the C Language in Critica l Systems, ISBN 0 9524156 2 3 
(paperback), ISBN 0 9524156 4 X (PDF), October 2004  
Guidelines for safety analysis of vehicle based pro grammable systems, ISBN 978-0-
9524156-5-7 (paperback), ISBN 978-0-9524156-7-1 (PD F), November 2007. 
Guidelines for the Use of the C++ Language in Criti cal Systems, ISBN 978-906400-03-3 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 37  a 137  
 
(paperback), ISBN 978 -906400 -04 -0 (PDF), June 2008.  
Standard  MISRA AC GMG: Generic modeling design and style guidelines, ISBN 978 -906400 -06 -4 
(PDF), May 2009. 
MISRA Compliance: MISRA C, MISRA C++ coding guideli nes 
5.2.5  European Space Agency (ESA) 
Dall'inizio degli anni ‘90 l'ESA si è occupata di d efinire la qualità dei prodotti software. La famigl ia PSS 11  di 
standard (poi sostituito da standard ECSS) include un software engineering standard e una serie di gui de. 
 
URL  https://www.esa.int/  
Country of HQ location  
Geographic Scope  Paris  
European 
Type  Collaboration of Several European Countries  
 
Uno degli standard di software ampiamente utilizzat o, chiamato "Guide to applying the ESA Software 
Engineering Standards to small software projects" è  disponibile all'indirizzo: http://emits.sso.esa.int/emits-
doc/e_support/Bssc962.pdf  
Questo standard definisce una serie di criteri di q ualità per i requisiti software e di design, che ha nno una 
influenza diretta e indiretta sulla sicurezza del s oftware. Nell’ambito dei quality criteria requirements  sono 
rilevanti i seguenti aspetti: 
• Sono menzionate le caratteristiche degli utenti e d elle funzionalità del software maggiormente 
utilizzate? (Non risultano mancanti categorie di ut enti) 
• Sono esplicitamente menzionate tutte le interfacce e sterne del software? (Non risultano mancanti 
interfacce) 
• E' stata definita una priorità per ciascun requisito ? (Il significato dei livelli di priorità è chiaro?)  
• Ciascun requisito è verificabile (in un test di acce ttazione provvisoria)? (Misurabile: dove possibile,  
quantificare; capacità, prestazione e accuratezza).  
• I requisiti sono consistenti? (Non sono in conflitto )  
• I requisiti sono sufficientemente accurati e inequiv ocabili? (Quali interfacce sono coinvolte, chi ha 
l'iniziativa, chi fornisce quali dati, nessuna voce passiva).  
• I requisiti sono completi? Tutto ciò che non è espl icitamente vincolato può essere considerato dal 
punto di vista dello sviluppo libero? Un prodotto c he soddisfa tutti i requisiti è davvero accettabile?  
(Nessun requisito mancante)  
• I requisiti sono comprensibili per coloro che li do vranno successivamente utilizzare?  
• I requisiti sono realizzabili all'interno del budge t?  
• La maggior parte dei criteri di qualità di progetta zione sono rilevanti per la sicurezza del software.  
 
 
 
                                                           
11  http://www.esa.int/TEC/Software_engineering_and_st andardisation/TECBUCUXBQE_2.html 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 38  a 137  
 
Risultati principali: 
Good 
Practice  The PSS  
[https://www.esa.int/TEC/Software_engineering_and_st andardisation/TECBUCUXBQE_2.h 
tml ] famiglia di standard per la qualità del software.  
Una guida per l'applicazione degli standard ESA di ingegneria del software ai piccoli 
progetti è disponibile all'indirizzo: ftp://ftp.estec.esa.nl/pub/wm/wme/bssc/Bssc962.pdf  
L'Università di Tecnologia di Eindhoven fornisce ul teriori requisiti semplificati e checklists 
di progettazione. [ https://www.win.tue.nl/is/doku.php ] 
 
5.3  Iniziative US 
In questa sezione viene fornita una panoramica dell e iniziative SSE negli Stati Uniti. Tali iniziative  sono state 
classificate in funzione della tipologia: accademic he o governative. 
5.3.1  CERT Secure Coding 
Il CERT Secure Coding è un'iniziativa di sicurezza del programma Computer Emergency Response Team 
(CERT). Questo programma fa parte del Software Engi neering Institute (SEI) alla Canergie Mellon 
University 12  (Pennsylvania, USA). Alcuni dei suoi programmi son o finanziati dal governo degli Stati Uniti. 
Nel novembre 1988, la Defense Advanced Research Pro jects Agency (DARPA) incaricò il SEI di creare un 
centro per coordinare la comunicazione tra gli espe rti di sicurezza durante le emergenze e per aiutare  a 
prevenire futuri incidenti, a fronte di ciò, il CER T ha sviluppato il Software Initiative Assurance, c he 
comprende: Secure Coding Standards, Source Code Ana lysis Lab (SCALe), Vulnerability analysis, Function  
extraction for malicious code. 
Il SEI è un centro di ricerca e sviluppo finanziato  dal governo federale, che conduce ricerche di inge gneria 
del software in acquisizione, architetture e linee di prodotto, miglioramento dei processi e misurazio ne 
delle performance, sicurezza e l'interoperabilità d el sistema e l'affidabilità. 
Il SEI lavora a stretto contatto con le organizzazi oni di difesa e di governo, soprattutto l'Ufficio S ecretary of 
Defense/Acquisition, Technology, and Logistics (OSD /AT&L) 13 , l'industria e il mondo accademico, con 
l’obiettivo di migliorare continuamente i sistemi s oftware-intensive. 
 
URL  https://www.sei.cmu.edu  
Country of HQ location  
Geographic Scope  US  
National 
Type  Academic  
 
Le aree di lavoro CERT Secure Coding sono: 
• Secure coding standards  
                                                           
12  https://www.cmu.edu/  
13  http://www.acq.osd.mil/ 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 39  a 137  
 
[https://wiki.sei.cmu.edu/confluence/display/seccode /SEI+CERT+Coding+Standards ] - Propone 
standard per migliorare la sicurezza nell’uso dei l inguaggi di programmazione (Android, C, C++, 
Java, Perl). 
• International Standards Development /- Standard di sviluppo Internazionale. 
• Source Code Analysis Laboratory (SCALe)  [cert.org/secure-coding/products-services/scale.cfm ] 
SCALe consente di valutare il codice sorgente rispe tto a una serie di standard di codifica sicura. 
SCALe rilascia e certifica i test di conformità qua ndo le risultanze dei test sono state indirizzate d agli 
sviluppatori. 
• Secure Coding Tools  - Tali strumenti sono utilizzati nell'auditing SCA Le, ma possono anche essere di 
supporto agli sviluppatori di software per ridurre il numero di vulnerabilità presenti nel loro codice .  
 
CERT Secure Coding vuole influenzare i fornitori pe r migliorare la sicurezza base all'interno dei loro  
prodotti. Al fine di raggiungere questo obiettivo, CERT Secure Coding lavora con sviluppatori di softw are e 
organizzazioni di sviluppo software per ridurre le vulnerabilità derivanti da errori di codifica (C, C  ++ o 
linguaggi di programmazione Java) prima di essere d istribuiti. Inoltre, gli analisti CERT valutano le cause 
della vulnerabilità e identificano le pratiche di s ecure coding. 
CERT collabora con ISO per la creazione di diversi standard su secure coding. 
 
Risultati più rilevanti: 
Training  Secure Coding in C and C++   
[http://www.sei.cmu.edu/training/p63.cfm ] 
Course of secure coding in C and C++ based on Addis on-Wesley’s material: “Secure Coding in 
C and C++” and “The CERT C Secure Coding Standard” 
Standards 
for 
Software 
Developers SEI CERT C Coding Standard   
[https://wiki.sei.cmu.edu/confluence/display/c/SEI+C ERT+C+Coding+Standard ] 
SEI CERT C++ Coding Standard 
[https://wiki.sei.cmu.edu/confluence/pages/viewpage. action?pageId=88046682 ] 
SEI CERT Oracle Coding Standard for Java 
[https://wiki.sei.cmu.edu/confluence/display/java/SE I+CERT+Oracle+Coding+Standard+for+J 
ava ] 
SEI CERT Perl Coding Standard 
[https://wiki.sei.cmu.edu/confluence/display/perl/SE I+CERT+Perl+Coding+Standard ] 
Android TM   Secure Coding Standard 
[https://wiki.sei.cmu.edu/confluence/display/android /Android+Secure+Coding+Standard ] 
 
5.3.2  Software Assurance Metrics and Tool Evaluation (SAM ATE) 
SAMATE è un’iniziativa US Government software assur ance, un progetto inter-agenzie tra gli Stati Uniti  e il 
DHS National Institute of Standards and Technology (NIST).  
Obiettivo di SAMATE è migliorare la garanzia softwa re:  
• sviluppando metriche e metodologie per valutare i t ool di sicurezza del software;  
• identificando le vulnerabilità relative alla pratic he di codifica e dei metodi di ingegneria del 
software. 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 40  a 137  
 
Il progetto di riferimento di SAMATE sviluppa casi di test al fine di esaminare il codice sorgente di strumenti 
e applicazioni. Rileva e segnala le debolezze in mo do da fornire, agli utenti finali e sviluppatori, t ool di 
garanzia del software con una serie di flaws noti a ttraverso i quali valutare i propri tool. 
L'uscita principale di questa iniziativa è il SAMAT E Reference Dataset (SRD), un database online alime ntato 
regolarmente da SAMATE. Questa banca dati online, a  disposizione del pubblico, fornisce casi di test p er gli 
sviluppatori e utenti finali, attraverso i quali è possibile effettuare valutazioni di tool di sicurez za. 
URL  https://samate.nist.gov/  
Country of HQ location  
Geographic Scope  US  
National 
Type  Governement  
 
SAMATE è finalizzato al miglioramento del software assurance attraverso lo sviluppo di metodologie che  
consentano la valutazione software dei tool, misura re l'efficacia dei tool e delle tecniche, individua re le 
lacune negli strumenti e nei metodi. Il progetto so stiene Tools Software Assurance della US DHS e R&D 
Requirements Identification Program (in particolare , la Parte 3, tecnologia -strumenti e requisiti-), che 
affronta l'individuazione, la valorizzazione e lo s viluppo di software assurance tools. 
Il progetto SAMATE compone di due parti: 
• sviluppo di metriche per l’efficacia dei software s ecurity assessment (SSA) tools  
• valutazione di metodi e strumenti SSA attuali al fi ne di individuare le carenze che possono portare a 
guasti dei prodotti software e vulnerabilità 
 
Infine, SAMATE sta sviluppando anche alcune specifi che rivolte agli sviluppatori di strumenti di garan zia del 
software, che gli consentano di classificare e valu tare questa tipologia di tool. 
 
Risultati più significativi: 
Specifications  Source Code Security Analysis  
[https://samate.nist.gov/index.php/Source_Code_Secur ity_Analysis.html ] 
“Source Code Security Analysis Tool Functional Spec ification Version 1.1” 
Specifiche e piani di test per gli strumenti di ana lisi della sicurezza del codice 
sorgente. Questo tipo di strumento esamina il codic e sorgente al fine di 
rilevare e segnalare le difettosità che possono por tare a vulnerabilità di 
sicurezza. 
 Web Application Scanner  
[https://samate.nist.gov/index.php/Web_Application_S canner.html ] 
“Web Application Scanner Functional Specification V ersion 1.0”. Queste 
specifiche sono raccolte nella pubblicazione NIST S pecial Publication 500-269 
[https://samate.nist.gov/docs/webapp_scanner_spec_sp 500-269.pdf ]. 
Test Cases  SAMATE reference datasheet  
[https://samate.nist.gov/SRD/ ] 
Fornisce a utenti, ricercatori e sviluppatori di st rumenti di garanzia della 
sicurezza del software una serie di difetti di sicu rezza noti. Questi 
consentiranno agli utenti finali di valutare tali s trumenti e agli sviluppatori degli 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 41  a 137  
 
strumenti di testare le loro metodologie applicate.  
 SRD database  
[https://samate.nist.gov/SRD/view.php ] 
Una raccolta di casi di test per individuare le deb olezze del codice. 
 
5.3.3  Common Weakness Enumeration (CWE) 
CWE è un'iniziativa sostenuta e co-sponsorizzata da lla NCSD della US DHS e dal NIST. Attualmente è 
mantenuta e guidata da MITRE Corporation. 
Il CWE è una lista formale o tassonomia, che classi fica le tipologie più comuni di vulnerabilità del s oftware. 
Gli obiettivi principali di CWE sono: 
• Gestire la common taxonomy  per la classificazione delle vulnerabilità comuni del software 
relativamente ad architettura, progettazione e codi ce; 
• Fornire una classificazione standard per tool di pr otezione del software  
• Fornire una linea di base da cui partire per aiutar e la community SSE a identificare, attenuare e 
prevenire questo tipo di debolezza software. 
 
URL  https://cwe.mitre.org  
https://nvd.nist.gov/cwe.cfm  
Country of HQ location  
Geographic Scope  US  
National 
Type  Government  
 
Questo progetto utilizza i risultati del progetto S AMATE per creare l'elenco CWE delle vulnerabilità e  la sua 
tassonomia associata e l’albero di classificazione (vedi figura sotto tratta dal NIST). 
 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 42  a 137  
 
 
Figura 6 - Una porzione dell’albero di classificazi one CWE  
[Fonte: https://nvd.nist.gov/vuln/categories/cwe-layout ] 
La Figura 6 mostra la classificazione gerarchica de lle CWE, come proposto nella pagina del National 
Vulnerability Database 14  (NVD) della NIST. Il grafico presenta le varie CWE  raggruppate in categorie. Ogni 
CWE può essere in relazione con una CWE di livello superiore (più generica). 
Va inoltre sottolineato che CWE è una community-dev eloped, l'elenco formale delle vulnerabilità comuni  
del software coinvolgono il mondo accademico, il se ttore commerciale e il governo degli Stati Uniti. 
Risultati più rilevanti: 
- CWE List (Version 3.4): https://cwe.mitre.org/data/index.html  
Le definizioni e le descrizioni di CWE supportano l a scoperta delle tipologie di flaw di sicurezza 
software nel codice, prima di rilasciarlo. Ciò sign ifica che sia gli utilizzatori che gli sviluppatori  dei 
tool e dei servizi di sicurezza software possono ut ilizzare CWE come un meccanismo per descrivere i 
flaw di sicurezza del software. 
L'elenco CWE è disponibile in tre diversi formati: 
• Research Concepts [ https://cwe.mitre.org/data/definitions/1000.html ]; 
• Development Concepts [ https://cwe.mitre.org/data/definitions/699.html ]; 
• Architectural Concepts [ https://cwe.mitre.org/data/definitions/1008.html ].  
 
- CWE Top 25 Most Dangerous Software Errors. Di seguito è riportato un l’elenco pubblicato nel 
2019: 
                                                           
14  https://nvd.nist.gov/vuln/categories  

  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 43  a 137  
 
 
 
Figura 7- CWE Top 25 [Fonte: https://cwe.mitre.org/top25/archive/2019/2019_cwe_top25.html ] 
 
5.3.4  Common Attack Pattern Enumeration and Classificatio n (CAPEC) 
CAPEC è un'iniziativa co-sponsorizzata dal NCSD del l’US DHS e guidata dalla Cigital 15 . Costruttori di software 
sicuro devono proteggersi da importanti vulnerabili tà potenziali. Per identificare e mitigare le vulne rabilità 
relative al software, la community di sviluppo ha b isogno di capire la prospettiva dell'attaccante e g li 
approcci utilizzati per sfruttare il software. 
Gli schemi di attacco sono le descrizioni di metodi  comuni per lo sfruttamento del software, fornendo sia la 
prospettiva che la guida dell'attaccante sui modi p er mitigare il loro effetto. Essi derivano dal conc etto di 
pattern design applicato in un distruttivo, piuttos to che costruttivo, contesto e sono generati da un’ analisi 
approfondita di specifici esempi di casi del mondo reale. 
Questa iniziativa mira a fornire un catalogo a disp osizione del pubblico di schemi di attacco, insieme  ad uno 
schema di classificazione e tassonomia completo. La  filosofia è di evolvere il catalogo con la parteci pazione 
e i contributi pubblici e così consolidare un mecca nismo standard per l'identificazione, la raccolta, la 
raffinazione, e la condivisione di modelli di attac co nella community software. 
URL  https://capec.mitre.org  
Country of HQ location  
Geographic Scope  US  
National 
Type  Government  
 
                                                           
15  https://www.synopsys.com/software-integrity.html 

  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 44  a 137  
 
Secondo questa iniziativa, le informazioni sugli sc hemi di attacco, se catturati in modo formale, poss ono 
portare un notevole valore per considerazioni di si curezza del software attraverso tutte le fasi del S DLC e le 
altre attività relative alla sicurezza, tra cui: 
• Raccolta dei requisiti: Identificazione dei requisi ti di sicurezza pertinenti, dei misuse e abuse case s. 
• Architettura e design: Fornisce il contesto per l'a nalisi dei rischi architetturali e le linee guida p er la 
sicurezza nelle architetture del software. 
• Implementazione e codifica: Prioritizzazione e guid a delle attività di revisione sicura del codice. 
• Test del software e controllo qualità: Fornisce il contesto per una appropriata analisi del rischio e 
test di penetrazione. 
• Operatività dei sistemi: Sfruttare le esperienze ap prese dagli incidenti di sicurezza per fornire una 
guida preventiva. 
• Politiche e generazione di standard: Guida all'iden tificazione di adeguate politiche e standard 
organizzativi prescrittivi.  
 
Risultati più rilevanti:  
• List of Attack Patterns  [http://capec.mitre.org/ ]. L’elenco è disponibile in due diversi formati: 
o View by Mechanisms of Attack [ http://capec.mitre.org/data/definitions/1000.html ]. 
o View by Domains of Attack [ http://capec.mitre.org/data/definitions/3000.html ]. 
 
 
 
 
 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 45  a 137  
 
6 LA SICUREZZA IN TUTTE LE FASI DEL CICLO DI SVILUPPO  DEL 
SOFTWARE 
6.1  Secure SDLC 
Generalmente gli aspetti di sicurezza sono sottoval utati fin dalle prime fasi del ciclo di vita dello sviluppo 
software e di conseguenza sono molte le vulnerabili tà che vengono introdotte e trasmesse negli stadi 
successivi. È stato stimato, ad esempio, che un err ore introdotto nella fase di specifica dei requisit i, può 
costare fino a 200 volte, se lo si corregge nelle s uccessive fasi di sviluppo, rispetto a quanto sareb be costata 
la sua immediata rimozione. L’attuazione corretta e  completa delle attività di sicurezza  nelle prime fasi 
consente di incrementare sensibilmente il livello d i sicurezza di ogni singola fase successiva con un 
beneficio di ritorno importante: 
 
Figura 8 - Secure development activities 
 
Un Secure Software Development Life Cycle (SSDLC)  considera e implementa opportune attività di 
sicurezza nel corso di tutte le fasi del processo S DLC, come illustrato nella figura che segue: 
 
 
Figura 9 - Modello fasi SSDLC 
 
Requisiti : in questa fase vengono effettuate, tramite rappre sentazione UML, le analisi dei requisiti di 
sicurezza, dei rischi, delle probabilità di impatto  delle minacce, dei casi di abuso. E’ importante so ttolineare 
che in questa fase si devono adottare le best pract ices di carattere generale nella definizione dei re quisiti di 
sicurezza. 
Requisiti  
 Progettazione 
 Implementazione  
 Verifica  
 Validazione  
 Supporto  
Risk 
Assessment  
Threat 
Modeling  
Attack 
Static  
Analysis  
Dynamic 
Analysis  
Final Review  
Secure  
Release  
Security 
Monitoring  
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 46  a 137  
 
Progettazione : in questa fase si esamina il sistema in divenire con l’ausilio di tecniche di analisi e 
modellazione delle minacce. Requisiti di sicurezza di maggior dettaglio si aggiungono quindi a quelli 
prodotti nella precedente fase. 
Implementazione : in questa fase si realizza il sistema attraverso la stesura di codice sicuro. Seguono 
l’esecuzione di test di sicurezza basati sull'anali si delle minacce e l’analisi statica del codice sor gente. 
Quest’ultima può produrre nuovi requisiti di sicure zza, che possono portare alla revisione del codice.  
Verifica : in questa fase si analizzano gli aspetti di sicur ezza del sistema in esecuzione in un ambiente 
controllato impiegando tecniche e strumenti di anal isi dinamica; 
Validazione : è la fase immediatamente prima del rilascio, nell a quale viene effettuata una final security 
review per la verifica del rispetto dei requisiti.  
Supporto : in questa fase si esamina il sistema in essere co n l’ausilio di tecniche di: analisi e modellazione 
delle minacce e/o verifica statica/dinamica del cod ice applicativo, al fine di produrre nuovi requisit i di 
sicurezza di dettaglio per indirizzare un’eventuale  fase di reingegnerizzazione e/o di patching del si stema in 
oggetto. 
6.2  Risk Assessment 
L’obiettivo dell’analisi del rischio è da una parte  identificare, valutare e misurare la probabilità e  la gravità 
dei rischi (ciò che viene generalmente indicato con  il nome di Risk Assessment ) nei diversi processi 
dell’organizzazione e, dall’altra decidere come com portarsi a fronte dei rischi identificati (ciò che viene 
generalmente indicato con il nome di Risk Management ) al fine di minimizzarli o eliminarli.  
Si fornisce di seguito, una classificazione dei pri ncipali rischi: 
• Rischio strategico, derivante dall’incompatibilità tra due o più dei seguenti fattori: 
o obiettivi strategici,  
o strategie di business,  
o mezzi utilizzati per raggiungere gli obiettivi, 
o quadro macroeconomico nel quale opera l’organizzazi one. 
• Rischio reputazionale, che può manifestarsi in molt eplici situazioni, per esempio in caso di mancato 
soddisfacimento della clientela. 
• Rischio finanziario, derivante dall’incapacità di a ssolvere gli oneri finanziari assunti. 
• Rischio operativo, che è connesso ai processi utili zzati per definire le strategie. 
• Rischi di compliance, derivanti da inadempienze leg islative (normative e regolamenti). 
• Rischi di gestione delle informazioni, derivanti da  un insufficiente livello di sicurezza dei sistemi 
informatici. 
• Rischi emergenti e/o potenziali che potrebbero dann eggiare il business dell’organizzazione e/o le 
persone che vi operano. 
La gestione del rischio comprende tre attività prin cipali: 
• Risk Assessment che include l’identificazione e la valutazione dei rischi e degli impatti; le 
raccomandazioni e le misure per la riduzione del ri schio;  
• Mitigazione del rischio, che si riferisce alla prio ritizzazione, implementazione e mantenimento delle 
misure appropriate per la riduzione del rischio rac comandate dal processo di Risk Assessment;  
• Valutazione e analisi dei processi e delle misure p er l'implementazione di un programma di 
gestione del rischio di successo (vedi paragrafo 6. 2.1).  
Una metodologia di gestione del rischio ben struttu rata, se utilizzata in modo efficace, può aiutare 
l’organizzazione a identificare i controlli adeguat i per garantire le capacità di sicurezza essenziali . 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 47  a 137  
 
Ridurre al minimo l'impatto dei rischi sull'organiz zazione e fornire solide basi nel processo decision ale 
sono i motivi fondamentali per cui le organizzazion i sono chiamate a implementare un processo di 
gestione dei rischi per i loro sistemi IT.  
Il Risk Assessment è uno strumento di analisi, semp lice e accurato, che studia i rischi dell’organizza zione 
(operativi, strategici, finanziari ed esterni) al f ine d’individuare successivamente le soluzioni e le  misure più 
adeguate. I passi fondamentali del Risk Assessment possono riassumersi come segue: 
• Identificazione dei rischi. Devono essere individua ti i fattori di pericolo per l’organizzazione, 
evidenziando chi o cosa può essere danneggiato e in  quale modo. Per ogni fattore di pericolo 
identificato, bisogna definire ciò che è esposto ma ggiormente al pericolo. 
• Valutazione dei rischi e definizione delle le azion i di mitigazione. E’ necessario valutare le azioni e le 
tecniche per ridurre il pericolo e portarlo a livel li accettabili. 
• Annotazione dei risultati e attuazione del piano di  mitigazione del rischio. La valutazione 
precedentemente effettuata va trasformata in un pia no operativo, per ottenere una gestione 
consapevole dei rischi dell’organizzazione. 
• Revisione periodica della valutazione e aggiornamen ti. E’ necessario rivedere periodicamente ciò 
che si sta facendo. Viene identificato il profilo d i rischio e viene proposto un modello di gestione 
integrato dei pericoli, che evidenzia i singoli fat tori di rischio. In seguito vengono valutate le var ie 
misure preventive, agevolando la protezione del val ore dell’ente. 
 
Si riporta di seguito uno schema per il Risk Assessment : 
 
 
Figura 10 - Esempio di Schema di Risk Assessment 
 
La gestione dei rischi per essere effettivamente ef ficace, deve essere totalmente integrata nell'SDLC:  
 

  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 48  a 137  
 
 
Figura 11 - Gestione del rischio nel ciclo di vita d el Software 
• Avvio del progetto/Requisiti. La valutazione prelim inare del rischio è volta a definire l'ambiente di 
minaccia in cui opererà il prodotto o il sistema. Q uesta valutazione è seguita da una prima 
identificazione dei controlli di sicurezza richiest i che devono essere soddisfatti per proteggere il 
sistema nell'ambiente operativo previsto. 
• Disegno. I requisiti di sicurezza del sistema vengo no identificati attraverso un processo formale di 
Risk Assessment. L'analisi parte dalla valutazione del rischio effettuata nella fase precedente di 
avvio/inizializzazione e viene approfondita per il contesto specifico. Durante questa fase vengono 
rivisti attentamente i requisiti e le aspettative d i sicurezza e privacy al fine di identificare probl emi 
di sicurezza e rischi per la privacy. In questo pas saggio vengono identificate le vulnerabilità presen ti 
nell'ambiente software o derivanti dall'interazione  con altri sistemi (Security Assessment). Una 
volta identificati i rischi, devono essere valutati  in merito alla loro potenziale gravità dell'impatt o e 
alla probabilità che si verifichino (Risk Assessmen t). Nel processo di valutazione è necessario 
definire le priorità per l'attuazione del piano di gestione dei rischi. La mitigazione del rischio (Ri sk 
Mitigation) è il piano delle azioni volte a ridurre  o eliminare le priorità più alte. Lo scopo è di 
valutare la progettazione del sistema, i requisiti dichiarati e i requisiti minimi di sicurezza deriva nti 
dal processo di categorizzazione della sicurezza al  fine di determinarne l’efficacia delle azioni di 
mitigazione per i rischi previsti. I risultati dovr ebbero mostrare come i controlli di sicurezza speci fici 
forniscono la protezione appropriata o evidenziare le aree in cui è necessaria un'ulteriore 
pianificazione. La valutazione del rischio deve ess ere eseguita prima dell’approvazione delle 
specifiche progettuali (design specifications) poic hé potrebbe fornire specifiche aggiuntive o 
ulteriori elementi da valutare per le specifiche id entificate (ad esempio si dovrebbe considerare 
come il sistema potrebbe influenzare altri sistemi a cui sarà direttamente o indirettamente 
collegato; ciò implica che ci potrebbero essere con trolli comuni che devono essere ereditati 
dall’applicazione in oggetto o ulteriori rischi che  devono necessariamente essere mitigati).  
• Implementazione. In questa fase è necessario determ inare i rischi residui accettabili (le specifiche 
possono imporre oneri e costi eccessivi se i rischi  residui accettabili non sono conosciuti). 
L'obiettivo del processo di valutazione della sicur ezza è verificare che il sistema sia conforme ai 
requisiti funzionali e di sicurezza e operi all'int erno di un livello accettabile di rischio residuo p er la 
sicurezza. 
• Monitoraggio continuo. L'obiettivo finale del monit oraggio continuo è determinare se i controlli di 
sicurezza continuano a essere efficaci nel tempo al la luce degli inevitabili cambiamenti che si 
potrebbero verificare nel sistema e nell'ambiente i n cui opera. La valutazione del potenziale 

  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 49  a 137  
 
impatto di tali modifiche sulla sicurezza del siste ma è un’attività essenziale per assicurare un 
monitoraggio continuo e prevenire l’abbassamento de l livello di sicurezza del sistema. 
6.2.1  Tool per l’analisi del rischio 
6.2.1.1  AGID Cyber Risk Management 
Cyber Risk Management 16  di AgID è lo strumento nazionale per la valutazion e e il trattamento del rischio 
cyber. Per la protezione dei dati in formato digita le, a garanzia della loro riservatezza, integrità e  
disponibilità, il tool AgID di Cyber Risk Managemen t identifica le situazioni e i vari ambiti nei qual i le 
informazioni possono venirsi a trovare, consentendo  di valutare i rischi per la loro sicurezza. 
Lo strumento è stato realizzato per consentire alle  pubbliche amministrazioni di analizzare l’esposizi one al 
rischio dei servizi erogati dalle amministrazioni s tesse ed in caso predisporre i “Piani di Trattament o del 
Rischio”. AgID, dal canto suo, fornisce supporto al le amministrazioni che ne hanno necessità sia in fa se di 
analisi che nella fase d’implementazione di tali pi ani, pianificati e realizzati in base ai risultati forniti 
attraverso la fase di Risk Treatment.  
La Pubblica Amministrazione ha la peculiarità di er ogare servizi verso i cittadini, verso i propri dip endenti, 
verso le imprese e verso altre amministrazioni.  
L'analisi del rischio può essere svolta sulle singo le entità (cioè sulla pubblica amministrazione come  entità 
unica) ed anche su parti di esse, ad esempio sui di partimenti ritenuti più critici. A essere esaminati  sono i 
servizi erogati dalla pubblica amministrazione in c orrelazione con i servizi trasversali, cioè quelli utilizzati 
dalle pubbliche amministrazioni ma forniti da terzi , siano essi appartenenti a una PA oppure no. 
Il quadro normativo sul quale AgID ha costruito il processo di Risk Management si basa sulle linee gui da e 
sui principi dettati dallo standard ISO 31000 [DR-3 ] e sull’Information Risk Assessment Methodology 2 
(IRAM2) dell'Information Security Forum (ISF). 
La metodologia adottata è di tipo “Gray Box”, poich é l’analisi parte da una situazione nota solo in pa rte. I 
servizi, ad esempio, non devono necessariamente ess ere esaminati in dettaglio: le informazioni fornite  
formano una matrice di correlazione che viene anali zzata con un algoritmo sviluppato ad hoc e che forn isce 
come risultato l'elenco delle minacce con i relativ i dettagli. Parte del report può essere visto nell’ immagine 
seguente: 
                                                           
16  https://www.sicurezzait.gov.it/Home  
Figura 12  - Cyber Risk Management di AgID – Report dei rischi per categoria di minaccia  
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 50  a 137  
 
 
Ad esempio, per valutare l'impatto in termini di ri servatezza, integrità e disponibilità delle informa zioni, ci si 
sofferma sugli aspetti economico/finanziario, opera tivo, reputazionale e legale (compliance). 
Le fasi che costituiscono la gestione del rischio e ffettuato con Cyber Risk Management di AgID sono le  
seguenti: 
1)  Analisi del contesto. Vengono identificati i serviz i erogati e i servizi trasversali utilizzati in amb ito 
pubblica amministrazione.  Di ogni servizio viene d escritto un profilo di criticità. 
2)  Valutazione di ciascun servizio erogato e da ciascu n servizio trasversale in termini d’impatto su 
riservatezza, integrità e disponibilità delle infor mazioni trattate. 
3)  Calcolo del rischio attuale, sulla base dei valori di probabilità di accadimento e d’impatto, per ogni  
minaccia identificata. La fase di Risk Assessment p revede anche l’identificazione delle contromisure 
da implementare per un’efficace mitigazione del ris chio. 
4)  Applicazione delle contromisure previste dal piano di trattamento del rischio, volte a mitigare, 
accettare o trasferire i rischi individuati. 
5)  Analisi del rischio residuo, cioè la valutazione de l rischio che permane, nonostante l’applicazione 
del piano di trattamento del rischio. 
6)  Fase di monitoraggio dell’intero processo, con even tuale adeguamento in seguito a modifiche del 
contesto o in presenza di nuove minacce alla sicure zza delle informazioni. 
 
Il tool AGID di Risk Management è gratuito ed a com pleta disposizione di tutte le Pubbliche 
Amministrazioni: www.sicurezzait.gov.it  
 
6.3  Requisiti 
La fase di analisi e specifica dei requisiti è fond amentale nel ciclo di vita dello sviluppo software.   
 
Di seguito si riportano i linguaggi e gli strumenti  utili alla fase di definizione dei requisiti di si curezza del 
software. 
6.3.1  Linguaggi per la specifica dei requisiti 
Un linguaggio di specifica in ambito sicurezza può essere considerato: 
• un linguaggio di specifica software utilizzato per indicare gli attacchi (AsmL e UML state charts),  
• l’estensione di un linguaggio di specifica software  utilizzato per rappresentare gli attacchi (Misuse 
Cases , Abuse Cases, AsmLSec e UMLintr) e i requisi ti di sicurezza (UMLsec, SecureUML, Secure 
Tropos e Misuse Cases),  
• un linguaggio per la specifica degli attacchi ( attack specification language), per esempio  STATL e 
Snort Rules. 
 
UMLsec 17  è un'estensione di UML per lo sviluppo di sistemi s icuri e usa stereotype, tag e constraint per 
specificare i requisiti di sicurezza. Gli stereotyp e servono come etichette per gli elementi del model lo UML 
allo scopo di introdurre informazioni al modello e specificare i vincoli che devono essere soddisfatti  da 
questo. I tag sono associati con gli stereotype e s ono utilizzati per specificare in modo esplicito un a 
                                                           
17  https://en.wikipedia.org/wiki/UMLsec  
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 51  a 137  
 
semplice proprietà di un elemento del modello. UMLs ec definisce 21 stereotype da utilizzare per 
rappresentare i seguenti requisiti di sicurezza:  
• fair exchange (la necessità di uno scambio leale), 
• non-repudiation (un'azione non si può negare),  
• role-based access control,  
• secure communication link,  
• confidentiality,  
• integrity,  
• authenticity,  
• freshness of a message (ad esempio nonce),  
• secure information flow among components,  
• guarded access (uso di protezioni per imporre il co ntrollo di accesso). 
 
Sette di questi stereotype hanno dei tag associati e nove hanno vincoli. Gli stereotype possono essere  
utilizzati per i diagrammi dei casi d'uso, i diagra mmi delle classi, diagrammi di stato, diagrammi di attività, 
diagrammi di sequenza, i diagrammi e le implementaz ioni per specificare i requisiti di sicurezza in un  
modello UML (per le specifiche relative sia ai requ isiti, sia al design). Un insieme di tools  sono stati rilasciati 
per la modellazione attraverso l’impiego di UMLsec e per la verifica dei modelli così realizzati (util izzando il 
model checking). 
 
SecureUML 18  SecureUML è un'altra estensione di UML che si conc entra sulle politiche di controllo degli 
accessi ad un modello basato sui ruoli. Queste poli tiche possono essere considerate come requisiti di 
sicurezza. SecureUML propone nove stereotype che po ssono essere utilizzati per annotare un diagramma 
delle classi, con informazioni di controllo di acce sso basato sui ruoli. SecureUML utilizza l'oggetto Constraint 
Language (OCL) per specificare i vincoli, le azioni  e le autorizzazioni per le risorse. Contrariamente  a 
UMLsec, questi vincoli possono essere specificati i n base alle esigenze del singolo componente softwar e. 
Snort Rules 19  è un network intrusion detection system (IDS) ampi amente utilizzato. Esso utilizza scenari di 
attacchi specificati come regole per rilevare gli a ttacchi attraverso la rete. Una snort rule specific a quale 
azione deve essere intrapresa se la regola è associ ata a un pacchetto di rete, gli indirizzi IP di ori gine e 
destinazione e le porte, il protocollo della rete o sservato, e la direzione del pacchetto di rete. Un certo 
numero di opzioni possono anche essere specificate.  Queste opzioni vanno dalla registrazione di un 
messaggio alla ricerca di una particolare stringa n el pacchetto. 
Secure Tropos 20  può essere utilizzato per lo sviluppo di software sicuro ed è un'estensione della 
metodologia di sviluppo Tropos. Secure Tropos utili zza le nozioni di actor  (person(s), organization(s), 
software), goal  (obiettivi che gli attori vogliono ottenere), soft goal  (un obiettivo la cui realizzazione non 
può essere determinata in modo esplicito), task  (un compito per raggiungere un obiettivo), resource  (fisica 
o dati), security constraint  (specificato come le dichiarazioni di alto livello ), secure goal  (utilizzato per 
soddisfare un vincolo di sicurezza), secure task  (un compito per raggiungere un obiettivo di sicure zza), 
secure resource  (una risorsa che è connessa a security constraints , secure goal , secure task , oppure a 
un’altra secure resource ). Un actor  può dipendere da un altro actor  per raggiungere un goal/soft goal , per 
                                                           
18  https://ieeexplore.ieee.org/document/6997358  
19  https://www.snort.org/downloads  
20  http://www.troposproject.eu/node/301  
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 52  a 137  
 
svolgere un task , o rilasciare una risorsa. La notazione SecureTrop os può essere utilizzato per rappresentare 
vincoli di sicurezza (requisiti) sulle interazioni tra gli attori durante la fase di specifica dei req uisiti. 
Misuse Cases 21  è una tipologia di Use Case UML utilizzata per des crivere comportamenti indesiderati del 
software. Un misuse case  è avviato da un particolare tipo di attore chiamat o mis-actor  (ad esempio, l'attore 
con intenti malevoli). Misuse cases  e mis-actors  possono essere utilizzati per suscitare più casi d 'uso per 
neutralizzare le minacce poste dai casi di uso impr oprio. Misuse cases  e mis-actors  sono rappresentati in 
colore nero pieno per distinguerli dai casi d'uso e  dagli attori UML. Due relazioni speciali chiamati 
"prevents” e " detects” mettono in relazione use cases  e misuse cases . Il processo può essere utilizzato in 
modo graduale per sviluppare un diagramma dei casi d'uso (compresi i misuse cases ) oppure, se necessario, 
può essere utilizzato anche in modo iterativo. Seco ndo tale processo, dovrebbero essere specificati pr ima 
gli use cases  e poi i misuse cases . Dopo di che, devono essere identificate le relazi oni potenziali tra gli use 
cases  e i misuse cases  perché spesso la funzionalità del software viene u tilizzata per attaccarlo. Infine, i 
nuovi use case  devono essere specificati per individuare o preven ire i misuse cases . Questi nuovi use case 
costituiscono i requisiti di sicurezza di alto live llo del software e sono chiamati come " security us e cases”. 
Abuse Cases 22  Un altro modo per specificare il comportamento ind esiderato di un pezzo di software 
utilizzando i diagrammi UML è di sviluppare un abuse case model . Un abuse case model  specifica le 
interazioni pericolose usando attori e abuse case . Non c'è differenza di notazione tra i componenti di un 
UML use case diagram  e un abuse case model . Si raccomanda l’utilizzo di una struttura ad albe ro per gli 
approcci multipli. Questo aggiunge ulteriori dettag li al modello e permette di identificare tutte le p ossibili 
misure di sicurezza. Dettagli sugli attori come le loro risorse, le competenze, e l'obiettivo dovrebbe ro essere 
inclusi come testo. Gli abuse case model  possono essere utilizzati nelle fasi di progettazi one e collaudo. 
UMLintr 23  è un'estensione di UML che utilizza stereotype e t ag per specificare intrusioni (attacchi) 
utilizzando use case diagrams, class diagrams, stat e charts, package diagrams. Gli attacchi vengono di visi in 
quattro tipologie diverse. Ogni tipo è rappresentat o come un pacchetto fornito di stereotype. Ci sono tre 
stereotype definiti per le classi e dodici per lo u se case diagram. Gli stereotype per le classi hanno  anche i 
tag. 
Abstract State Machine Language (AsmL) 24  ASML è un linguaggio a stati finiti machine-based e seguibile 
utilizzato anche per specificare scenari di attacco . In generale, in ASML possono essere specificati a ttacchi 
con step multipli. Tali scenari di attacco possono essere tradotti automaticamente in Snort rules  che 
possono poi essere utilizzati con un’estensione di IDS Snort; sono altresì in grado di catturare più a ttacchi 
con step multipli, utilizzando le informazioni di c ontesto. Le Snort rules, l’input standard di Snort,  non 
possono rappresentare attacchi con step multipli. 
AsmLSec 25  è un'estensione di ASML sviluppata per specificare  scenari di attacco. AsmLSec utilizza stati, 
eventi e transizioni per rappresentare gli attacchi . Ogni transizione ha un’origine e uno stato di 
destinazione, una serie di condizioni da soddisfare  e le azioni da compiere. Gli scenari di attacco 
rappresentati in AsmLSec possono essere tradotti au tomaticamente in ASML attraverso un compilatore 
appositamente sviluppato. E’ stato sviluppato un ID S che prende in input gli scenari di attacco tradot ti. 
                                                           
21  https://en.wikipedia.org/wiki/Misuse_case  
22  https://en.wikipedia.org/wiki/Abuse_case  
23  https://ieeexplore.ieee.org/document/1607377  
24  https://www.microsoft.com/en-us/research/project/as ml-abstract-state-machine-language/  
25  https://ieeexplore.ieee.org/document/4159874  
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 53  a 137  
 
UML State Charts for Security 26  i diagrammi di stato UML (senza alcuna estensione)  sono stati utilizzati per 
specificare gli attacchi, che a loro volta possono essere collegati alle snort rules. Questi diagrammi  di stato 
possono essere tradotti manualmente nelle snort rul es, che poi potranno essere utilizzati con 
un'estensione di IDS Snort. Attraverso l’impiego de i diagrammi di stato, è possibile rappresentare att acchi 
complessi con step multipli che normalmente non pos sono essere rappresentati con snort rules ordinarie . 
STATL 27  sta per “State Transition Analysis Technique Langu age” e utilizza due costrutti principali per 
specificare un attacco: stato e transizione. Ogni t ransizione deve avere un evento associato che, quan do si 
verifica, avvia la transizione. All’avvio le transi zioni possono eseguire azioni facoltative. Stato e transizione 
specifiche possono anche avere del codice eseguibil e al loro interno. Un ambiente di sviluppo per STAT L è 
inoltre disponibile e può essere utilizzato, tra le  altre cose, per visualizzare scenario di attacco s pecificati 
come macchina a stati.  
6.3.2  Tool per la specifica dei requisiti  
Il CATALOGO SECURITY TOOLS 6.9 raccoglie i tool dis ponibili, divisi per fase del processo SSDLC, che o ffrono 
funzionalità applicabili in ambito secure applicati on development.  
 
Si riporta di seguito la tabella ‘Software Requirem ents Tools’: 
Prodotto Categoria Fase SSE Tipo Licenza Sito Web 
CaseComplete Requirements 
management Requirements  Versione  trial 
disponibile su 
richiesta https://casecomplete.com/  
IBM Engineering 
Requirements 
Management 
DOORS Next Requirements 
management Requirements   Versione trial 
non disponibile https://www.ibm.com   
IBM Rational 
RequisitePro 
solution Requirements 
management Requirements   Versione trial 
non disponibile https://www.ibm.com  
Microfocus Atlas Requirements 
management Requirements   Versione trial 
disponibile https://www.microfocus.com/  
Objectives Requirements 
management Requirements  Versione trial 
disponibile http://www.objectiver.com  
Open Source 
Requirements 
Management 
Tool (OSRMT) Requirements 
management Requirements  Open Source http://sourceforge.net/projects/osr 
mt/  
Reqtify Requirements 
management Requirements  Demo non 
disponibile https://www.3ds.com/it/prodotti -e-
servizi/catia/prodotti/reqtify/  
rmtoo Requirements 
management Requirements  Open Source http://rmtoo.florath.net/  
                                                           
26  https://ieeexplore.ieee.org/document/7042284  
27  https://pdfs.semanticscholar.org/8e78/63430446f610f5015a484d084cccb7e3c376.pdf  
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 54  a 137  
 
Simulink 
Requirements Requirements 
management Requirements  Versione Trial 
disponibile  https://it.mathworks.com/products 
/simulink-requirements.html  
Teamcenter  
Systems 
Engineering 
Requirements 
(TcSE)  Requirements 
management Requirements  Versione trial 
non disponibile https://www.plm.automation.sieme 
ns.com/global/it/products/teamcen 
ter  
Telelogic DOORS Requirements 
Management Requirements  Gratuito http://telelogic -
doors.software.informer.com/  
Visual Trace Spec Requirements 
management Requirements  Versione trial 
disponibile http://visualtracespec.com/#  
Visure 
Requirements 
Management 
Tool Requirements 
management Requirements  Versione trial 
disponibile su 
richiesta https://visuresolutions.com/require 
ments-management-tool/  
 
6.4  Progettazione 
La fase di progettazione identifica i requisiti gen erali e individua la struttura più adatta per la re alizzazione 
del software. In questa fase viene definita l'archi tettura di sicurezza, adottando le linee guida di 
progettazione; vengono altresì documentati gli elem enti che delimitano la superficie d’attacco e vengo no 
modellate le minacce.  
6.4.1  Secure Design Languages 
Molti dei linguaggi per specificare i requisiti di sicurezza sono utilizzati anche per le specifiche d i design. Ciò 
è dovuto al fatto che i requisiti di basso livello sono davvero vicini alla progettazione statica e di namica. 
Questi linguaggi (ad esempio, UMLsec, SecureUML, e SecureTropos) sono già stati discussi nella sezione  
precedente. Due sono i principali punti che dovrebb ero essere considerati nella scelta di un linguaggi o di 
design sicuro: 
- la varietà di schemi disponibili per rappresentare un disegno, comprensivo dei vari aspetti e livelli di 
astrazione;   
- la disponibilità degli strumenti.  
 
UMLsec  fornisce una varietà di schemi e ha strumenti disp onibili.  
SecureUML  può essere utilizzato anche per la progettazione d i software sicuro; tuttavia, si limita a 
rappresentare solo nozioni di controllo degli acces si basati sui ruoli in un diagramma delle classi UM L.  
Secure Tropos  propone di utilizzare gli Agent UML capability dia grams. Questi schemi sono simili ai 
diagrammi di attività UML (piano e capacità) e diag rammi di sequenza (interazione agente). 
 
6.4.2  Software Design Tools 
Il CATALOGO SECURITY TOOLS 6.9 raccoglie i tool dis ponibili, divisi per fase del processo SSDLC, che o ffrono 
funzionalità applicabili in ambito secure applicati on development.  
 
Si riporta di seguito la tabella ‘Software Design T ools’: 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 55  a 137  
 
Prodotto Categoria Fase SSE Tipo Licenza Sito Web 
Coras Threat 
Modeling 
tool/practies Design Open Source http://coras.sourceforge.net/download 
s.html  
IriusRisk Threat 
Modeling tool  Design C’è una versione 
(limitata) open 
source https://iriusrisk.com/  
Microsoft Threat 
Modeling Tool Threat 
Modeling tool  Design Free https://www.microsoft.com  
ThreatModeler Threat 
Modeling tool  Design Demo 
disponibile https://threatmodeler.com/  
SeaMonster - 
Security 
Modeling 
Software Threat 
Modeling tool  Design  Open Source https://sourceforge.net/projects/seamo 
nster/  
TRIKE Threat 
Modeling 
tool/practies Design Open Source http://www.octotrike.org/  
 
6.5  Implementazione 
Durante questa fase il team di sviluppatori mette i n atto le contromisure secondo le specifiche della fase 
precedente ed effettua dei test sul codice sorgente  per verificare l’assenza di security flaws. 
6.5.1  Software Implementation Tools 
Il CATALOGO SECURITY TOOLS 6.9 raccoglie i tool dis ponibili, divisi per fase del processo SSDLC, che o ffrono 
funzionalità applicabili in ambito secure applicati on development. 
 
Si riporta di seguito la tabella ‘Software Implemen tation Tools’: 
Prodotto Categoria Fase SSE Tipo Licenza Sito Web 
Brakeman SAST Implementation Open Source https://brakemanscanner.org/  
Burp Suite by 
PortSwigger SAST, 
DAST, 
Penetratio 
n Testing Implementation 
/ Verification Versione 
Community 
liberamente 
scaricabile https://portswigger.net  
CppCheck SAST Implementation Open Source http://cppcheck.sourceforge.net/  
Checkmarx  SAST, 
DAST, 
RASP Implementation 
/ Verification Versione  trial 
disponibile a 
richiesta https://www.checkmarx.com/  
CodeDx SAST, 
DAST Implementation 
/ Verification Versione trial 
disponibile https://codedx.com/  
CodeProfiler 
by Virtual 
Forge SAST per 
applicazio 
ni SAP Implementation Nessuna versione 
trial disponibile https://www.virtualforge.com  
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 56  a 137  
 
Contrast 
Enterprise IAST, RASP  Implementation 
/ Verification Demo disponibile su 
richiesta https://www.contrastsecurity.com  
Dependency 
Check Library 
Inspection Implementation Open Source https://www.owasp.org/index.ph 
p/OWASP_Dependency_Check  
SpotBugs SAST Implementation Open Source https://spotbugs.github.io/  
Gendarme SAST Implementation Open Source https://github.com/mono/website 
/blob/gh-
pages/docs/tools+libraries/tools/g 
endarme/index.md  
Microfocus 
Fortify Static 
Code Analyzer  SAST, 
DAST, 
IAST, RASP  Implementation 
/ Verification Demo disponibile su 
richiesta https://www.microfocus.com/it -
it/products/static-code-analysis-
sast/overview  
HCL Security 
AppScan SAST, 
DAST, IAST  Implementation 
/ Verification Versione trial non 
disponibile https://www.hcltech.com  
JSHint SAST Implementation Open Source  https://jshint.com/  
Klocwork SAST Implementation Versione trial 
disponibile su 
richiesta https://www.perforce.com/produ 
cts/klocwork  
MetaFlows Cloud 
Security 
Scanning Implementation Demo disponibile su 
richiesta www.metaflows.com  
Microsoft 
BinScope SAST Implementation Free https://www.microsoft.com  
Microsoft 
Code Analysis 
Tool SAST Implementation Free https://www.microsoft.com  
Microsoft 
FxCop Library 
Inspection Implementation Free https://www.microsoft.com  
Microsoft SDL 
Regex Fuzzer SAST Implementation Free https://www.microsoft.com  
Microsoft SDL 
MiniFuzz File 
Fuzzer SAST Implementation Free https://www.microsoft.com  
ModSecurity WAF Implementation 
/ Verification Open Source http://modsecurity.org/  
N-Stalker 
Cloud Web 
Scan SAST, 
DAST Implementation 
/ Verification Free Tier Available https://www.nstalker.com  
PYLINT SAST Implementation Open Source https://www.pylint.org  
PMD SAST Implementation Open Source https://pmd.github.io  
Risk Fabric by 
Bay Dynamics Predictive 
Security 
Analytics Implementation 
/ Verification / 
Response Demo disponibile su 
richiesta https://baydynamics.com  
RSA Advanced 
Threat DAST Implementation 
/ Verification Available by 
Request https://www.dellemc.com  
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 57  a 137  
 
Management 
Solution 
Website 
Malware 
Scanner SAST, 
DAST Implementation 
/ Verification Demo non 
disponibile https://www.sitelock.com  
SonarLint SAST Implementation Open Source https://www.sonarlint.org  
SonarQube SAST Implementation Open Source https://www.sonarqube.org  
Symantec 
Advanced 
Threat 
Protection IAST, RASP  Implementation 
/ Verification Versione Trial 
disponibile su 
richiesta https://www.symantec.com  
Tanium 
Endpoint 
Platform Endpoint 
Security, 
App 
Security 
Scanning Implementation 
/ Verification Demo non 
disponibile https://www.tanium.com  
Trend Micro 
Deep Security 
Platform SAST, 
DAST Implementation 
/ Verification Versione Trial 
disponibile https://www.trendmicro.com  
Tripwire 
Enterprise IAST, RASP  Implementation 
/ Verification  Demo disponibile su 
richiesta https://www.tripwire.com  
Veracode 
Cloud 
Platform SAST, 
DAST, 
Mobile 
AST, 
Penetratio 
n Testing Implementation 
/ Verification Demo disponibile su 
richiesta www.veracode.com  
WhiteHat 
Sentinel SAST, 
DAST, 
MAST Implementation 
/ Verification Demo di 30 giorni 
disponibile su 
richiesta https://www.whitehatsec.com/inf 
o/security-check/  
 
6.6  Verifica 
Prima della fase di rilascio definitiva del softwar e i team che lavorano in sicurezza effettuano un ul teriore 
verifica del codice elaborato mediante test di sicu rezza. I test di sicurezza mirano a controllare la 
vulnerabilità delle superficie di attacco, in modo da agire in via preventiva alla correzione di event uali 
problemi che potrebbero verificarsi in fase di rila scio. 
6.6.1  Software Verification Tools 
Il CATALOGO SECURITY TOOLS 6.9 raccoglie i tool dis ponibili, divisi per fase del processo SSDLC, che o ffrono 
funzionalità applicabili in ambito secure applicati on development.  
 
Si riporta di seguito la tabella ‘Software Verifica tion Tools’: 
Prodotto Categoria Fase SSE Tipo Licenza Sito Web 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 58  a 137  
 
Acunetix Web 
Vulnerability 
Scanner DAST, IAST Verification Versione trial a 14 
giorni disponibile https://www.acunetix.com/  
AppSpider Pro 
by Rapid7 DAST Verification Versione trial 
disponibile https://www.rapid7.com  
BeEF Penetration 
Testing Verification Open Source https://beefproject.com/  
BrightCloud 
Threat 
Intelligence by 
Webroot DAST Verification Nessuna versione trial 
disponibile https://www.brightcloud.com  
Burp Suite by 
PortSwigger SAST, DAST, 
Penetration 
Testing Implementa 
tion / 
Verification Versione Community 
liberamente 
scaricabile https://portswigger.net  
Checkmarx  SAST, DAST, 
RASP Implementa 
tion / 
Verification Versione trial 
disponibile a richiesta  https://www.checkmarx.com/  
Citrix Web App 
Firewall WAF Verification Demo disponibile su 
richiesta https://www.citrix.com/it -
it/products/citrix-web-app-
firewall/  
CloudSOC 
Cloud Access 
Security 
Broker (CASB) Cloud 
Security 
Testing/Scan 
ning Verification Nessuna versione trial 
disponibile https://www.symantec.com/prod 
ucts/cloud-application-security-
cloudsoc  
CodeDx SAST, DAST Implementa 
tion / 
Verification Versione trial 
disponibile https://codedx.com/  
Contrast 
Enterprise IAST, RASP Implementa 
tion / 
Verification Demo disponibile su 
richiesta https://www.contrastsecurity.com  
Endpoint 
Privilege 
Management Endpoint 
Security Verification 
/ Response Demo disponibile su 
richiesta https://www.beyondtrust.com/  
Falcon  Endpoint 
Security Verification 
/ Response Versione trial 
disponibile https://www.crowdstrike.com  
GrayMatter 
Platform Penetration 
Testing, App 
Security 
Scanning Verification Demo disponibile su 
richiesta https://www.reliaquest.com/  
HCL Security 
AppScan SAST, DAST, 
IAST Implementa 
tion / 
Verification Versione trial non 
disponibile https://www.hcltech.com  
Kali Linux Penetration 
Testing Verification Open Source https://www.kali.org/  
LogRhythm 
Security 
Intelligence Predictive 
Security 
Analytics Verification 
/ Response Demo disponibile su 
richiesta www.logrhythm.com  
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 59  a 137  
 
Platform  
Malwarebytes 
Endpoint 
Security Endpoint 
Security Verification Versione trial 
disponibile https://www.malwarebytes.com/ 
business/endpointsecurity/  
MetaDefender  Predictive 
Security 
Analytics Verification 
/ Response Available by Request https://metadefender.opswat.co 
m/  
Metasploit by 
Rapid7 Penetration 
Testing Verification Open Source https://www.metasploit.com/  
Microfocus 
Fortify Static 
Code Analyzer SAST, DAST, 
IAST, RASP Implementa 
tion / 
Verification Demo disponibile su 
richiesta https://www.microfocus.com/it -
it/products/static-code-analysis-
sast/overview  
Microsoft 
Application 
Verifier DAST Verification Free https://www.microsoft.com  
Microsoft 
Attack Surface 
Analyzer  Intrusion 
Prevention Verification Free https://www.microsoft.com  
Microsoft 
Cloud App 
Security 
(MCAS)  Cloud Access 
Security 
Broker Verification Versione trial 
disponibile  https://www.microsoft.com/en -
us/microsoft-365/enterprise-
mobility-security/cloud-app-
security  
ModSecurity WAF Implementa 
tion / 
Verification Open Source http://modsecurity.org/  
Network 
Security 
Monitoring 
and 
Management CDN, App 
Security 
Scanning Verification Demo non disponibile  https://enterprise.verizon.com/pr 
oducts/security/  
NEVIS Security 
Suite WAF, 
Authenticatio 
n, Identity 
mngt Verification Available by Request https://www.nevis-security.ch/en/  
Next -
Generation 
Firewalls 
(NGFW)   Verification     
Nikto2 Web Server 
Scanner Verification Open Source https://www.cirt.net/Nikto2  
Nmap Penetration 
Testing and 
Network 
Mapping Verification 
/ Response Open Source https://nmap.org/  
NSFOCUS Web 
Application 
Firewall DAST, WAF Verification Demo non disponibile  https://nsfocusglobal.com/web-
application-firewall-waf/  
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 60  a 137  
 
N-Stalker 
Cloud Web 
Scan SAST, DAST Implementa 
tion / 
Verification Free Tier Available https://www.nstalker.com  
OWASP Zed 
Attack Proxy 
(ZAP) Penetration 
Testing Verification 
/ Response Open Source www.owasp.org  
Paloalto Next -
Generation 
Firewall WAF Verification Demo disponibile su 
richiesta https://www.paloaltonetworks.co 
m  
Peach Fuzzer Penetration 
Testing Verification 
/ Response Demo disponibile su 
richiesta https://www.peach.tech/  
Pradeo 
Security Mobile AST Verification Nessuna versione trial 
disponibile https://www.pradeo.com/it -
IT/protezione-flotta-mobile  
Qualys 
Security & 
Compliance 
Suite DAST, WAF Verification 
/ Response Versione trial 
disponibile https://www.qualys.com  
Risk Fabric by 
Bay Dynamics Predictive 
Security 
Analytics Implementa 
tion / 
Verification 
/ Response Demo disponibile su 
richiesta https://baydynamics.com  
RSA Advanced 
Threat 
Management 
Solution DAST Implementa 
tion / 
Verification Available by Request https://www.dellemc.com  
Runtime 
Application 
Self-Protection  RASP Verification 
/ Response Demo disponibile su 
richiesta https://www.imperva.com/produc 
ts/runtime-application-self-
protection-rasp/  
Samurai Web 
Testing 
Framework DAST, 
Penetration 
testing Verification Open Source http://www.samurai-wtf.org/  
SRX Series 
Firewall by 
Juniper 
Networks WAF Verification Versione Trial 
disponibile https://www.juniper.net/us/en/pr 
oducts-services/security/srx-
series/  
Sucuri Website 
Application 
Firewall WAF Verification Demo non disponibile  https://sucuri.net/website-
firewall/  
Symantec 
Advanced 
Threat 
Protection IAST, RASP Implementa 
tion / 
Verification Versione Trial 
disponibile su 
richiesta https://www.symantec.com  
Synopsys Black 
Duck Hub Library 
Inspection Verification  Demo disponibile su 
richiesta https://www.blackducksoftware.c 
om/  
Tanium 
Endpoint 
Platform Endpoint 
Security, App 
Security Implementa 
tion / 
Verification Demo non disponibile  https://www.tanium.com  
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 61  a 137  
 
Scanning  
Thunder TPS 
by A10 
Networks DDoS 
Protection Verification 
/ Response Versione Trial 
disponibile https://www.a10networks.com/pr 
oducts/thunder-tps/  
Trend Micro 
Deep Security 
Platform SAST, DAST Implementa 
tion / 
Verification Versione Trial 
disponibile https://www.trendmicro.com  
Tripwire 
Enterprise IAST, RASP Implementa 
tion / 
Verification  Demo disponibile su 
richiesta https://www.tripwire.com  
Trustwave 
Secure Web 
Gateway CDN, DAST Verification Demo non disponibile  https://www.trustwave.com/en -
us/services/technology/secure-
web-gateway/  
Trustwave 
Web 
Application 
Firewall WAF, 
Penetration 
Testing Verification Demo non disponibile  https://www.trustwave.com  
Veracode 
Cloud Platform  SAST, DAST, 
Mobile AST, 
Penetration 
Testing Implementa 
tion / 
Verification Demo disponibile su 
richiesta www.veracode.com  
VMWare 
Carbon Black Endpoint 
Security Verification 
/ Response Demo disponibile su 
richiesta https://www.carbonblack.com/  
vSentry by 
Bromium Endpoint 
Security Verification 
/ Response Demo disponibile su 
richiesta www.bromium.com  
Website 
Malware 
Scanner SAST, DAST Implementa 
tion / 
Verification Demo non disponibile  https://www.sitelock.com  
WhiteHat 
Sentinel SAST, DAST, 
MAST Implementa 
tion / 
Verification Demo di 30 giorni 
disponibile su 
richiesta https://www.whitehatsec.com/inf 
o/security-check/  
Wireshark Penetration 
Testing and 
Packet-level 
Monitoring Verification Open Source https://www.wireshark.org/  
Yottaa CDN, DDoS 
Protection, 
WAF Verification Demo disponibile su 
richiesta https://www.yottaa.com  
 
6.7  Validazione 
Durante questa fase il software è oggetto di una Fi nal Security Review finalizzata a stabilire se il s oftware 
soddisfa tutti i requisiti di sicurezza individuati  nella fase iniziale del progetto.  
In questa fase ci si accerta, inoltre, che i bug di  sicurezza precedentemente identificati siano stati  corretti e 
che il SW sia sufficientemente robusto di fronte a nuove vulnerabilità.  
Le azioni di sicurezza di questa fase possono esser e così sintetizzate: 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 62  a 137  
 
• Software Remediation dopo un'analisi statica (SAST)   
o Analisi della reportistica e classificazione degli errori, rilevati nella fase di analisi statica del 
codice;  
o Rimozione degli errori di sicurezza legati all’uso di librerie esterne vulnerabili, sostituendo 
queste ultime con le versioni sicure;  
o Ristrutturazione delle classi e funzioni identifica te come vulnerabili alle varie injection, al cross 
site scripting, etc.  
o Applicazione delle modifiche ai costrutti sintattic i che rendono il software vulnerabile; 
o Correzione del software in base ai warning sulla qu alità del codice; 
• Software Remediation dopo un'analisi dinamica (DAST ) 
o Analisi della reportistica e classificazione degli errori per rilevanza e quindi per priorità e 
urgenza della loro correzione. 
o Rimozione degli errori messi in evidenza dal fuzzy testing, ad esempio aumentando i controlli 
applicativi. 
o Correzioni degli errori, eventualmente tramite impl ementazione di nuove funzioni, per 
esempio aggiungendo meccanismi di autenticazione o rivedendo la struttura delle classi e 
funzioni. 
o Adozione di attributi del protocollo per innalzare la sicurezza di cookie e sessioni. 
• Definizione di un Incident Response Plan  cioè la documentazione contenente le istruzioni pe r 
rispondere e limitare gli effetti di un incidente d i sicurezza. 
• Produzione di un documento di Security Review un pr ocesso collaborativo che identifica i problemi 
relativi alla sicurezza, il livello di rischio asso ciato a tali problemi e le decisioni da prendere pe r ridurre 
o accettare tale rischio. 
• Aggiornamento delle procedure di sicurezza, certifi cazione del rilascio del software, testing e 
archiviazione. 
 
 
 
Figura 13 - Input e Output della fase Final Review -  Secure Release 
 
6.7.1  Software Release Tools 
Il CATALOGO SECURITY TOOLS (vedi paragrafo 6.9) rac coglie i tool disponibili, divisi per fase del proc esso 
SSDLC, che offrono funzionalità applicabili in ambi to secure application development.  
 
Si riporta di seguito la tabella ‘Software Release Tools’: 

  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 63  a 137  
 
Prodotto Categoria  Fase SSE Tipo 
Licenza Sito Web 
Armor Complete Cloud Security Platform  Release Available by 
Request https://www.armor.com  
 
6.8  Supporto 
La fase di supporto riguarda la manutenzione e l’as sistenza post rilascio. Questa fase nasce per segui re 
tutte le novità in materia di sicurezza, imposte da l dinamico mercato informatico, per adeguarsi 
all’evoluzione delle vulnerabilità del software. 
 Le azioni di sicurezza di questa fase possono esse re così sintetizzate: 
• Vulnerability assessment :  
o esecuzione di test che consentano di individuare le  vulnerabilità dell’applicazione; 
o valutazione della priorità/severità dei problemi ri scontrati;  
o definizione del Remediation Plan; 
o produzione di reportistica di sintesi e di dettagli o; 
• Data Loss/Leak Prevention : 
o rilevazione, analisi e classificazione dei dati che  transitano nell'organizzazione, ovunque siano 
archiviati;  
o creazione di regole predefinite per la protezione d ei dati, per assicurarsi che siano usati in 
conformità con le politiche di privacy e sicurezza;   
o generazione automatica di alert nel caso in cui ven gano violate le policy di sicurezza definite; 
• Database Security :  
o analisi dei database e valutazione dei rischi media nte l’accertamento di nuove  vulnerabilità;  
o individuazione delle alterazioni dei dati, degli ut enti e dei profili di accesso;  
o arresto in tempo reale delle sessioni che violano l e policy, evitando che i dati vengano 
compromessi; 
o applicazione delle ultime patch di sicurezza dispon ibili; 
• Web Application Firewall Management e Secure Web Ga teway :  
o funzionalità di standard firewall (policy enforceme nt, stateful inspection, packet filtering, NAT, 
VPN client-to-site e site-to-site);  
o anti-malware e anti-spam;  
o Intrusion Prevention (IPS) per il blocco delle mina cce; 
• Patching Update: notifica, installazione e test di nuovi security im provement packages.  
 
6.8.1  Software Response Tools 
Il CATALOGO SECURITY TOOLS 6.9 raccoglie i tool dis ponibili, divisi per fase del processo SSDLC, che o ffrono 
funzionalità applicabili in ambito secure applicati on development.  
 
Si riporta di seguito la tabella ‘Software Response  Tools’: 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 64  a 137  
 
Prodotto Categoria Fase SSE Tipo Licenza Sito Web 
Airlock Suite by 
Ergon 
Informatik WAF, 
Authentication, 
Identity Response Versione trial 
disponibile https://www.airlock.com  
Akamai CDN, DDoS 
Protection, WAF Response Prova gratuita 
disponibile https://www.akamai.com/it/it/   
Alert Logic 
SIEMless Threat 
Management Intrusion 
Prevention 
System, Cloud 
Access Security 
Broker, WAF, 
Container Security  Response Versione trial 
disponibile https://www.alertlogic.com/  
AWS WAF WAF Response Nessuna trial 
disponibile https://aws.amazon.com/it/waf/   
Potection 
Center Mobile AST  Response Nessuna demo 
disponibile https://appmobi.com   
AppWall by 
Radware WAF, DDoS 
Protection Response Nessuna versione 
trial disponibile https://www.radware.com/  
Arbor DDoS 
Protection DDoS Protection Response Nessuna versione 
trial disponibile https://www.netscout.com/arbor 
-ddos  
Arxan 
Application 
Protection Mobile AST  Response Nessuna versione 
trial disponibile https://www.arxan.com/applicati 
on-protection  
Barracuda Web 
Application 
Firewal WAF Response Versione trial 
disponibile su 
richiesta https://www.barracuda.com/pro 
ducts/webapplicationfirewall  
Lookout Mobile 
Endpoint 
Security Mobile Access 
Security Broker Response Demo disponibile su 
richiesta https://www.lookout.com/produ 
cts/mobile-endpoint-security  
CD Protection 
by CD Networks  CDN, WAF, DDoS 
Protection Response Nessuna versione 
trial disponibile https://www.cdnetworks.com  
CipherCloud Cloud Access 
Security Broker Response Versione trial 
disponibile https://www.ciphercloud.com  
CloudFlare CDN, DDoS 
Protection, WAF Response Nessuna versione 
trial disponibile www.cloudflare.com  
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 65  a 137  
 
CloudFront by 
Amazon CDN, DDoS 
Protection Response Nessuna versione 
trial disponibile https://aws.amazon.com/it/cloud 
front/  
Cloud Access 
Security Broker 
(CASB) Cloud Access 
Security Broker Response Demo gratuita a 
richiesta https://umbrella.cisco.com/prod 
ucts/casb  
CloudPassage 
Halo Cloud Access 
Security Broker Response Versione trial 
disponibile https://www.cloudpassage.com  
DDoS Strike by 
Security 
Compass DDoS Protection Response Demo disponibile su 
richiesta https://www.securitycompass.co 
m  
R&S®Web 
Application 
Firewall WAF Response Demo disponibile su 
richiesta www.denyall.com  
F5 Big-IP  WAF, DDoS 
Protection Response Demo disponibile su 
richiesta https://f5.com  
FireEye NX Web Server 
Scanner, WAF Response Versione trial non 
disponibile https://www.fireeye.com  
FortiWeb: Web 
Application 
Firewall and API 
Protection WAF Response Demo disponibile su 
richiesta https://www.fortinet.com/produ 
cts/web-application-
firewall/fortiweb.html  
FortiGate 
NGFW WAF Response Demo disponibile su 
richiesta https://www.fortinet.com/it/pro 
ducts/next-generation-
firewall/models-specs.html  
Imperva 
FlexProtect WAF, DDoS 
Protection Response Demo disponibile su 
richiesta https://www.imperva.com/produ 
cts/flexprotect-plans/  
BloxOne Threat 
Defense WAF Response Versione trial 
disponibile su 
richiesta https://www.infoblox.com/produ 
cts/bloxone-threat-defense/  
Hillstone E-
Series WAF Response Demo non 
disponibile  https://www.hillstonenet.com  
Kona Site 
Defender by 
Akamai WAF, DDoS 
Protection Response Demo disponibile su 
richiesta https://www.akamai.com/it/it/pr 
oducts/security/kona-site-
defender.jsp  
CenturyLink 
DDoS and Web 
Application 
Security CDN, DDoS 
Protection Response Demo non 
disponibile https://www.centurylink.com/bu 
siness/security/ddos-and-web-
application.html  
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 66  a 137  
 
Netsparker 
Web 
Application 
Security 
Scanner DAST Response Demo disponibile su 
richiesta https://www.netsparker.com/  
Neustar DDoS Protection, 
WAF Response Demo disponibile su 
richiesta https://www.home.neustar/  
Palo Alto Threat 
Prevention 
Services RASP WAF Response Demo disponibile su 
richiesta https://www.paloaltonetworks.c 
om  
Network Threat 
Detection Intrusion 
Prevention System  Response Demo disponibile su 
richiesta https://www.bricata.com  
Sophos Next-
Gen Firewall WAF Response Versione Trial a 30 
giorni disponibile https://www.sophos.com/en-
us/products/next-gen-
firewall.aspx  
Sucuri Website 
Security 
Solutions WAF, DDoS 
Protection, App 
Security Scanning Response Demo non 
disponibile https://sucuri.net/website-
security-platform/signup/  
Ziften Endpoint Security Response Demo disponibile su 
richiesta https://ziften.com/  
 
6.9  Catalogo Security Tools  
Il CATALOGO SECURITY TOOLS raccoglie i tool disponi bili che offrono funzionalità applicabili in ambito  
secure application development.  
 
In Appendice 1 viene riportato il Catalogo Security  Tools con il seguente formato: 
Tabella 4 - Struttura del Catalogo Security Tool  
 
6.10  Training e formazione 
 
 
 Prodotto  Categoria  Fase SSE  Tipo Licenza  Sito Web  
nome 
commerciale 
del tool  indica la macro -funzione: 
per es. DAST, SAST, WAF 
ecc. la fase del sw life -
cycle coperta dal 
tool tipo licenza indirizzo web per 
approfondimenti 
Le organizzazioni inoltre dovrebbero investire di più anche nello svi luppo di competenze interne 
sulla base anche del fatto che molti degli attuali problemi di sicurezza derivano da errori di 
progettazione o di implementazione, risolvibili sol o disponendo di personale qualificato. Alcuni 
analisti affermano che il 64% degli sviluppatori no n sono confidenti di poter scrivere applicazioni 
sicure  [fonte: Microsoft Developer Research]. 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 67  a 137  
 
 
 
Questa sezione fornisce un elenco di riferimento de i corsi disponibili in ambito secure software 
development. 
 
6.10.1  Secure Coding in C and C++ 
Il corso è basato su material di Addison-Wesley: “S ecure Coding in C and C++” and “The CERT C Secure 
Coding Standard”. Il training SEI può essere offert o anche fuori dall’area statunitense. 
 
URL  http://www.sei.cmu.edu/training/p63.cfm   
Country of HQ location  US  
Geographic Scope  International   
Type  Academic (SEI)  
 
Questo corso fornisce una spiegazione dettagliata d i errori di programmazione comuni in C e C ++ e 
descrive come questi errori possono portare a codic e vulnerabile. Il corso si concentra sulle question i di 
sicurezza intrinseche dei linguaggi di programmazio ne C e C ++ e delle librerie associate. 
I partecipanti acquisiscono conoscenza sugli errori  comuni di programmazione che portano a vulnerabili tà 
del software, come questi errori possono essere sfr uttati, e le strategie di mitigazione efficaci per impedire 
l'introduzione di tali errori. In particolare, i pa rtecipanti acquisiscono competenze in merito a: 
• migliorare la sicurezza complessiva di ogni tipo ap plicazione C o C ++ 
• contrastare attacchi buffer overflow e stack-smashi ng che sfruttano la manipolazione logica di 
stringhe insicure 
• evitare vulnerabilità e security flaws derivanti da l non corretto utilizzo delle funzioni di gestione 
della memoria dinamica 
• eliminare i problemi integer-related: integer overf lows, sign errors, truncation errors 
• usare correttamente le funzioni di output formattat o senza introdurre vulnerabilità format-string 
• evitare le vulnerabilità di I/O, tra cui condizioni  race conditions  
• evitare I/O vulnerabilities, including race conditi ons  
 
6.10.2  Writing Secure Code - C++ 
Questo corso di formazione computer-based spiega qu ali sono le funzioni di sicurezza principali del 
linguaggio C ++, come evitare che gli sviluppatori cadano nelle trappole di sicurezza comuni e come 
costruire applicazioni aziendali sicure e affidabil i utilizzando C ++. Gli studenti sono guidati attra verso 
esempi di codice hands-on che evidenziano i problem i e le soluzioni prescritte. 
Il corso ha i seguenti moduli: 
• Introduction to Software Security  
• Data Protection – in Storage and in Transit  
• Authentication  
• Authorisation  
• Data Validation  
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 68  a 137 
 
• Process Handling  
• Error Handling and Exception Management  
• Logging and Auditing  
• Memory Management 
 
6.10.3  Writing Secure Code - Java (J2EE) 
Questo corso di formazione computer-based illustra le caratteristiche chiave di sicurezza della piatta forma 
J2EE, come evitare che gli sviluppatori cadano nell e trappole di sicurezza comuni e come creare applic azioni 
web sicure e affidabili utilizzando Java. Gli stude nti sono guidati attraverso esempi di codice hands- on che 
evidenziano i problemi e le soluzioni prescritte. 
Il corso ha i seguenti moduli: 
• Introduction to Software Security  
• Data Protection – in Storage and in Transit  
• Authentication  
• Authorisation  
• Data Validation  
• Process Handling  
• Error Handling and Exception Management  
• Logging and Auditing  
• Memory Management 
 
6.10.4  Foundstone (Mcafee) Courses 
Foundstone offre un programma di formazione di sicu rezza di rete per la creazione di professionisti de lla 
sicurezza qualificati. 
URL  http://www.foundstone.com  
Contact Method  http://www.mcafee.com/us/about/contact -us.aspx   
Email, web form, phone and address  
Country of HQ location  US  
Geographic Scope  International   
Type  Industry (McAfee)  
 
6.10.5  Threat Modeling 
Questo corso di formazione computer-based spiega i processi e i concetti di creazione di software sicu ro al 
fine di designare un quadro di sicurezza, identific ando quindi minacce e contromisure. Gli studenti po ssono 
apprendere come utilizzare la modellazione delle mi nacce per migliorare il SDLC. 
Il corso ha i seguenti moduli: 
• Introduction to Threat Modeling and Hacme Books  
• Identify Security Requirements  
• Understand the System and the Application  
• Identify Threats and Countermeasures  
• Post-Threat Modeling Activities 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 69  a 137  
 
6.10.6  Writing Secure Code - ASP.NET (C#) 
Questo corso di formazione computer-based spiega le  caratteristiche chiave di sicurezza della piattafo rma 
.NET, come evitare che gli sviluppatori web cadano nelle trappole di sicurezza comuni e quindi come cr eare 
applicazioni web sicure e affidabili utilizzando AS P.NET. Gli studenti sono guidati attraverso esempi di 
codice hands-on che evidenziano i problemi e le sol uzioni più idonee. 
Il corso ha i seguenti moduli: 
• Introduction to Software Security  
• Data Protection – in Storage and in Transit  
• Authentication  
• Authorization  
• Data Validation  
• Process Handling  
• Error Handling and Exception Management  
• Logging and Auditing  
• Memory Management  
 
6.10.7  Oracle Courses 
Oracle University è il principale fornitore di form azione per le tecnologie e i prodotti Oracle. Offre  corsi 
class-based, on-site, virtuali e su CD-ROM, molti d ei quali si concentrano sulla programmazione Java o  sui 
prodotti Oracle. 
 
URL  http://education.oracle.com  
Contact Method  Education Contact  
Email and phone  
Country of HQ location  US  
Geographic Scope  International   
Type  Industry (Oracle)  
 
6.10.8  Developing Secure Java Web Services, Java EE 6 
Il corso Developing Secure Java Web Services fornis ce le informazioni necessarie per progettare, 
implementare, distribuire e gestire secure web serv ices e web service client utilizzando componenti di  
tecnologia Java e Java Platform, Enterprise Edition  6 (Java EE 6 della piattaforma). 
Gli studenti vengono guidati sulla necessità di gar antire servizi web sicuri e sulle sfide associate a lla 
sicurezza dei servizi Web. Gli studenti vengono for mati anche sui principali standard di settore e sul le 
iniziative sviluppate per fornire soluzioni di sicu rezza complete per i servizi web; nonchè come appli carli per 
garantire servizi web sicuri. In particolare, gli s tudenti imparano come proteggere i servizi Web util izzando 
tecnologie application-layer security, transport-la yer security e message-layer security, come ad esem pio 
come quelle specificate dalle estensioni di sicurez za WS- *. 
Questo corso introduce anche i concetti di gestione  delle identità, i driver che stanno dietro le solu zioni di 
gestione delle identità e le funzioni di Sun Java S ystem Access Manager. 
Gli obiettivi del corso sono i seguenti: 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 70  a 137  
 
• Identify the need to secure web services  
• List and explain the primary elements and concepts of application security  
• Outline the factors that must be considered when de signing a web service security solution  
• Describe the issues and concerns related to securin g web service interactions  
• Analyse the security requirements of web services  
• Identify the security challenges and threats in a w eb service application  
• Evaluate the tools and technologies available for s ecuring a Java web service  
• Secure web services by using application-layer secu rity, transport-layer security and message-layer 
security  
• Describe the concept of identity and the drivers be hind identity management solutions  
• Explain the role of Sun Java System Access Manager in securing web services  
• Secure web services by using UserName token profile   
• Secure web services by relying on Sun Java System A ccess Manager  
Il corso tratta i seguenti argomenti: 
• Encapsulating the Basics of Security  
• Examining Web Services Security Threats and Counter measures  
• Securing Java Web Services Using JavaEE  
• Introduction to Web Services Security  
• Web Services Security with JAX-WS and Project Metro   
• Authentication in JAX-WS  
• Identity Management and OpenSSO  
 
6.10.9  MySQL and PHP - Developing Dynamic Web Applications  
Il corso MySQL and PHP - Developing Dynamic Web App lications spiega come sviluppare applicazioni in PH P 
e come usare MySQL in modo efficiente per le applic azioni. Con un approccio hands-on, questo corso con  
istruttore migliorerà le capacità di PHP e di come combinarle con collaudate tecniche di gestione di 
database per creare applicazioni web best-of-breed che siano efficienti, solide e sicure. 
Gli obiettivi del corso sono: 
• Design web-based applications  
• Design schemas based on MySQL  
• Use „include files‟ to make code easier to maintain   
• Use PHP 5 and take advantage of its advanced featur es  
• Build applications, following a precise flow  
• Authenticate users in a secure way against a databa se  
• Handle errors in your PHP applications efficiently and elegantly  
• Write composite queries using JOINs and subqueries  
• Use indexing in order to manipulate large amounts o f data efficiently  
• Use JOINS to extract data from multiple tables  
• Use GROUP BY clauses and aggregate functions  
• Write applications whose components can be scaled t o meet increased demand  
• Build a complete application that includes authenti cation and session management  
• Understand how PHP, MySQL and the Apache web server  work together to deliver dynamic web 
content  
Il corso tratta i seguenti argomenti: 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 71  a 137  
 
• PHP Foundations  
• MySQL Foundations  
• Manage Databases  
• Manage Tables  
• SQL SELECT Commands  
• SQL Expressions  
• SQL DML Commands  
• SQL JOINS  
• MySQL Database-Driven Web-Based Forms  
• Session Handling  
• Object-Oriented Programming  
• Authentication  
• Securing PHP and MySQL  
 
6.10.10  Google Gruyere 
Google Code University fornisce un ambiente di labo ratorio gratuito chiamato Gruyère 28 , dove gli studenti 
possono provare ad hackerare applicazioni web. Gli studenti hanno l'opportunità di fare qualche prova 
reale di penetrazione, sfruttando esempi reali con complessità crescente. In particolare, gli studenti  
possono imparare: 
• come un'applicazione web può essere attaccata utili zzando vulnerabilità di sicurezza comune, come 
le vulnerabilità cross-site scripting (XSS) e cross -site request forgery (XSRF) 
• come trovare, correggere ed evitare queste vulnerab ilità comuni, e altri bug che hanno impattano 
sulla sicurezza, come ad esempio denial-of-service,  la divulgazione di informazioni o l'esecuzione di 
codice remoto. 
 
6.10.11  OWASP Training Courses 
OWASP offre materiali di formazione gratuiti, video  e presentazioni, e fornisce opportunità di formazi one 
presso le sue conferenze sulla sicurezza delle appl icazioni.  
                                                           
28  http://google-gruyere.appspot.com/ 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 72  a 137  
 
7 CERTIFICAZIONI PROFESSIONALI 
7.1  GIAC Secure Software Programmer (GSSP) Certificatio n 
GSSP Certification Exam coinvolge l'Istituto SANS, CERT CC, diverse agenzie governative statunitensi e  
aziende leader negli Stati Uniti, Giappone, India e  Germania. SANS è il certificatore. 
 
URL  https://www.giac.org/  
 
Questa certificazione si concentra sulle questioni reali che stanno dietro le vulnerabilità più comuni  e i 
problemi di sicurezza applicativi.  
Gli esami riguardano le tecniche e i linguaggi spec ifici (Java o .NET) e molte delle domande usano ese mpi di 
codice reale. Gli esami aiutano le organizzazioni a  soddisfare quattro obiettivi, che sono: 
o identificare carenze nella conoscenza della sicurez za dei programmatori in-house e aiutare 
gli individui a colmare il divario; 
o assicurarsi che i programmatori in outsourcing abbi ano adeguate competenze Secure-
coding; 
o nominare nuovi dipendenti che non hanno bisogno di formazione correttiva in 
programmazione sicura; 
o assicurarsi che ogni grande progetto di sviluppo ab bia almeno una persona con avanzate 
capacità di programmazione sicura. 
Dopo l'acquisizione di questa certificazione, i pro grammatori saranno a conoscenza dei difetti più com uni di 
sicurezza che si trovano in ambienti di programmazi one specifici (Java o .NET), e sapranno come evitar e 
questi problemi dovuti principalmente alla vulnerab ilità delle applicazioni. 
 
Web Applicaton Defender. La certificazione GIAC Web  Application Defender consente ai candidati di 
acquisire le conoscenze e le competenze di sicurezz a necessarie per gestire gli errori comuni delle 
applicazioni Web che portano alla maggior parte dei  problemi di sicurezza. 
 
La certificazione GSSP rimane valida per quattro an ni. 
 
7.2  International Council of E-Commerce Consultants (EC -Council) Certifications 
L'EC-Council è un'organizzazione member-based che c ertifica gli individui in varie competenze e-busine ss e 
di sicurezza delle informazioni. 
 
URL  http://www.eccouncil.org  
Contact Method  http://ww w.eccouncil.org/contact_us.aspx  
Email, web form, phone and address  
Country of HQ location  US  
Geographic Scope  International   
Type  Industry  
 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 73  a 137  
 
I diversi tipi di certificazione offerti dal EC-Cou ncil nelle aree SSE-correlate sono descritti nelle sezioni che 
seguono. 
7.3  Certified Ethical Hacker (CEH) 
Si tratta di una certificazione riconosciuta e accr editata in conformità ANSI 17024. Il corso si pone 
l’obiettivo di formare una nuova figura professiona le, l’hacker etico, che si dedichi alla difesa dell a sicurezza 
informatica. Il principio didattico è di apprendere  da un lato le tecniche di intrusione e violazione 
informatica e dall’altro lato le metodologie di dif esa da queste stesse tecniche. CEH dispone di 26 mo duli, di 
cui i seguenti sono collegati a SSE: 
• Module 17: Web Application Vulnerabilities  
• Module 19: SQL Injection  
• Module 24: Buffer Overflows  
• Module 26: Penetration Testing Methodologies  
 
7.4  Certified Security Analyst (ECSA) 
La certificazione ECSA completa la certificazione C EH (vedi sopra) esplorando la fase analitica di hac king 
etico. ECSA fa un ulteriore passo in avanti, rispet to a CEH, approfondendo come analizzare l'esito di questi 
strumenti e tecnologie. Attraverso metodi e tecnich e di penetration testing  la certificazione ECSA aiuta i 
candidati a effettuare le valutazioni necessarie pe r identificare e mitigare efficacemente i rischi pe r la 
sicurezza delle informazioni dell'infrastruttura. 
ECSA ha 47 moduli, di cui i seguenti sono collegati  a SSE: 
• Module 10: Advanced Exploits and Tools  
• Module 11: Penetration Testing Methodologies  
• Module 27: Stolen Laptop, PDAs and Cellphones Penet ration Testing  
• Module 28: Application Penetration Testing  
• Module 40: Security Patches Penetration Testing  
• Module 41: Data Leakage Penetration Testing  
• Module 42: Penetration Testing Deliverables and Con clusion  
• Module 43: Penetration Testing Report and Documenta tion Writing  
• Module 44: Penetration Testing Report Analysis  
• Module 45: Post-Testing Actions  
7.5  Certified Secure Programmer (ECSP) 
La certificazione ECSP è destinata ai programmatori  e agli sviluppatori software è ha allo scopo di co dificare 
e sviluppare applicazioni sicure durante tutto il c iclo di vita del software. 
ECSP dispone di 33 moduli, di cui i seguenti sono c ollegati a SSE: 
• Module 01: Introduction to Secure Coding  
• Module 02: Designing Secure Architecture  
• Module 03: Cryptography  
• Module 04: Buffer Overflows  
• Module 05: Secure C and C++ Programming  
• Module 06: Secure Java and JSP Programming  
• Module 07: Secure Java Script and VBScript Programm ing  
• Module 08: Secure Microsoft.NET Programming  
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 74  a 137  
 
• Module 09: Secure PHP Programming  
• Module 10: Securing Applications from Bots  
• Module 11: Secure SQL Server Programming  
• Module 12: SQL Rootkits  
• Module 13: Secure Application Testing  
• Module 14: VMware Remote Recording and Debugging  
• Module 15: Writing Secure Documentation and Error M essages  
• Module 16: Secure ASP Programming  
• Module 17: Secure PERL Programming  
• Module 18: Secure XML, Web Services and AJAX Progra mming  
• Module 19: Secure RPC, ActiveX and DCOM Programming   
• Module 20: Secure Linux Programming  
• Module 21: Secure Linux Kernel Programming  
• Module 22: Secure Xcode Programming  
• Module 23: Secure Oracle PL/SQL Programming  
• Module 24: Secure Network Programming  
• Module 25: Windows Socket Programming  
• Module 26: Writing Shellcodes  
• Module 27: Writing Exploits  
• Module 28: Programming Port Scanners and Hacking To ols  
• Module 29: Secure Mobile Phone and PDA Programming  
• Module 30: Secure Game Designing  
• Module 31: Securing E-Commerce Applications  
• Module 32: Software Activation, Piracy Blocking and  Automatic Updates  
• Module 33: PCI Compliance and Secure Programming  
 
7.6  Certified Software Security Lifecycle Professional (CSSLP) and Certified Information 
Systems Security Professional (CISSP) 
Il CSSLP ha lo scopo di convalidare le conoscenze d i sviluppo software sicuro e di buone pratiche. Il CSSLP è 
un codice in lingua neutrale e applicabile a chiunq ue sia coinvolto nel SDLC. 
La certificazione è rilasciata dal Consorzio di Cer tificazione Internazionale Information Systems Secu rity, 
(ISC)², un'organizzazione globale no-profit special izzata nella formazione e certificazione di profess ionisti 
della sicurezza informatica. Esso fornisce prodotti  di formazione vendor-neutral. 
 
URL  https://www.isc2.org/csslp/default.aspx   
Contact Method  CSSLP Contact [ https://www.isc2.org/csslp/default.aspx ] 
Web form  
CISSP Contact [ https://www.isc2.org/cissp/default.aspx ] 
Web form  
General Contact [ https://www.isc2.org/contactus/default.aspx ] 
Web form, phone and address  
Country of HQ location  US  
Geographic Scope  International   
Type  Industry (no profit)  
 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 75  a 137  
 
In accordo al (ISC)², il CSSLP è progettato per: 
• Stabilire le migliori pratiche, al fine di limitare  la proliferazione delle vulnerabilità di sicurezza  che 
derivano da processi di sviluppo insufficienti 
• attestare la capacità professionista di mitigare i problemi di sicurezza e dei rischi che circondano l o 
sviluppo di applicazioni in tutto il SDLC, dalla sp ecifica e progettazione alla realizzazione e 
manutenzione  
 
I seguenti domini compongono il CSSLP Common Body o f Knowledge (CBK), che si concentra sulla necessità  
di integrare la sicurezza nel SDLC: 
• Secure Software Concepts: implicazioni di sicurezza  nello sviluppo di software. 
• Secure Software Requirements: catturare i requisiti  di sicurezza nei raccolta dei requisiti di fase 
• Secure Software Design: tradurre i requisiti di sic urezza in elementi di design di applicazioni 
• Secure Software Implementation/Coding: unit testing  per la funzionalità sicurezza e la resilienza 
contro gli attacchi, e lo sviluppo di codice sicuro  e sfruttare la mitigazione 
• Secure Software Testing: test integrati di quality assurance per la funzionalità sicurezza e la 
resilienza contro gli attacchi  
• Software Acceptance: implicazioni per la sicurezza in fase di accettazione del software 
• Software Deployment, Operations, Maintenance and Di sposal: problemi di sicurezza intorno 
operazioni di steady-state e la gestione del softwa re.  
La qualificazione CSSLP è valida per tre anni, dopo  di che deve essere rinnovata. Può essere rinnovata  
rifacendo l'esame o, più comune, con l'acquisizione  di crediti formativi professionali (CPE).  
Il CISSP, un altro programma di certificazione da ( ISC)² con regole simili, è destinato ai professioni sti che 
sviluppano politiche e procedure in materia di sicu rezza delle informazioni. 
 
7.7  Certificazioni ISACA (CISA, CISM, CRISC) 
Le certificazioni ISACA sono accettate e riconosciu te a livello globale e sono destinate al management  IT per 
rafforzare le loro competenze negli ambiti: audit I T, sicurezza, governance e gestione dei rischi. Nel  
dettaglio: 
• Certified Information Systems Auditor (CISA). Certi fica le competenze necessarie ad amministrare e 
controllare l’IT dell’azienda e a compiere un effet tivo audit sulla sicurezza dell’organizzazione. La 
certificazione CISA ha per oggetto le seguenti aree : Processo di audit dei sistemi informatici; IT 
Governance e Management; Acquisizione, sviluppo e i mplementazione dei sistemi informatici; 
Operazioni, mantenimento e supporto dei servizi inf ormatici; Protezione delle risorse informatiche. 
• Certified in Risk and Information Systems Control ( CRISC), prepara e abilita i professionisti IT alle 
sfide IT e alla gestione dei rischi aziendali. La c ertificazione CRISC ha per oggetto le seguenti aree  
della gestione degli IT Risk: Identificazione, e Va lutazione dei Rischi; Risposta ai Rischi; 
Monitoraggio dei rischi; Impostazione e implementaz ione dei controlli IT; Monitoraggio e 
manutenzione dei controlli IT. 
• Certified Information Security Manager (CISM). La c ertificazione CISM ha per oggetto le seguenti 
aree: Governance della sicurezza delle informazioni ; Gestione dei rischi e Conformità; Sviluppo e 
Gestione dei programmi di Sicurezza delle Informazi oni; Capacità di reagire agli incidenti di 
sicurezza. 
 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 76  a 137  
 
La sicurezza IT è indirizzata nella gran parte di q ueste certificazioni, ma non viene data molta enfas i 
all’Ingegneria Secure Software. 
 
URL  https://www.isaca.org/CERTIFICATION/Pages/default.a spx  
Contact Method  General Contact : 
[http://www.isaca.org/About-ISACA/Contact-Us/Pages/d efault.aspx ] 
Web form, phone and address  
Country of HQ location  US  
Geographic Scope  International   
Type  Industry (no profit)  
 
7.8  International Secure Software Engineering Council ( ISSECO) 
ISSECO promuove corsi di formazione sul SSE per ing egneri del software in modo che possano ottenere un o 
standard di certificazione (ISSECO Certified Profes sional for Secure Software Engineering). La certifi cazione 
è fornita dall'Istituto Internazionale Software Qua lity (iSQI) 29 . 
Secondo questa iniziativa, l'attenzione di ISSECO è  sulla produzione di software sicuro e il suo obiet tivo è 
quello di creare un ambiente informatico sicuro per  tutti. Non è focalizzata su specifici linguaggi di  
programmazione. 
 
URL  http://www.isseco.org/index.php?p=content  
Contact Method  ISSECO Contact:  
http://www.isseco.org/index.php?p=contact  
 
ISQUI Contact: https://www.isqi.org/  
Email, phone and address  
Country of HQ location  Germany  
Geographic Scope  National  
Type  Industry (not for profit)  
 
I temi principali della certificazione sono: 
• Viewpoints of attackers and customers 
• Trust and threat models 
• Methodologies 
• Requirements engineering with respect to security 
• Secure design 
• Secure coding 
• Security testing 
• Secure deployment 
• Security response 
• Security metrics 
• Code and resource protection 
                                                           
29  https:// www .isqi.org/ 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 77  a 137  
 
Le attività di questa iniziativa sono supportati da  partner diversi: 
• Supporters (financial aid) 
• Training providers (training material and classes) 
• Certifiers (certification and certificate quality) 
 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 78  a 137  
 
8 SECURE SOFTWARE DEVELOPMENT LIFE CYCLE (SSDLC): ANA LISI 
DELLE METODOLOGIE E DEI PROCESSI 
8.1  Life Cycle & Maturity Models  
8.1.1  Software Assurance Maturity Model (SAMML)  
SAMM è un framework aperto per aiutare le organizza zioni a formulare e attuare una strategia di sicure zza 
software, che più si adatti ai rischi specifici del la particolare organizzazione. Il progetto OpenSAMM , 
un'attività di OWASP, mantiene e aggiorna la docume ntazione SAMM. 
 
References  www.owasp.org/index.php/Categ ory:Software_Assurance_Maturity_ModelOWASP 
SAMM Project  
www.opensamm.orgOpenSAMM  
 
Le risorse fornite da SAMM attraverso il sito web a iutano a: 
• Valutare le pratiche di sicurezza software esistent i di un'organizzazione 
• Costruire un programma software security assurance in iterazioni ben definite 
• Dimostrare miglioramenti concreti al programma di s ecurity assurance 
• Definire e misurare le attività relative alla sicur ezza in tutta l'organizzazione  
 
Essendo un progetto Open, i contenuti SAMM sono lib eramente fruibili. Il modello si basa su 4 funzioni  
aziendali (Governance, Construction, Verification e  Deployment) di sviluppo software e di 12 procedure  di 
sicurezza. Ogni funzione all’interno dello sviluppo  del software prevede tre pratiche di sicurezza: 
• Governance 
o Strategy & Metrics 
o Education & Guidance 
o Policy & Compliance 
• Construction 
o Security Requirements 
o Threat Assessment  
o Secure Architecture 
• Verification 
o Design Review 
o Security Testing 
o Code Review 
• Deployment 
o Environment Hardening 
o Vulnerability Management 
o Operational Enablement 
 
 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 79  a 137  
 
 
 
Figura 14 - SAMM Structure 
 
Per ogni security practice, tre Maturity Levels son o definiti in termini di specifiche attività e metr iche che 
un'organizzazione potrebbe adottare al fine di ridu rre i rischi per la sicurezza e aumentare l’affidab ilità del 
software. 
 
Risultati più rilevanti: 
Maturi ty Model: SAMM 
version 1.0 Il modello è disponibile in format o XML ed è stato tradotto in diverse lingue. 
Nella stessa pagina sono evidenziati i tool a suppo rto:  
http://www.opensamm.org/download/  
 
 
8.1.2  Systems Security Engineering Capability Maturity Mo del (SEE-CMM) 
Il modello SSE-CMM si indirizza sui requisiti per l 'implementazione della sicurezza in un sistema. Le attività 
di ingegneria di sicurezza coprono l'intero ciclo d i vita del sistema (definizione dei concetti, anali si dei 
requisiti, progettazione, sviluppo, integrazione, i nstallazione, manutenzione e disattivazione). L'SSE -CMM si 
applica a tutti i tipi di organizzazioni, a prescin dere dalle loro dimensioni, da quelle commerciali a  quelle di 
carattere governativo o accademico. 
 
URL  http://www.sse -cmm.org   
Country of HQ location  US  
Geographic Scope  International  
Type  Industry (not for profit)  
 
Questo modello ha undici aree di processo di sicure zza ciascuna delle quali comprende un insieme di 
pratiche di base. Queste aree si concentrano sui co ntrolli, sulle minacce, sulla scoperta e sull’elimi nazione 
delle vulnerabilità: 
• Administer Security Controls 
• Assess Impact 
• Assess Security Risk 
• Assess Threat 

  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 80  a 137  
 
• Assess Vulnerability 
• Build Assurance Argument 
• Coordinate Security 
• Monitor Security Posture 
• Provide Security Input 
• Specify Security Needs 
• Verify and Validate Security 
 
Risultati più significativi: 
Maturity Model  Capability Maturity Model - Model Description Document - 
http://all.net/books/standards/ssecmmv3final.pdf   
Standard  ISO/IEC 21827 - http://www.iso.org/iso/catalogue_detail.htm?csnumbe r=44716   
 
8.1.3  Building Security In Maturity Model (BSIMM) 
BSIMM non è una guida completa ‘how to’ di sicurezz a software, ma piuttosto una raccolta di idee e att ività 
che sono oggi in uso all'interno delle aziende di s viluppo software. Il modello Building Security In M aturity 
(BSIMM) è uno studio delle iniziative di sicurezza del software in uso all'interno delle aziende che s i 
occupano di sviluppo software. Mettendo insieme le pratiche di molte organizzazioni diverse, è possibi le 
descrivere le misure comuni, quelle condivise da mo lti, e le peculiarità che rendono unico ogni singol o 
sistema. Il BSIMM è stato creato attraverso un proc esso di comprensione e analisi dei dati del mondo r eale 
provenienti dalle esperienze di numerose aziende. Q uelle che partecipano allo studio BSIMM provengono 
da differenti settori verticali, inclusi i servizi finanziari, il software indipendente, la tecnologia , la sanità, 
l’elettronica di consumo, ecc. Ogni mese al campion e si aggiungono nuove aziende. Nove imprese 
nell’ambito sicurezza software, che sono stati a se guire validati e regolamentati con i dati provenien ti da 21 
aziende aggiuntive. Il BSIMM mette quindi insieme l e esperienze di trenta imprese di sviluppo software  - la 
maggior parte di essi si trovano negli Stati Uniti - che hanno implementato iniziative di sicurezza de l 
software. 
 
URL  https://www.bsimm.com/  
Country of HQ location  US  
Geographic Scope  Inter national (mainly the US)  
Type  Industry  
 
BSIMM ha sviluppato il https://www.bsimm.com/  (SSF), che fornisce un vocabolario comune per desc rivere 
gli elementi più importanti di un quadro di sicurez za software all'interno di una società. 
Sono stati identificati quattro domini e pratiche c omuni alla maggior parte delle esperienze. Il BSIMM  
descrive 109 attività che ogni organizzazione può m ettere in pratica. Le attività sono descritte in te rmini di 
SSF, che identifica dodici pratiche raggruppati in 4 domini, 3 pratiche di dominio, come mostrato nell a 
figura presa dal documento BSIMM2: di funzionalità,  all’interno dei quali sono previste delle attività  da 
svolgere. 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 81  a 137  
 
 
 
Figura 15 - BSIMM SSF 
 
Per ogni livello di pratica e di maturità vi è un'a ssociazione “one activity - one objective”. I domin i sono: 
1.  Governance - Pratiche che aiutano a organizzare, ge stire e calibrare un framework di sicurezza del 
software. Anche l’addestramento del personale è una  pratica da far rientrare nella governance 
centrale. 
2.  Intelligence - Un insieme di conoscenze aziendali u tili per svolgere attività di sicurezza del softwar e 
all'interno di un'organizzazione; comprende sia ind icazioni proattive sulla sicurezza che modelli di 
organizzazione delle minacce.  
3.  SSDL Touchpoints - Pratiche associate all'analisi e  alla sicurezza di particolari sviluppi software, 
artefatti e processi. Tutte le metodologie di sicur ezza del software includono queste pratiche.  
4.  Deployment - Pratiche che si rifanno alla sicurezza  della rete tradizionale e alla manutenzione del 
software. La configurazione del software, la manute nzione e altri problemi ambientali hanno un 
impatto diretto sulla sicurezza. 
 
Il modello di maturità si presenta come una serie d i attività connesse con le pratiche. Gli obiettivi per ogni 
livello di pratica sono identificati. Gli obiettivi  possono essere ulteriormente suddivisi in obiettiv i per la 
pratica/livello e sono associati alle attività. A t itolo di esempio, la figura seguente, tratta dal do cumento 
BSIMM2, mostra il modello di maturità per la pratic a di addestramento del dominio Governance. 

  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 82  a 137  
 
 
Figura 16 - Training practice BSIMM 
 
Risultati più rilevanti: 
Maturity Model  BSIMM2 - https://www.bsimm.com/download/    
 
8.2  Analisi dei Processi SSDLC 
8.2.1  McGraw’s Secure Software Development Life Cycle Pro cess 
McGraw 30  [1] si propone di accrescere il processo SDLC (cas cata o iterativo) attraverso l’integrazione di 
alcune attività SSD. In sostanza, il processo di Mc Graw si focalizza su:  
• incorporazione dei requisiti di sicurezza,  
• esecuzione dell’analisi dei rischi durante le diver se fasi di sviluppo,  
• applicazione di metodi di security assurance quali test di sicurezza risk-based,  
• analisi statica e test di penetrazione.  
 
Il processo suggerisce anche di utilizzare l'analis i dei rischi durante la fase di progettazione. Per la fase di 
security assurance, McGraw suggerisce di utilizzare  gli abuse cases e i requisiti di sicurezza per gui dare i test 
di penetrazione. 
 
                                                           
30  G. McGraw, Software Security: Building Security In,  Addison Wesley, 2006  

  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 83  a 137  
 
8.2.2  Microsoft Software Development Life Cycle (MS SDL) 
MS SDL è un modello che pone molta attenzione alla fase di specifica dei requisiti durante la quale pr evede 
di interagire con il cliente (end-user), al fine di  identificare gli obiettivi e le caratteristiche di  sicurezza 
necessarie.  
L'incorporazione di queste caratteristiche/funziona lità di sicurezza sono guidate da standard di setto re e 
criteri di certificazione. Durante la fase di proge ttazione MS SDL suggerisce di svolgere le seguenti attività: 
l'identificazione dei componenti critici per la sic urezza, l'identificazione di tecniche di progettazi one e linee 
guida, l'identificazione dei punti di accesso degli  attacchi, la modellazione delle minacce e analisi del rischio 
componente per componente, l'identificazione dei re quisiti di sicurezza per mitigare le minacce, 
l'identificazione dei componenti che necessitano di  particolare attenzione durante le fasi di test e r eview 
del codice, e i criteri per il completamento del so ftware. 
 
 
Figura 17 - Microsoft SDL 
 
MS SDL consiglia di seguire gli standard di secure coding nella fase di implementazione. L'accento è p osto 
su:  
• test specifici di sicurezza,  
• analisi statica del codice utilizzando i tool SDL u tili a tale scopo,  
• revisione del codice (code review) nell’ultimo step  della fase di implementazione. Terminata la fase 
di implementazione, il software completo viene nuov amente verificato attraverso un ulteriore test 
di sicurezza che si concentra principalmente sui co mponenti critici (si esaminano ad esempio, i 
punti di ingresso alle possibili aree di attacco). 
 
URL  https://www.microsoft.com/en -us/securityengineering/sdl  
Contact  https://support.microsoft.com/it -it/contactus/?ws=mscom#tab0  
Email, chat, phone and address  
Country of HQ location  US  
Geographic Scope  International  
Type  Industry (Microsoft)  
 
Risultati più rilevanti: 
Guidance  Microsoft SDL Process Guidance  
Questa guida illustra il modo in cui Microsoft appl ica il SDL ai suoi prodotti e 
tecnologie. Include requisiti di sicurezza e privac y e raccomandazioni per lo sviluppo di 
software sicuro. Si rivolge ai modelli di sviluppo Cascade, Spiral, Agile. I responsabili 
delle politiche IT e le organizzazioni di sviluppo software possono sfruttare questi 

  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 84  a 137  
 
contenuti per migliorare l’aspetto di sicurezza e d i privacy.  
Microsoft SDL for Agile Development  
 
Microsoft SDL for Line -of -Business Applications  
 
The Security Development Lifecycle  
Fornisce una guida attraverso ogni fase della SDL, dall'istruzione e progettazione alla 
sperimentazione e post-rilascio. Gli autori sono es perti di sicurezza del team Microsoft 
Security Engineering. 
Simplified Implemen tation of the Microsoft SDL  
Questo documento illustra i concetti chiave e le si ngole attività di sicurezza che 
devono essere eseguite per la conformità con il pro cesso Microsoft SDL. Gli aspetti da 
tenere in considerazione includono ruoli e responsa bilità, attività di sicurezza 
obbligatorie, attività di sicurezza opzionali e pro cesso di verifica della sicurezza 
dell'applicazione. 
SDL Quick Security Reference (QSR)  
Con SDL QSR, il team SDL introduce una serie di doc umenti di orientamento di base, 
progettati per affrontare le vulnerabilità comuni, dal punto di vista di molteplici ruoli 
aziendali: decisori aziendali, architetti, sviluppa tori e tester / QA. 
Securing Applications  
Questa documentazione è rivolta agli sviluppatori d i .NET Framework per la scrittura 
di codice sicuro. Comprende: concetti chiave sulla sicurezza, sicurezza dell'accesso al 
codice, sicurezza basata sui ruoli, servizi crittog rafici, gestione delle politiche di 
sicurezza, best practice sulle politiche di sicurez za, linee guida per la codifica sicura e 
strumenti di sicurezza. 
Tools  
& Templates Microsoft SDL Threat Modeling Tool  
La modellazione delle minacce consente agli archite tti di software di identificare e 
mitigare tempestivamente potenziali problemi di sic urezza, quando risolverli è 
relativamente facile ed economico. È uno strumento gratuito che richiede Visio. Lo 
strumento è focalizzato sulle tecniche di analisi d el progetto. 
Microsoft SDL Process Template  
Un modello scaricabile che incorpora automaticament e la policy, il processo e gli 
strumenti associati a SDL nell'ambiente di sviluppo  software di Visual Studio. 
MSF -Agile+SDL Process Template  
Un modello scaricabile che incorpora automaticament e la policy, il processo e gli 
strumenti associati alla guida allo sviluppo di SDL  per Agile, nel Microsoft Solutions 
Framework per lo sviluppo di software Agile (MSF-Ag ile) e nell'ambiente Visual Studio.  
The Microsoft SDL Tools  
Una mappa degli strumenti e dei modelli gratuiti di sponibili per ogni fase SDL. 
 
8.2.3  Appropriate and Effective Guidance for Information Security (AEGIS) 
AEGIS 31 32  [2] [3] è un processo SSDLC basato sul modello a s pirale e si concentra sulla specifica dei requisiti  
di sicurezza, identificando gli elementi principali  ed eseguendo l’analisi dei rischi. Le fasi di anal isi dei 
                                                           
31  I. Flechais, M.A. Sasse, and S.M.V. Hales, “Bringi ng Security Home: A Process for Developing Secure a nd Usable Systems,” In Proc. 
of the New Security Paradigms Workshop (NSPW’07), Asc ona, Switzerland, ACM Press, 2003, pp. 49-57. 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 85  a 137  
 
requisiti e di disegno sono strettamente collegati.  Il modello propone quattro sessioni di progettazio ne tra 
gli sviluppatori e gli stakeholders del software. L a prima e la seconda sessione modellano le caratter istiche 
principali del software e le loro relazioni, identi ficando i requisiti di alto livello di riservatezza , integrità e 
disponibilità.  Nella terza sessione vengono identi ficati rischi, vulnerabilità e minacce per il softw are. La 
quarta sessione, orientata alla progettazione, indi ca i requisiti di sicurezza per rimuovere le vulner abilità 
identificate. 
AEGIS suggerisce anche una metodologia di analisi d ei rischi da utilizzare durante le sessioni 3 e 4 f inalizzate 
alla progettazione. Questo metodo di analisi dei ri schi ha le seguenti fasi principali: 
• Determinazione delle vulnerabilità. 
• Determinazione del costo e della probabilità di un attacco in ambiente distribuito (inclusi i ruoli 
delle persone coinvolte e i task che verranno esegu iti sul software). 
• Selezione dei requisiti di sicurezza basate sulle i ndicazioni dell’esperto di sicurezza. 
• Valutazione costi-benefici dei requisiti di sicurez za selezionati. 
• Il confronto tra il costo di ogni attacco, commisur ato con la probabilità che possa verificarsi, e il 
costo dei requisiti di sicurezza. 
• Selezione dei requisiti di sicurezza sulla base del l’efficacia e dei costi. 
 
8.2.4  Secure Software Development Model (SSDM) 
SSDM 33  è un processo che incorpora diverse attività di si curezza in un modello SDLC a cascata (cascade). 
Secondo SSDM, la modellazione delle minacce dovrebb e essere eseguita in fase di specifica dei requisit i. Il 
risultato di questa modellazione dovrebbe essere un a check-list contenente tutte le potenziali vulnera bilità 
e attacchi. Tali elenchi di fatto dovrebbero essere  dati in input alla fase di sviluppo. 
Dopo la modellazione delle minacce, è necessario de finire una policy che indichi chiaramente come 
saranno raggiunti gli obiettivi di sicurezza prefis sati. 
Tale policy, come sottolineato dal SSDM, è un insie me di decisioni di gestione di alto livello come ad  
esempio minimizza l’impatto degli errori in tutto i l processo di sviluppo, correggendoli non appena ve ngono 
rilevati. I test di penetrazione rappresentano, nel  modello SSDM, l’unica attività SSD per la fase sec urity 
assurance. 
 
8.2.5  Aprville and Pourzandi’s Secure Software Developmen t Life Cycle Process 
[4]Aprville e Pourzandi 34  propongono un processo SSDLC sulla base della loro  esperienza, maturata durante 
lo sviluppo di un software di instant messaging. Se condo il loro processo [5], il primo passo nella fa se di 
specifica dei requisiti è quello di individuare gli  obiettivi di alto livello, per quanto riguarda la sicurezza 
(riservatezza, integrità e disponibilità) del softw are in fase di sviluppo, considerando il suo ambien te di 
distribuzione. Per gli obiettivi di sicurezza a bas so livello, la modellazione delle minacce dovrebbe essere di 
supporto nella costruzione di un insieme di requisi ti di sicurezza. La priorità di tali requisiti può essere 
                                                                                                                                                                                                 
32  I. Flechais, C. Mascolo, and M.A. Sasse, “Integrat ing Security and Usability into the Requirements an d Design Process,” 
International Journal of Electronic Security and Di gital Forensics, Inderscience Publishers, Geneva, S witzerland, 2007, vol. 1, no. 1, 
pp. 12-26. 
33  A.S. Sodiya, S.A. Onashoga, and O.B. Ajayi, “Towar ds Building Secure Software Systems,” Issues in Inf orming Science and 
Information Technology, Informing Science Institute , California, USA, 2006, vol. 3, pp. 635-646.  
34  A. Apvrille and M. Pourzandi, “Secure Software Dev elopment by Example,” IEEE Security and Privacy, IE EE CS Press, 2005, vol. 3, 
no. 4, pp. 10-17. 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 86  a 137  
 
modificata in base ai risultati dell'analisi del ri schio. In fase di progettazione, si raccomanda l’us o di 
[6]UMLsec 35 . Per la fase di implementazione, si suggerisce di scegliere un linguaggio di programmazione 
che meglio soddisfa gli obiettivi di sicurezza. Ino ltre, particolare attenzione deve essere posta su c ome 
evitare: (i) buffer overflow, (ii) format string vu lnerabilities. Essi sottolineano di utilizzare per la crittografia 
algoritmi già verificati. Per la fase di security a ssurance vengono indicate le seguenti attività: sta tic 
vulnerability code scanning, code reviews, ad-hoc u nit e system security testing, fuzz testing. 
8.2.6  Secure Software Development Model (SecSDM) 
SecSDM 36  utilizza l'analisi dei rischi nella fase di specif ica dei requisiti al fine di dare priorità alla 
modellazione delle minacce. Gli obiettivi di sicure zza di alto livello quali la riservatezza, l'integr ità e la 
disponibilità sono poi identificati sulla base dell e minacce rilevate [7]. 
In fase di progettazione, vengono identificate e se lezionate le funzionalità di sicurezza per mitigare  le 
minacce e raggiungere gli obiettivi di sicurezza. S ecSDM propone di seguire standard di secure coding 
durante la fase di implementazione. 
8.2.7  Software Security Assessment Instrument (SSAI) 
SSAI 3738  raggruppa un insieme di attività che utilizzano de terminate risorse e strumenti per lo sviluppo di 
software sicuro. [8] [9] La prima risorsa che SSAI fornisce è un database online 39  che contiene informazioni 
sulle varie vulnerabilità e le indicazioni per la l oro mitigazione. [10] La seconda risorsa SSAI è una  security 
checklist che può essere sviluppata e utilizzata co me guida per lo sviluppo sicuro. Sono forniti i det tagli di 
come redigere una checklist e quali sono gli elemen ti potenziali che possono essere inclusi 40 . La terza 
risorsa è un elenco di strumenti accessibili pubbli camente, per la scansione statica del codice. SSAI fornisce 
anche Flexible Modeling Framework (FMF), uno strume nto di modellazione e il property-based testing too l 
(PBT), che utilizza le proprietà di sicurezza speci ficate nella security checklist o nel FMF come base  dei test 
per il software. 
8.2.8  Hadawi’s Set of Secure Development Activities 
Hadawi 41  identifica 25 vulnerabilità (common vulnerabilitie s) da evitare durante lo sviluppo [11]. Egli 
propone anche una serie di requisiti di sicurezza p er le fasi di progettazione e implementazione che, se 
adottati, aiuterebbero ad evitare queste vulnerabil ità [12]. 
                                                           
35  J. Juerjens, Secure Systems Development with UML, Springer, 2005. 
36  L. Futcher and R.v. Solms, “SecSDM: A Model for In tegrating Security into the Software Development Li fe Cycle,” In IFIP 
International Federation for Information Processing , Volume 237, Proc. of the 5th World Conference on Inf ormation Security 
Education, Springer, 2007, pp. 41-48. 
37  D.P. Gilliam, T.L. Wolfe, J.S. Sherif, and M. Bish op, “Software Security Checklist for the Software L ife Cycle,” In Proc. of the 12th 
IEEE International Workshops on Enabling Technologi es: Infrastructure for Collaborative Enterprises (W ETICE’03), Linz, Austria, IEEE 
CS Press, 2003, pp. 243-248. 
38  D. Gilliam, J. Powell, E. Haugh, and M. Bishop, “A ddressing Software Security Risk and Mitigations in  the Life Cycle,” In Proc. of 
the 28th Annual NASA Goddard Software Engineering Wor kshop (SEW’03), Greenbelt, Maryland, USA, 2003, pp. 201-206. 
39  DOVES: Database of Vulnerabilities, Exploits, and Signatures, http://seclab.cs.ucdavis.edu/projects/D OVES/. Last Accessed March 
2009. 
40  D.P. Gilliam, T.L. Wolfe, J.S. Sherif, and M. Bish op, “Software Security Checklist for the Software L ife Cycle,” In Proc. of the 12th 
IEEE International Workshops on Enabling Technologi es: Infrastructure for Collaborative Enterprises (W ETICE’03), Linz, Austria, IEEE 
CS Press, 2003, pp. 243-248.  
41  M.A. Hadawi, “Vulnerability Prevention in Software  Development Process,” In Proc. of the 10th Internat ional Conference on 
Computer & Information Technology (ICCIT’07), Dhaka,  Bangladesh, 2007, 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 87  a 137  
 
Durante la fase di implementazione, l'unica attivit à SSD è la scelta di un appropriato linguaggio di 
programmazione (sicuro). Per la fase di security as surance, Hadawi consiglia di utilizzare: (i) securi ty code 
reviews, (ii) static code analysis tools.   
8.2.9  Comprehensive, Lightweight Application Security Pro cess (CLASP) 
Comprehensive, Lightweight Application Security Pro cess (CLASP) 42  identifica un insieme di attività SSD 
classificate in base ai ruoli svolti durante lo svi luppo. CLASP suggerisce l’impiego di un esperto di sicurezza 
fin dall'inizio dello sviluppo. Per la fase di spec ifica dei requisiti, sottolinea la necessità di un’ analisi dei rischi 
e della modellazione delle minacce. L'analisi dei r ischi e la modellazione delle minacce devono essere  
eseguite anche nella fase di progettazione. 
CLASP propone di annotare i diagrammi di classe con  le informazioni di sicurezza. Nella fase di securi ty 
assurance, consiglia di effettuare le seguenti oper azioni: security code reviews, security code scanni ng, 
security testing.  
CLASP fornisce anche un elenco di vulnerabilità (co mmon vulnerabilities) con informazioni complete su 
come e quando possono essere introdotti durante lo sviluppo e come evitarli. 
 
URL  https://www.owasp.org/index.php/CLASP_Concepts  
 
Risultati più rilevanti: 
Security Process  CLASP version 1.2  
 
8.2.10  Secure Software Development Process Model (S2D-ProM ) 
S2D-PROM 43  specifica molteplici strategie possibili per avanz are da ogni fase di sviluppo all’altra [13]. Alla 
base di questo processo, c’è l’idea di fornire agli  sviluppatori opzioni flessibili. Il processo si pr opone di 
condurre l'analisi dei rischi durante le fasi di sp ecifica dei requisiti, progettazione, e implementaz ione. 
L'analisi del rischio, secondo S2D-PROM, può essere  eseguita in modi diversi per ogni fase di sviluppo . I 
rischi identificati possono essere mitigati utilizz ando varie strategie (ad esempio, definendo le norm e di 
sicurezza o utilizzando meccanismi di difesa).  
 
8.2.11  Team Software Process for Secure Software Developme nt (TSP Secure) 
[14]TSP-Secure 44  garantisce la sicurezza attraverso:  
• la pianificazione per la sicurezza,  
• la qualità e la gestione della sicurezza in tutto i l ciclo di vita dello sviluppo,  
• la formazione degli sviluppatori circa gli aspetti relativi alla sicurezza.  
 
                                                           
42  https://www.owasp.org/index.php/CLASP_Concepts 
43  M. Essafi, L. Labed, and H.B. Ghezala, “S2D-ProM: A  Strategy Oriented Process Model for Secure Softwar e Development,” In Proc. 
of the 2nd International Conference on Software Engi neering Advances (ICSEA’07), Cap Esterel, French Rivi era, France, 2007, p. 24. 
44  N. Davis, “Secure Software Development Life Cycle Processes: A Technology Scouting Report”, technical  note CMU/SEI-2005-TN-
024, Software Engineering Institute, Carnegie Mellon U niversity, Pittsburgh, Pennsalyania, USA, 2005.  
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 88  a 137  
 
Durante la fase di progettazione, il team identific a obiettivi di sicurezza e produce un piano dettagl iato 
come guida per lo sviluppo. Le attività di sviluppo  possono includere l’identificazione dei rischi, 
l’identificazione dei requisiti di sicurezza, la pr ogettazione sicura, le revisioni del codice, gli un it test, i fuzz 
test e l’analisi statica del codice. Il team può sc egliere qualsiasi attività SSD che ritiene necessar ia.  
Secondo TSP-Secure, un membro del team svolge il ru olo di responsabile della sicurezza, facendosi cari co di 
tutte le problematiche relative alla sicurezza.  
 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 89  a 137  
 
9 LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO SOFTWARE 
SICURO 
Negli ultimi anni, un numero considerevole di appli cazioni e sistemi hanno dovuto affrontare gravi min acce 
alla sicurezza a causa di un significativo incremen to nell’impiego di nuove tecnologie disponibili e n el 
contempo della mancanza di conoscenza e di tecniche  di indagine che riguardano la sicurezza informatic a. 
In passato, le problematiche in materia di sicurezz a riguardavano essenzialmente i livelli dell'infras truttura 
di rete. Attualmente, a causa del crescente utilizz o delle reti e della dominanza del concetto di Inte rnet, 
come il cloud computing, Software as a Service (Saa S), gli aggressori stanno scoprendo sempre più la 
presenza di gravi vulnerabilità nel livello applica tivo del software.  
Il concetto di sicurezza a livello di applicazione è quindi emerso come una attività essenziale da int egrare 
nel processo di sviluppo del software. 
La sicurezza dell'informazione richiede una partico lare attenzione a causa di un gran numero di 
vulnerabilità individuate nelle applicazioni/sistem i dichiarate come sicure. Sono ben note la compless ità e 
la difficolta nel realizzare un’applicazione priva di difettosità e/o vulnerabilità, tuttavia, le orga nizzazioni 
che producono hardware e software non possono asten ersi nel migliorare i propri processi di sviluppo e  
adattarli agli attuali scenari. Oltre alle numerose  pubblicazioni di ricercatori accademici e industri e del 
software che evidenziano l’importanza di integrare pratiche di sicurezza nel System Development Life C ycle 
(SDLC), esiste un paradosso nell’effettiva implemen tazione. La maggior parte dei centri di sviluppo no n 
attua le raccomandazioni di cui sopra a causa della  resistenza ai nuovi processi e al mancato adeguame nto 
di mentalità da parte degli attori che operano nell ’ambito del SDLC. E' anche solita una certa resiste nza da 
parte d’ingegneri e sviluppatori nell’accettare che  il software/hardware da loro realizzato possa esse re 
soggetto a difetti di sicurezza. Anche i team di sv iluppo oramai comprendono l'importanza di un nuovo 
paradigma di sicurezza per il SDLC, anche se, purtr oppo, ciò non è sufficiente.  
Per raggiungere i livelli di sicurezza adeguati, è necessaria una conoscenza approfondita e dettagliat a delle 
procedure e delle tecniche di sicurezza da adottare : una Security Policy completa è il giusto riferime nto per 
guidare lo sviluppo della sicurezza e tutti gli att ori coinvolti come gli ingegneri hardware, sviluppa tori, 
architetti applicativi, ingegneri software, collaud atori e project leader devono considerarla come una  regola 
imprescindibile.  
Questa deve stabilire le opportune indicazioni per ciascuna fase di sviluppo: requisiti, 
progettazione/architettura, implementazione, collau do e manutenzione, e deve definire le responsabilit à 
per tutti i ruoli coinvolti nel processo di svilupp o. Deve inoltre, stabilire le regole per la definiz ione dei 
requisiti di fase abilitando i principi di sicurezz a, come la sicurezza delle informazioni, integrità,  privacy, 
riservatezza, disponibilità delle informazioni, con tinuità, in base all’ambiente e alle minacce pubbli che che 
possono in qualche modo coinvolgere il sistema.  
Al fine di dare copertura agli aspetti di sicurezza  è necessario riunire i team di business, di svilup po e di 
sicurezza per comprendere le principali vulnerabili tà e le conseguenze sul business causate dal rischi o 
dovuto alla presenza di difetti di sicurezza nella versione finale del prodotto. Poiché il SDLC è un p rocesso di 
“feed forward” come tale, eventuali errori introdot ti in questa fase, saranno poi diffusi nelle fasi s uccessive. 
Per questo motivo è importante analizzare i rischi per la sicurezza sin dalle primissime fasi del cicl o di 
sviluppo del software. 
L'analisi dei requisiti, rappresenta il primo passo  nell'SDLC. Attraverso questo, vengono identificati  e definiti 
gli obiettivi delle specifiche di sicurezza, i meto di necessari per implementarle e l'importanza che q ueste 
ricoprono. I requisiti di sicurezza definiscono i r equisiti funzionali e non funzionali che devono ess ere 
soddisfatti per ottenere le caratteristiche di sicu rezza di un sistema IT.  Tali requisiti possono ess ere 
formulati a diversi livelli di astrazione; al più a lto livello, riflettono fondamentalmente solo gli o biettivi di 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 90  a 137  
 
sicurezza. Un esempio di obiettivo di sicurezza pot rebbe essere "Il sistema deve mantenere la riservat ezza 
di tutti i dati classificati come riservati".  
I requisiti di sicurezza possono essere distinti in  quattro diverse tipologie: 
 
1.  Requisiti funzionali sicuri : che descrivono i criteri di sicurezza integrati i n ciascun requisito 
funzionale. Tipicamente indicano anche ciò che non deve accadere. Questi possono ad esempio 
essere derivati da casi di uso improprio. 
2.  Requisiti di sicurezza funzionale : definiscono i servizi di sicurezza che devono ess ere implementati 
nel sistema sottoposto ad analisi. Alcuni esempi so no l'autenticazione, l'autorizzazione, il backup, i l 
server-clustering, ecc. Questi possono essere deriv ati dalle best-practices di sicurezza, dalle 
politiche adottate e dalle eventuali norme che il s istema stesso deve rispettare. 
3.  Requisiti di sicurezza non funzionali : trattasi di requisiti architetturali legati alla sicurezza, come “la 
robustezza" o "le prestazioni minime e la scalabili tà". Questa specifica tipologia di requisiti è 
tipicamente derivata dai principi architetturali di  secure-design e dagli standard in tale ambito. 
4.  Requisiti di sviluppo sicuro : descrivono le attività richieste durante lo svilu ppo del sistema al fine di 
garantire che il sistema stesso nella sua versione finale sia esente da vulnerabilità. Alcuni esempi 
possono essere la "classificazione dei dati", le "l inee guida di sviluppo sicuro” o la “metodologia di  
test”. Tali requisiti sono derivati da framework me todologici basati su best-practices come "CLASP". 
Tutti i requisiti di sicurezza devono essere identi ficati dall'analista e analizzati dal team di sicur ezza come 
parte dei requisiti funzionali e quindi aggiunti ne l documento "Specifica dei requisiti di sicurezza",  in una 
sezione dei requisiti di sistema o dei requisiti so ftware. Di seguito si riportano alcune delle voci c he 
dovrebbero essere presenti nel documento in questio ne: 
• Descrizione del prodotto  o sistema e relativo scopo. Definisce il perimetro  del prodotto, in termini 
generali, sia in modo fisico sia logico. 
• Ambiente operativo : definizione dei vincoli di sicurezza previsti per  l'ambiente operativo al fine di 
facilitare l'identificazione e la formulazione dell e premesse sull'uso previsto del prodotto. L'analis ta 
deve valutare l'uso dell'ambiente in cui opera il p rodotto per verificare se il comportamento 
dell'utente può in qualche modo compromettere la si curezza del prodotto stesso. A volte sarebbe 
necessario definire i criteri di protezione del pro dotto e del suo ambiente operativo da adottare. 
• Funzioni di sicurezza di base : descrizione delle features essenziali per impleme ntare le necessarie 
politiche di sicurezza organizzativa. 
• Livello di garanzia della sicurezza : tutti i prodotti devono avere un “Software Securi ty Assurance” e 
questo, deve necessariamente essere incluso nel doc umento di specifica dei requisiti di sicurezza. 
• Requisiti normativi : definizione dei requisiti normativi che il prodot to, lì dove applicabile, deve 
rispettare. 
 
9.1  Definizione dei requisiti di sicurezza 
I principali obiettivi di sicurezza da definire son o: 
• Riservatezza e Integrità.  I due più importanti aspetti della sicurezza sono Riservatezza e Integrità. 
La Riservatezza significa che le risorse possono es sere utilizzate solo dalla parte legittima. L'integ rità 
dei dati significa che devono essere modificabili s olo dalle persone autorizzate. 
• Autenticità.  Il terzo requisito di sicurezza principale è l'Aut enticità: Message authenticity  (o data  
origin authenticity) ed entity authenticity.  
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 91  a 137  
 
• Non-ripudio. Garantisce che qualsiasi azione sul sistema non pos sa essere in seguito rinnegata. 
• Flusso Informativo . Il livello di sicurezza può avere regole diverse.  Generalmente si considerano 
due livelli: alto (altamente sensibile o altamente attendibile) e basso (meno sensibile o meno 
attendibile). Laddove componenti di sistema conside rati di alto livello interagiscono con parti meno 
attendibili, si deve garantire che non vi sia alcun o scambio di dati dall’alto verso il basso (vale 
invece il contrario ossia ci può essere lo scambio di dati dal basso verso l’alto non up-flow ). 
• Controllo Accessi . Uno dei requisiti di sicurezza principali è il co ntrollo degli accessi, il che significa 
che solo un utente fidato può avere accesso a un si stema sicuro. Il Role-Based Access Control 
(RBAC) assicura  un meccanismo di controllo degli accessi per tutela re i beni. I privilegi di accesso 
alle risorse dipendono dal ruolo che assumono nel t empo gli individui all'interno 
dell'Organizzazione. Ai ruoli sono associati profil i che definiscono comandi, transazioni e accessi ai  
dati. L'assegnazione dei ruoli è centralizzata. ABAC  (Attribute Based Access Control) fornisce i diritt i 
di accesso in base agli attributi dell'utente, dell e risorse a cui si accede e dell'ambiente (contesto  
operativo, tecnico e persino situazionale in cui si  verifica l'accesso alle informazioni). Gli attribu ti 
sono insiemi di etichette o proprietà che possono e ssere utilizzati per descrivere tutte le entità che  
devono essere considerate ai fini dell’autorizzazio ne. Le regole di sicurezza possono essere definite 
per una qualsiasi combinazione di attributi, offren do la possibilità di creare regole specifiche per 
particolari risorse. Questa caratteristica rende AB AC particolarmente indicato per essere adottato 
nei sistemi che richiedono un controllo di accesso granulare come l’Internet of Things.  
 
Le principali azioni di sicurezza da attuare sono:  
• Definizione degli elementi di sicurezza applicativa , finalizzata alla valutazione dei requisiti 
relativamente a :  
o Integrità,  
o Autenticità,  
o Riservatezza,  
o Disponibilità,  
o Non-ripudio,  
o Autorizzazione.  
• Definizione dei requisiti di privacy , attraverso la raccolta strutturata delle seguenti  categorie di 
informazioni:   
o Dati personali,  
o Servizi di terze parti,  
o Policy. 
• Risk assessment , finalizzato alla valutazione del rischio (vedi Pa ragrafo6.2). In questa fase viene 
definito un profilo di rischio per l’applicazione c he include: aree sensibili del software e aree che 
presentono superfici di attacco suscettibili a dete rminate minacce; aree del codice ad alto rischio 
che possono essere vulnerabili a diverse minacce. V iene condotta quindi, una fase critica di 
comprensione, analisi e classificazione dei vari ri schi per l’applicazione. Durante questo processo è 
utile classificare i vari rischi utilizzando divers i framework di sicurezza quali: OWASP Top 10, SANS 
CWE Top 25 o OWASP ASVS.   
o Consolidamento dei Requisiti , review dei requisiti di sicurezza e privacy a seg uito del Risk 
Assessment; 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 92  a 137  
 
• A completamento di questa fase è necessario produrr e la Reportistica/documentazione completa 
che sintetizza i risultati per ogni punto precedent e. 
 
 
Figura 18 - Input e Output della fase Risk Assessmen t 
 
Si evidenzia che in questa fase devono essere tenut i in considerazione anche gli aspetti di integrazio ne e di 
interfaccia con eventuali altri moduli dell’ecosist ema software. Inoltre vanno considerati i requisiti  di 
sicurezza applicativa di carattere generale: Perfor mance, Password nel codice sorgente, Privilegi esec utivi 
minimi, Fattore di integrità, Input data validation , Gestione dell’output, etc. (per ulteriori dettagl i si rinvia al 
al paragrafo 4.1  “Progettazione e sviluppo dell’Ap plicazione: direttive standard” del documento Allegato 2 
- Linee Guida per lo sviluppo sicuro di codice ). Tali requisiti di sicurezza applicativa devono e ssere mutuati 
in questa fase sulla base dei requisiti, funzionali  e non funzionali, individuati.  
 
9.1.1  Identificazione degli strumenti a supporto 
Nel paragrafo 6.3.2 è stato presentato lo stato del l’arte dei tool a supporto di questa fase. Di segui to viene 
fornito un esempio di approccio metodologico per la  valutazione dei tool. 
La baseline comparativa è costituita da 8 parametri  (Software Security Requirements). I tool vengono 
analizzati sulla base di questi parametri. Il risul tato è illustrato nella tabella che segue: 
 
Tools Fair 
Exchange Non- 
repudiation Rbac Secrecy &  
Integrity Authenticity Secure 
Informat. 
Flow Guarded 
Access Freshness 
RequisitePro √ X X X X X X √ 
CaseComplete √ X X X X X X √ 
Analyst Pro √ X √ X √ X X X 
DOORS √ X √ X √ X √ √ 
Objectiver X X X X X X X √ 
RDT X X X X X X X √ 
RDD-100 √ X X X X X X √ 
RTM X X √ √ √ X √ √ 
Reqtify √ X X X X X X √ 
TcSE X √ √ √ √ √ √ √ 
Atlas X √ √ √ √ √ √ √ 
Visure RMT X X √ X X X X X 
 

  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 93  a 137  
 
9.2  Progettazione di applicazioni sicure 
Le azioni di sicurezza di questa fase possono esser e così sintetizzate :  
• Analisi e modellazione delle minacce , attraverso l’identificazione dei componenti appli cativi coinvolti, 
delle interfacce e degli agenti che potrebbero mina cciare il sistema;  
• Analisi della superficie d’attacco e della finestra  di opportunità,  allo scopo di individuare le parti del 
sistema che possono essere esposte ad attacchi e pe rtanto lo rendono vulnerabile;   
• Piano di mitigation, attraverso l’identificazione delle contromisure da adottare in questa fase al fine di 
mitigare le potenziali minacce individuate (utilizz ando anche tool automatici e semiautomatici);  
• Secure Design Refactoring , revisione progettuale che attua le contromisure i ndividuate; produzione di 
un High Level Design conforme ai principi del Secur e by Design;  
• Questa fase produce come output finale la Reportist ica/documentazione completa che sintetizza i 
risultati per ogni punto precedente (Specifiche Sof tware comprensive delle contromisure). 
Questa fase è inoltre responsabile della revisione dei requisiti di sicurezza individuate nella fase p recedente 
di definizione dei requisiti di sicurezza (paragraf o 9.1).  
La figura che segue sintetizza gli elementi in inpu t e l’output prodotto dal processo di Progettazione  di 
software sicuro: 
 
 
Figura 19 - Input e Output della fase Threat Modelin g Attack Surface Analysis 
Le linee guida di progettazione sicura sono oggetto  del documento Allegato 4 -  Linee Guida per la 
modellazione delle minacce ed individuazione delle azioni di mitigazione conformi ai principi del 
Secure/Privacy by Design . Si rinvia a quest’ultimo per ulteriori dettagli d ella metodologia da adottare. 
 
9.2.1  Identificazione degli strumenti a supporto 
Dopo aver identificato e documentato le esigenze di  sicurezza, viene eseguita la modellazione delle 
minacce col fine di riconoscere e assegnare delle p riorità a queste ed individuare le opportune 
contromisure per la loro mitigazione. A differenza delle tecniche di verifica, come ad esempio il pene tration 
testing, il modello di minacce ottenuto attraverso la relativa modellazione, deve essere eseguito prim a che 
un prodotto o un servizio venga implementato. Quest o contribuisce a realizzare un prodotto finale più 
sicuro indirizzando problematiche di sicurezza ad u n early-stage del ciclo di sviluppo. Il processo pe r la 
costruzione di un modello di minacce consiste dei s eguenti step: 
• Disegno dell'architettura del sistema; 
• Individuazione dei confini di fiducia; 
• Identificazione delle minacce; 
• Individuazione delle contromisure da attuare per mi tigare le minacce; 
• Eventuale riprogettazione dei componenti per mitiga re le minacce; 

  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 94  a 137  
 
• Convalida del modello architetturale; 
• Verifica dell’esistenza di una contromisura per ogn i potenziale minaccia identificata. 
 
I tool a supporto di questa fase sono stati identif icati nel paragrafo 6.4.2.  
 
9.3  Implementazione di applicazioni sicure 
Le azioni di sicurezza che devono essere intraprese  in questa fase possono essere così sintetizzate:  
• Data Validation:  verificare la presenza di vulnerabilità che posson o riguardare eventuali dati 
corrotti in ingresso e che possono portare a un com portamento anomalo dell’applicazione; 
• Control Flow : verificare i rischi collegati all’assenza di spec ifiche sequenze di operazioni che, se non 
eseguite nel corretto ordine, possono portare a vio lazioni sulla memoria o sull’uso scorretto di 
determinati componenti; 
• Analisi Semantica : rilevare eventuali problematiche legate all’uso p ericoloso di determinate 
funzioni o API (es. funzioni deprecate); 
• Controllo Configurazioni : verificare i parametri intrinseci di configurazio ne dell’applicazione; 
• Buffer Validation : verificare la presenza di buffer overflow sfrutta bile attraverso la scrittura o la 
lettura di un numero di dati superiore alla reale c apacità del buffer stesso. 
 
L’esame del codice sorgente applicativo deve portar e alla produzione, mediante la Static Analysis, del le 
seguenti tipologie di documenti: 
• Report delle Vulnerabilità riscontrate : report di dettaglio delle vulnerabilità riscontra te nella fase 
di analisi statica del codice tramite gli strumenti  a supporto; 
• Remediation Plan : report che analizza i falsi positivi ed indirizza  la risoluzione delle problematiche 
riscontrate nell’analisi stessa. 
 
La figura che segue sintetizza gli elementi in inpu t e l’output prodotto dal processo SAST: 
 
 
 
Figura 20 - Input e Output della fase Static Analysi s 
 
9.3.1  Identificazione degli strumenti a supporto 
Nel paragrafo 6.5.1 sono stati presentati i tool a supporto di questa fase. Si riporta di seguito un e stratto: 
• closed source 
o IBM App Scan (versione SAST), 
o Checkmarx, 
o CodeDx, 
o HP fortify. 

  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 95  a 137  
 
• open source 
o SonarQube, 
o FxCop (.NET), 
o BRAKEMAN (Ruby on Rails), 
o PMD (Java, XML e XSL), 
o PYLINT (Python), 
o CppCheck  (C/C++), 
o FindBugs (Java), 
o JSHint (Javascript), 
o OWASP Dependency-Check (Java,.NET, Ruby, Node.js, P ython, supporto limitato per 
C/C++). 
L’utilizzo combinato dei tool sopra indicati consen te una copertura ad ampio spettro semplificando 
significativamente la revisione manuale che richied erebbe molto tempo.  
In Appendice 2 è fornito un approccio metodologico per la valutazione dei tool. L’approccio è basato s u una 
‘Scheda valutazione’ che identifica la baseline per  l’analisi. I parametri di valutazione includono, a d 
esempio:  
• Linguaggi di programmazione supportati (C/C++, java , JPS, ..); 
• Standard supportati (OWASP, Top 10, SANS 25, ..); 
• Le vulnerabilità riconosciute (Sql injection, Cross -site scripting, ..); 
• L’incidenza dei falsi positivi; 
• La capacità di analizzare le dipendenze da librerie  esterne; 
• Il supporto alla reportistica, 
• Altro. 
 
Ogni elemento viene valutato assegnando uno score ( da 0 a 10) adeguatamente motivato. La metodologia 
è stata applicata, a titolo di esempio, su tre tool  (i risultati sono indicativi con finalità di linee  guida): 
 
Tools Categoria Fase Report 
Checkmarx  SAST Implementation / Verification Vedi Appendice 2.a 
CodeDx SAST/DAST  Implementation/Verification Vedi Appendice 2.b 
SonarQube/SonarLint  SAST Implementation Vedi Appendice 2.c 
 
1)  Checkmarx , è un tool per l’analisi statica del codice, posiz ionato da Gartner nel quadrante 
Challengers nell’ambito dell’Application Security T esting (AST). Supporta numerosi linguaggi (vedi 
scheda nella tabella di cui sopra). Può essere inte grato a vari livelli nell’ambito della fase di 
Implementation: IDE, build server, bug tracking too ls.  
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 96  a 137  
 
 
Figura 21 -  Report di Checkmarx 
 
2)  CodeDx consente di effettuare la verifica di eventuali vul nerabilità di programmi e software presi in 
considerazione. CodeDx riunisce una serie di strume nti di analisi del codice (Checkmarx, IBM  App 
Scan , Veracode ), sia gratuiti sia commerciali, che consentono a l oro volta di individuare e 
correggere agevolmente eventuali bug nel codice da analizzare. Uno screenshot dell’interfaccia 
CodeDx è riportata nella figura che segue: 
 
Figura 22 -  Interfaccia CodeDx 

  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 97  a 137  
 
 
 
Figura 23 - Info Security Product Guide 2016 : Recension e CodeDX 
3)  SonarQube , consente di introdurre il controllo formale fin d all'inizio del ciclo di vita del software, 
attraverso l’introduzione di Quality Gate nelle fas i tipiche di passaggio tra lo sviluppo e la verific a e 
tra la verifica e la produzione. 
 
 
Figura 24 - SonarQube 
 
9.4  Verifica della sicurezza delle applicazioni 
Le azioni di sicurezza da intraprendere in questa f ase sono così sintetizzate:  

  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 98  a 137  
 
• Analisi dinamica : attraverso l’attuazione di test dinamici di sicur ezza sull’applicazione in esecuzione 
in ambiente controllato; 
• Penetration Test : attraverso l’esecuzione di scansioni ed analisi d ella superficie di attacco; 
• Test di autenticazione multilivello : attraverso la verifica delle modalità di gestione  dell'accesso 
degli utenti; 
• Business Logic test : attraverso l’esecuzione di test manuali sulle app licazioni in fase di esecuzione; 
• Analisi dei risultati : attraverso l’individuazione e la rimozione dei fa lsi positivi; 
• Remediation Plan : attraverso la definizione del piano di rientro e la produzione di reportistica di 
sintesi e di dettaglio; Proof of Concept delle vuln erabilità riscontrate comprensiva di azioni per la 
riduzione della superficie d’attacco. 
L’esame delle Applicazioni in esecuzione in ambient e di test, deve portare alla produzione, mediante l a 
Dinamic Analysis delle seguenti tipologie di docume nti: 
• Vulnerability Assessment : report di dettaglio delle vulnerabilità riscontra te nella fase di analisi 
dinamica dell’applicazione tramite gli strumenti a supporto; 
• Remediation Plan:  report che analizza i falsi positivi ed indirizza la risoluzione delle problematiche 
riscontrate nell’analisi stessa. 
 
La figura che segue sintetizza gli elementi in inpu t e l’output prodotto dal processo DAST: 
 
 
Figura 25 - Input e Output della fase Dynamic Analys is 
 
9.4.1  Identificazione degli strumenti a supporto 
Nel paragrafo 6.6.1 sono stati presentati i tool a supporto di questa fase. Si riporta di seguito un e stratto: 
• closed source 
o IBM App Scan (versione DAST), 
o Veracode, 
o CodeDx. 
• open source 
o OWASP Zed Attack Proxy. 
 
9.5  Supporto per la manutenzione di applicazioni sicure  
L’obiettivo di questa fase è mantenere un prodotto sicuro, a partire dai nuovi trend sugli attacchi/mi nacce. 
Il team deve quindi analizzare le nuove minacce e i ndividuare le contromisure necessarie rilasciando n uovi 
aggiornamenti/patch laddove necessario attraverso u n processo di ‘Continuous Security’: 
 

  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 99  a 137  
 
 
 
Figura 26 - Continuous Security 
Qualsiasi modifica a un sistema ha il potenziale pe r ridurre l'efficacia dei controlli esistenti o per  avere in 
qualche modo un impatto sulla riservatezza, sulla d isponibilità o sull'integrità dello stesso. La solu zione è 
garantire che nella valutazione delle modifiche del  sistema sia inclusa una fase di valutazione del ri schio 
(paragrafo 6.2). Sfortunatamente, non solo i sistem i, ma anche le minacce possono cambiare. Quando 
vengono identificate nuove minacce, potrebbero esse re necessari nuovi controlli per portare il rischio  a un 
livello accettabile. Questo è il motivo per cui le valutazioni periodiche del rischio sono importanti,  anche 
quando un sistema cambia raramente. La valutazione del rischio può fornire un ulteriore vantaggio in p er 
migliorare l'efficacia di politiche, procedure e fo rmazione. 
9.5.1  Identificazione degli strumenti a supporto 
In ottica di un processo di ‘Continuous Security’, in questa fase vengono attuate di nuovo le azioni a fferenti 
alle diverse fasi di: Revisione dei requisiti di si curezza, revisione dei risultati di progettazione, revisione degli 
aspetti di sicurezza del codice sorgente implementa to, penetration test del codice rilasciato.  
Gli strumenti per le fasi sopra menzionati sono sta ti già identificati e indicati nei precedenti parag rafi: 
• Definizione dei requisiti di sicurezza [Par. 9.1.1] ; 
• Progettazione di applicazioni sicure [Par. 9.2.1]; 
• Implementazione di applicazioni sicure [Par. 9.3.1] ; 
• Verifica della sicurezza delle applicazioni [Par. 9 .4.1]. 
 
  

  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 100  a 137  
 
10  LINEE GUIDA PER L’IMPLEMENTAZIONE DELLA PRIVACY BY DESIGN 
NEL SDLC 
10.1  Introduzione e concetti base 
10.1.1  Principi della Privacy 
All’interno dalla ISO/IEC 29100:2011 sono descritti  undici principi che indirizzano la progettazione, lo 
sviluppo e l’implementazione dei requisiti di prote zione della privacy ( 10.1.4 ). Questi principi, sono anche 
un riferimento per quel che concerne il monitoraggi o e la misurazione delle prestazioni del software e  per 
gli aspetti del controllo dei programmi di gestione  della privacy in un’organizzazione (vedere anche 
paragrafo 5.8.1 dell’ Allegato 4 - Linee Guida per la modellazione delle minacce e individuazione delle azioni 
di mitigazione conformi ai principi del Secure/Priva cy by Design). 
 
Princ ipi  Descrizione  
Consenso e scelta  Secondo questo principio, l’interessato deve poter scegliere se 
acconsentire o meno al trattamento dei propri dati personali (Consenso 
Informato). Aderire a questo principio significa fo rnire all’interessato - in 
maniera chiara, facilmente comprensibile, accessibi le e conveniente - i 
meccanismi per esercitare la scelta e fornire il co nsenso in relazione al 
trattamento dei suoi dati personali al momento dell a raccolta, al primo 
utilizzo o non appena possibile. 
Scopo legittimo e specifico  Il principio di legittimità e specificità dello sco po assicura che 
quest’ultimo sia conforme alla legge applicabile e si basi su una base 
giuridica ammissibile. 
Limitazione della raccolta  Lim ita la raccolta dei dati personali a ciò che è strettam ente necessario 
per gli scopi specificati. 
Minimizzazione dei dati  Prevede  la progettazione , l’implementazione e l'elaborazione dei dati, 
attraverso procedure o sistemi ICT, in modo da ridu rre al minimo i dati 
personali che vengono elaborati e il numero di part i interessate dalla 
privacy. 
Limitazione dell’utilizzo, 
conservazione e divulgazione  Limita l 'utilizzo, la conservazione e la divulgazione (incl uso il 
trasferimento) dei dati personali a scopi specifici , espliciti e legittimi del 
trattamento. 
Precisione e qualità  Assicura  che i dati personali elaborati siano accurati, comp leti, aggiornati 
(a meno che non vi sia una base legittima per mante nere dati obsoleti), e 
adeguati e pertinenti ai fini del trattamento. 
Apertura, trasparenza e 
preavviso  Tale principio prevede di fornite informazioni chia re e facilmente 
accessibili sulle politiche stabilite dal titolare del trattamento e sulle 
procedure relative al trattamento dei dati personal i. 
Par tecipazione individuale e 
accesso  Stabilisce che a gli interessati sia data la possibilità di accedere e di 
rivedere i propri dati personali, a condizione che la loro identità sia 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 101  a 137  
 
autenticata con un livello adeguato di garanzia e che tale accesso non sia 
vietato dalla legge applicabile. 
Responsabilizzazione  Stabilisce che siano documentate e comunicate  in modo appropriato 
tutte le politiche, le procedure e le pratiche rela tive alla privacy. Prevede 
altresì l’assegnazione ad un individuo specifico al l'interno 
dell'organizzazione del compito di attuare le polit iche, le procedure e le 
best practice relative alla privacy. 
Sicurezza delle informazioni  Stabilisce la protezione dei dati personali con controlli appropriati a 
livello operativo, funzionale e strategico. Al fine  di garantire l'integrità, la 
riservatezza e la disponibilità dei dati personali e proteggerli dai rischi 
(quali l’accesso non autorizzato, la distruzione, l ’utilizzo non consentito, 
la modifica, la divulgazione o la perdita in tutto il ciclo di vita 
dell’informazione). 
Conformità alla privacy  Stabilisce di  verificare e dimostrare che il trattamento rispetti  la 
protezione dei dati e la tutela della privacy, attr averso requisiti specifici e 
mediante verifiche periodiche – anche attraverso il  ricorso a revisori 
interni o esterni. 
Tabella 5 - Principi generali della privacy 
A seguire vengono illustrate quelle che sono consid erate come migliori pratiche in cui è il titolare d el 
trattamento che definisce lo scopo dei dati e l'inc aricato del trattamento che lo attua, coerentemente  con 
gli obblighi definiti nel GDPR.  
 
LIMITAZIONE NELLA RACCOLTA 
• Limitazione nella raccolta dei dati personali 
o Prima della raccolta di dati personali - ad esempio , quando si stipula un contratto con 
l'interessato - il titolare del trattamento deve ot tenere il consenso preventivo e 
inequivocabile da parte dell'interessato o informar e l'interessato della raccolta di suoi 
dati personali e delle finalità di utilizzo indicat e in base alla normativa nazionale 
vigente. 
o Dal punto di vista del titolare del trattamento, il  consenso è necessario soprattutto 
quando i dati personali vengono utilizzati in servi zi commerciali. Tuttavia, nei casi di 
sicurezza e di servizi pubblici, può non essere nec essario un consenso esplicito 
preliminare, anche se è probabile che il consenso i mplicito sia stato fornito nell'ambito 
dell'accordo contrattuale tra l'utente e il fornito re di servizi. 
• Metodi di raccolta dei dati personali 
o Il titolare del trattamento non deve acquisire dati  personali con mezzi fraudolenti o altri 
mezzi illeciti. 
• Raccolta dati senza consenso 
o Le limitazioni alla raccolta dei dati non si applic ano nei casi in cui il trattamento dei dati 
personali è disciplinato dalla normativa nazionale vigente. I titolari del trattamento dei 
dati dovrebbero raccogliere i dati senza il consens o, ad esempio se autorizzati da 
un'ordinanza giudiziaria nazionale o da uno strumen to giuridico equipollente. 
• Esclusione di quelle informazioni in grado di ident ificare un individuo dai dati raccolti 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 102  a 137  
 
o Il responsabile del trattamento dei dati dovrebbe a dottare le opportune misure per 
evitare di raccogliere dati dai quali una persona p otrebbe essere identificata facendo 
riferimento ad una banca dati. 
• Conferma del consenso da parte dell'interessato per  la raccolta dei propri dati personali 
o Il titolare del trattamento dei dati deve adottare misure adeguate per ottenere la 
conferma sul consenso da parte dell'interessato all a raccolta dei propri dati. 
QUALITA’ DEI DATI 
• Qualità dei dati raccolti 
o Il titolare del trattamento dei dati personali deve  adoperarsi nel mantenere i dati 
personali esatti e aggiornati entro i limiti necess ari per il raggiungimento degli scopi 
dell'utilizzo. 
SPECIFICA DELLO SCOPO 
• Specifica dello scopo d'uso 
o Nel trattare i dati personali, il titolare del trat tamento deve specificare le finalità 
dell'utilizzo dei dati personali. 
• Limitazioni al cambiamento dello scopo d'uso 
o Il titolare del trattamento dei dati non deve modif icare le finalità d'uso al di fuori 
dell'ambito in cui le nuove finalità possono ragion evolmente essere considerate 
compatibili con quelle d'origine. 
• La modifica delle finalità d'uso richiede il consen so preventivo 
o Prima che il titolare del trattamento dei dati modi fichi le finalità d'uso che vanno oltre il 
campo di applicazione in cui le nuove finalità poss ono ragionevolmente essere 
considerate compatibili con le finalità di origine,  deve informare l'interessato di tale 
modifica o ottenere un consenso preventivo e inequi vocabile. 
LIMITAZIONE NELL’USO DEI DATI 
• Limitazione d'uso 
o Un responsabile del trattamento dei dati personali non deve trattare i dati personali, 
senza ottenere il consenso preventivo da parte dell 'interessato, oltre quanto necessario 
per il raggiungimento delle finalità d'uso specific ate. 
• Restrizione della divulgazione a terze parti 
o Il titolare del trattamento non deve fornire dati p ersonali a terzi senza ottenere il 
consenso preventivo da parte dell'interessato, tran ne in casi molto limitati e ben 
definiti (ad esempio a seguito di richieste legali) . 
• Utilizzo senza consenso 
o Le disposizioni delle due specifiche precedenti non  si applicano nei casi in cui il 
trattamento dei dati personali si basa su leggi naz ionali vigenti. I titolari del trattamento 
dei dati dovrebbero concedere l'accesso ai dati sol o alle autorità incaricate 
all'applicazione della legge, come autorizzato da u n'ordinanza di un tribunale nazionale 
o da uno strumento giuridico equivalente. 
MISURE DI SICUREZZA 
o I dati personali devono essere protetti da adeguate  misure di sicurezza contro rischi 
quali la perdita o l'accesso non autorizzato, la di struzione, l'uso, la modifica o la 
divulgazione dei dati. 
APERTURA 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 103  a 137  
 
o Dovrebbe esistere una politica generale di apertura  nei riguardi di sviluppi, pratiche e 
politiche in materia di dati personali. Dovrebbero essere prontamente disponibili mezzi 
per stabilire l'esistenza e la natura dei dati pers onali e le principali finalità del loro 
utilizzo, nonché l'identità e la residenza abituale  della persona che raccoglie i dati. 
PARTECIPAZIONE INDIVIDUALE 
o Un individuo può avere il diritto, tra gli altri, d i: 
a)  ottenere dal titolare del trattamento la conferma d ell'esistenza o meno di dati che 
lo riguardano;  
b)  di avergli comunicato i dati che lo riguardano:  
i)  entro un termine ragionevole; 
ii)  ad un onere, se del caso, non eccessivo; 
iii)  in modo ragionevole; 
iv)  in una forma per lui facilmente comprensibile; 
c)  essere motivati nel caso in cui una richiesta prese ntata ai sensi dei punti a) e b) 
viene respinta e di essere in grado di contestare t ale rifiuto; 
d)  contestare i dati che lo riguardano e, se la contes tazione è accolta, far cancellare, 
rettificare, completare o modificare i dati che lo riguardano. 
RESPONSABILIZZAZIONE 
o Il titolare del trattamento dei dati deve essere re sponsabile del rispetto delle misure 
che attuano i principi di cui sopra e di garantire che i responsabili del trattamento dei 
dati allo stesso modo si conformino. 
EQUIVALENZA DI REGIME 
o Il titolare del trattamento dei dati non dovrebbe t rasferire dati personali al di fuori delle 
proprie frontiere, a meno che la destinazione non a bbia un regime di privacy 
equivalente a quello di origine. 
 
10.1.2  Obiettivi di protezione 
Gli obiettivi di protezione mirano a fornire delle proprietà astratte, ossia indipendenti dal contesto  per i 
sistemi IT. Nella sicurezza ICT la triade della ris ervatezza, dell’integrità e della disponibilità è s tata 
ampiamente accettata. Sebbene siano state proposte diverse estensioni e perfezionamenti, questi obiett ivi 
di protezione core  sono rimasti stabili per decenni e sono serviti da  base per molte metodologie di sicurezza 
ICT, (cfr. DR-3). A completamento di questi obietti vi di protezione della sicurezza, sono stati propos ti tre 
obiettivi di protezione specifici per la privacy ch e approfonditi nella tabella che segue: 
 
Obiettivo  Descrizione  
Incollegabilità  Garantisce che i dati rilevanti per la privacy non p ossano essere collegati tra domini 
con scopo e contesto comuni. Ciò significa che i pr ocessi devono essere gestiti in 
modo tale che i dati rilevanti per la privacy non s iano collegabili a qualsiasi altro 
insieme di dati rilevanti sulla privacy al di fuori  del dominio. 
La trasparenza  Garantisce che tutte le elaborazioni dei dati rileva nti per la privacy, comprese le 
impostazioni legali, tecniche e organizzative, poss ano essere comprese e ricostruite 
in qualsiasi momento. Le informazioni devono essere  disponibili prima, durante e 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 104  a 137  
 
dopo l'elaborazione. Pertanto, la trasparenza deve riguardare non solo 
l'elaborazione effettiva, ma anche l'elaborazione p ianificata (trasparenza ex ante) e 
il tempo trascorso dall'elaborazione per sapere cos a è successo esattamente 
(trasparenza ex post) 
L’intervenibilità  Garantisce l'intervento in relazione a tutti i tratt amenti di dati relativi alla privacy in 
corso o pianificati, in particolare da parte di col oro i cui dati vengono elaborati. 
L'obiettivo dell'intervenibilità è l'applicazione d i misure correttive e controbilanci 
ove necessario. L'intervenibilità è legata ai princ ipi relativi ai diritti degli individui, ad 
es. i diritti di rettifica e cancellazione dei dati , il diritto di revocare il consenso o il 
diritto di presentare un reclamo o di sollevare una  controversia per ottenere il 
rimedio. 
10.1.3  Privacy by design 
10.1.3.1  Definizione della Privacy by design 
La Privacy by Design (PbD) è definita come “un appr occio olistico concettuale che può essere applicato  - 
end-to-end - all’interno di un’organizzazione, incl udendo le sue tecnologie informatiche, le sue prati che 
commerciali, i suoi processi, la progettazione fisi ca e le infrastrutture di rete” (cfr. DR-8). Second o questa 
impostazione, l'utente dovrebbe essere considerato il centro di un sistema di protezione dei dati pers onali 
(per definizione, quindi il sistema è "user centric "). Qualsiasi progetto - sia strutturale, sia conce ttuale - 
andrebbe realizzato considerando, sin dalla fase di  progettazione, la riservatezza e la protezione dei  dati 
personali. La PbD comprende la seguente trilogia di  applicazioni:  
• Sistemi IT;  
• Pratiche di business;  
• Progettazione delle reti.  
E’ in questo contesto che si inserisce la necessità  di prevedere l’ingegnerizzazione della privacy by design in 
ogni fase del ciclo di vita del software. 
10.1.3.2  I sette principi della privacy by design 
Principio  Descrizione  
Proattivo non reattivo; 
Preventivo non correttivo L'approccio di Privacy by Design  (PbD) è caratterizzato da misure 
proattive piuttosto che reattive. Essa è diretta ad  anticipare e previene 
gli eventi invasivi della privacy prima che accadan o. PbD non attende 
che i rischi per la privacy si materializzino, né o ffre rimedi per la 
risoluzione delle infrazioni della privacy una volt a che si sono verificati, 
in quanto è diretta ad impedire che si verifichino.  
Privacy come impostazione 
predefinita La Privacy by Design  è diretta a garantire il massimo  grado di privacy 
prevedendo che i dati personali siano automaticamen te protetti in 
qualsiasi sistema IT o di business. Nessuna azione è richiesta da parte 
dei singoli per proteggere la loro privacy, in quan to è integrata nei 
sistemi per impostazione predefinita. 
Privacy incorporata nel design  La Privacy by Design  è incorporato nel design e nell'architettura dei 
sistemi IT e di business. Non è attuata successivam ente ad un evento. Il 
risultato è che la privacy diventa una componente e ssenziale delle 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 105  a 137  
 
funzio nalità principali. La privacy è parte integrante de l sistema, senza 
diminuirne la funzionalità. 
Funzionalità completa; somma 
positiva, non somma zero La Privacy by Design  cerca di tutelare tutti i legittimi interessi e gli  
obiettivi in un’ottica win-win , senza prevedere delle soluzioni a somma 
zero che includano degli inutili trade-off. Privacy by Design  evita la 
pretesa di false dicotomie, come la sicurezza a dis capito della privacy, in 
quanto dimostra che è possibile averle entrambe. 
Sicurezza end -to -end - 
Protezione completa del ciclo 
di vita La Privacy by Design  che è stata incorporata in un sistema sin dal primo  
momento, si estende in modo sicuro durante l'intero  ciclo di vita dei 
dati coinvolti: prevedendo robuste misure di sicure zza - essenziali per la 
privacy - dall'inizio alla fine di un ciclo di vita . Ciò garantisce che tutti i 
dati vengano conservati e distrutti – in modo sicur o e tempestivamente 
- alla fine del processo. Pertanto, la Privacy by Design  garantisce una 
gestione delle informazioni sicura end-to-end. 
Visibilità e trasparenza - Keep 
it Open La Privacy by Design  cerca di assicurare a tutti gli stakeholder che 
qualunque sia la pratica aziendale o la tecnologia coinvolta, essa 
opererà secondo le promesse e gli obiettivi dichiar ati, anche 
assoggettandosi a verifiche indipendenti. Le sue co mponenti e le sue 
operazioni rimangono visibili e trasparenti, sia pe r gli utenti che per i 
fornitori. 
Rispetto per la privacy degli 
utenti - Mantenerlo incentrato 
sull'utente La Privacy by Desi gn  richiede ai progettisti e agli operatori di garanti re 
gli interessi dei singoli, offrendo robuste misure di privacy per 
impostazione predefinita. Prevedendo degli avvisi a ppropriati e 
potenziando le opzioni user-friendly, pertanto gara ntendo 
l’impostazione user-centric. 
Tabella 6 - I sette principi della Privacy by Desig n 
Vedere anche il paragrafo 5.8.1.2 dell’ Allegato 4 - Linee Guida per la modellazione delle minacce e 
individuazione delle azioni di mitigazione conformi ai principi del Secure/Privacy by Design.  
 
10.1.4  Data protection Impact Assessment 
La progettazione di qualsiasi software che coinvolg a il trattamento dei dati personali deve essere pre ceduta 
da un'identificazione dei requisiti di protezione p er la privacy, in quanto dal trattamento o dall’ela borazione 
dei dati personali potrebbero derivare dei rischi. I rischi per la privacy negli applicativi software che 
comportano il trattamento dei dati personali, dovre bbero essere trattati prima della loro implementazi one, 
ossia sin dalla fase di progettazione ( Engineering Privacy by Design ). Dovranno, quindi, essere analizzati i 
rischi collegati alle applicazioni software. 
In linea con i requisiti di attuazione previsti dal  Regolamento (UE) 679 del 2016 (cfr. DR-1), di segu ito 
indicato come GDPR , qualora un trattamento dei dati personali possa p resentare un rischio elevato per i 
diritti e le libertà delle persone fisiche, i titol ari di quest’ultimo dovranno effettuare una valutaz ione 
dell’impatto del trattamento sulla protezione dei d ati personali o Data Protection Impact Assessment , di 
seguito indicata come “DPIA” (cfr.  Art. 35 DR-1), quest’obbligo è applicabile anche al ciclo di vita del 
software. 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 106  a 137  
 
Sulla base di quanto stabilito dal WP Art. 29 (cfr.  DR-7), sarà necessario effettuare una valutazione della 
necessità di svolgere una DPIA, basandosi sulla map pa concettuale definita nella Figura 27 . 
In particolare, al fine di valutare se il trattamen to - posto in essere all’interno di un’applicazione  software - 
possa comportare un rischio elevato per i diritti e  le libertà delle persone fisiche (Cfr. ART. 35 DR- 1) sarà 
necessario determinare se rientra tra quelli indica ti nella Tabella 7- in cui sono descritte alcune ti pologie di 
trattamento che obbligano il titolare a svolgere un a Data Protection Impact Assessment DPIA. 
 
Figura 27 – Esempio di flusso di valutazione necessi tà DPIA 
Alla luce di quanto sopra, se il trattamento, le su e modalità di attuazione o i dati trattati rientran o in quelli 
descritti nella Tabella 7, e non si configurano ecc ezioni – individuate all’interno di elenchi che dov ranno 
essere redatti dagli Stati Membri (ad oggi non risu ltano essere stati ancora individuati) - sarà neces sario 
svolgere una DPIA. 
 
Tipologia di 
trattamento Descrizione 
1 - Valutazione di 
profilazione o scoring Tutti quei trattamenti che analizzano i dati presen ti all’interno dei propri archivi 
allo scopo di trarne informazioni riguardo il rendi mento professionale, la 
situazione economica, la salute, le preferenze o gl i interessi personali, l’affidabilità 
o il comportamento, l’ubicazione o gli spostamenti dell’interessato 
2 - Decisioni 
automatizzate  Tutti quei trattamenti che producano effetti giurid ici sulla persona fisica ovvero 
che incidono in modo analogo significativamente su dette persone fisiche 
3 - Monitoraggio 
sistematico Tutti quei trattamenti che sono utilizzati per osse rvare, monitorare o controllare 
gli interessati, compresa la raccolta di dati attra verso reti o la sorveglianza di 

  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 107  a 137  
 
un’area accessibile al pubblico  
4 - Dati sensibili o 
estremamente 
personali Tutti quei trattamenti che si riferiscono a partico lari categorie di dati sensibili o 
estremamente personali 
5 - Dati trattati su 
larga scala Tutti i trattamenti che gestiscono  dati personali su larga scala, in relazione al 
numero di soggetti interessati, al volume dei dati,  alla durata o all’ambito 
geografico 
6 - Combinazioni o 
raffronto di insieme di 
dati Tutti quei trattamenti nei quali è prevista una pre senza congiunta di d ue o più 
titolari distinti, secondo modalità che esulano dal le ragionevoli aspettative 
dell’interessato 
7 - Dati relativi a 
interessati vulnerabili Tutti quei trattamenti in cui la tipologia delle in formazioni trattate determina uno 
squilibrio fra interessato e titolare, nel senso de lla mancanza del potere, in capo al 
primo, di acconsentire o di opporsi al trattamento.  Si inseriscono in questa 
categoria i dati dei minori, dei dipendenti o delle  persone richiedenti specifiche 
tutele 
8 - Utilizzi innovativi  Tutti quei trattamenti che utilizzano tecnologie o tecniche innovative per la 
raccolta o l’utilizzo dei dati personali, dato che il livello di conoscenza tecnologica, 
in un dato momento storico, non è in grado valutare  il livello di rischio connesso 
all’innovazione 
9 - Trattamenti che 
impediscono di 
esercitare un diritto o 
avvalersi di un servizio 
o contratto Tutti quei trattamenti che impediscono agli interes sati di esercitare un diritto di 
avvalersi di un servizio o di un contratto, ossia t utti i trattamenti dai quali 
l’interessato non può esimersi qualora volesse acce dere a detto servizio o 
concludere detto contratto 
Tabella 7 - Tipologie di trattamento che rappresent ano un rischio elevato 
Nel caso in cui la DPIA sia stata valutata come nec essaria (cfr. DR-7), si potrà procedere con l’anali si degli 
impatti potenziali sui diritti e le libertà dell’in teressato (persone fisiche), a fronte del trattamen to dei 
relativi dati personali, allo scopo di porre in ess ere le opportune attività di trattamento dei rischi  per la 
protezione dei dati personali. 
In linea con quanto previsto da regolamenti e stand ard applicabili in materia (cfr. Errore. L'origine 
riferimento non è stata trovata. ), tale attività costituisce un processo composto d a un insieme di attività 
ben definite, da compiersi in sequenza ordinata, ne ll’ambito delle seguenti fasi: 
1)  Definizione del contesto , tramite la comprensione dell’organizzazione, dell ’architettura tecnologica 
e dei fattori che potrebbero influenzare la gestion e del rischio privacy; 
2)  Privacy risk assessment , attraverso cui si identificano, si analizzano e s i valutano i rischi per gli 
interessati; 
3)  Privacy risk treatment , in cui si identificano le strategie e le modalità  operative per 
l’implementazione delle misure di sicurezza adeguat e alla copertura dei rischi rilevati in sede di ris k 
assessment. (I requisiti di protezione per la priva cy, da implementare all’interno del piano di 
trattamento dei rischi individuati per il software possono essere ricavati dai controlli descritti nel la 
ISO/IEC 29151 (cfr. DR-5) 
 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 108  a 137  
 
10.1.4.1  Riconoscere le informazioni personali  
Per poter definire adeguatamente il trattamento del  rischio privacy per i software, sarà necessario 
individuare le tipologie di informazioni personali,  ossia quelle da cui possono essere ricavati dei da ti 
personali, che potrebbero essere trattate da un app licativo software. Per determinare se una persona f isica 
debba o meno essere considerata identificabile, sar à necessario prendere in considerazione diversi fat tori. 
In particolare, si dovrebbe tenere conto dei mezzi che possono ragionevolmente essere utilizzati dai 
software per il trattamento dei dati personali. I s oftware dovrebbero supportare meccanismi adeguati a d 
informare l’interessato, raccogliere il consenso e proteggere i suoi dati personali. Le seguenti speci ficazioni 
forniscono degli ulteriori chiarimenti su come dete rminare se un’informazione possa essere considerata  
personale. 
Identificativi  
In alcuni casi, l'identificabilità dell’interessato  potrebbe essere molto semplice (e.g. quando l'info rmazione 
contiene o è associata ad un identificatore che è u sato per riferirsi o per comunicare con l’interessa to). Le 
informazioni possono essere considerate personali a lmeno nei seguenti casi: 
o se contiene o è associato a un identificatore che f a riferimento a una persona fisica (ad esempio, il 
codice fiscale); 
o se contiene o è associato a un identificatore che p uò essere correlato a una persona fisica (ad 
esempio, numero del passaporto, numero di conto); 
o se contiene o è associato a un identificatore che p uò essere utilizzato per stabilire una 
comunicazione con una persona fisica identificata ( ad esempio, una posizione geografica precisa, 
un numero di telefono);  
o se contiene un riferimento che collega i dati a uno  degli identificatori di cui sopra. 
 
Altre caratteristiche identificative 
Le informazioni non devono necessariamente essere a ssociate a un identificatore per poter essere 
considerate personali. Le informazioni saranno cons iderate personali anche se contengono o sono 
associate a una caratteristica che distingue una pe rsona fisica da altre persone fisiche, ad esempio i  dati 
biometrici. Qualsiasi attributo che assume un valor e che identifica univocamente un l’interessato deve  
essere considerato come una caratteristica identifi cativa. Si noti che indipendentemente dal fatto che  una 
determinata caratteristica distingue una persona fi sica da altre potrebbe cambiare a seconda del conte sto 
di utilizzo. Ad esempio, mentre il cognome di una p ersona fisica potrebbe essere insufficiente per 
identificare quella persona fisica su scala globale , potrebbe invece esserlo su una scala aziendale. I noltre, 
potrebbero anche esservi situazioni in cui una pers ona fisica è identificabile anche se non esiste un singolo 
attributo che la identifica in modo univoco. Questo  è il caso in cui una combinazione di diversi attri buti 
messi insieme consente di distinguere tale persona dalle altre, ad esempio la combinazione degli attri buti 
"femmina", "45" e "avvocato" può essere sufficiente  per identificare una persona fisica all'interno di  una 
determinata organizzazione, ma con buona probabilit à sarà insufficiente per identificare quella person a 
fisica al di fuori di tale contesto. 
La tabella che segue fornisce alcuni esempi di attr ibuti che potrebbero essere personali, a seconda de l 
dominio.  
Età o bisogni speciali delle persone fisiche vulner abili  
Accuse di condotta criminale 
Qualsiasi informazione raccolta durante i servizi 
sanitari 
Conto bancario o numero di carta di credito Posizione derivata dai sistemi di 
telecomunicazione 
Storia medica 
Nome 
Identificativi nazionali (ad es. Numero di 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 109  a 137  
 
Identificatore biometrico  
Estratto conto della carta di credito 
Condanne penali o reati commessi 
Rapporti di indagini penali 
Numero cliente 
Data di nascita 
Informazioni sanitarie diagnostiche 
Disabilità 
Fatture del medico 
Stipendi dei dipendenti e file di risorse umane 
Profilo finanziario 
Genere 
Posizione GPS 
Traiettorie GPS 
Indirizzo di casa 
Indirizzo IP passaporto)  
Indirizzo e-mail personale 
Numeri di identificazione personale (PIN) o 
password 
Interessi personali derivati dall'utilizzo di 
tracciamento di siti Web 
Profilo personale o comportamentale 
Numero di telefono personale 
Fotografia o video identificabili con una persona 
fisica 
Preferenze di prodotto e servizio 
Origine razziale o etnica 
Credenze religiose o filosofiche 
Orientamento sessuale 
Appartenenza sindacale 
Bollette 
Tabella 8 - Esempi di attributi per indentificare u na persona 
Dati pseudonimizzati  
Al fine di limitare la capacità del titolare o del responsabile di identificare l’interessato, l’ident ità di 
quest’ultimo e le informazioni che lo riguardano po ssono essere sostituite da pseudonimi. Tale sostitu zione 
viene solitamente eseguita da un soggetto terzo pri ma di trasmettere le informazioni a un destinatario . La 
sostituzione viene considerata pseudonimizzazione q uando: 
(a) gli attributi collegati allo pseudonimo non son o sufficienti per identificare l’interessato; 
(b) l'assegnazione degli pseudonimi è tale da non p oter essere invertita da parte delle persone che l’ hanno 
eseguita.  
La pseudonimizzazione evita il collegamento. Ma ess endo diversi i dati collegabili allo stesso pseudon imo, 
esiste il rischio che la pseudonimizzazione sia vio lata, in quanto più grande è il set di dati associa to a un 
dato pseudonimo, maggiore è il rischio che la propr ietà (a) venga violata. Inoltre, più piccolo è il g ruppo di 
persone fisiche a cui un insieme di dati pseudonimi  si riferisce, maggiore sarà la probabilità che un 
interessato sia identificabile. Gli attributi conte nuti direttamente nelle informazioni in questione e  quelli 
che possono essere facilmente collegati a queste in formazioni (ad es. utilizzando un motore di ricerca  o dei 
riferimenti incrociati con altri database) devono e ssere presi in considerazione nel determinare se 
l'informazione si riferisce a un elemento identific abile dell’interessato. 
La pseudonimizzazione è differente dall'anonimizzaz ione: i processi di anonimizzazione soddisfano 
entrambe le proprietà (a) e (b) di cui sopra, ma el iminano il collegamento. Durante l'anonimizzazione,  le 
informazioni sull'identità vengono cancellate o sos tituite da pseudonimi per i quali la funzione di 
associazione viene distrutta. Quindi, i dati resi a nonimi non sono più personali. 
Metadati 
I dati personali possono essere memorizzati in un s istema ICT in modo tale da non essere facilmente vi sibili 
all'utente del sistema. Ad esempio, la memorizzazio ne del nome dell’interessato come metadato nelle 
proprietà di un documento, nei commenti o nelle mod ifiche. L’interessato deve essere a conoscenza 
dell’esistenza di tali dati sotto forma di metadati  o del loro trattamento per tale scopo, in quanto p otrebbe 
preferire che le informazioni personali non vengano  elaborate in questo modo o condivise pubblicamente . 
Dati non richiesti 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 110  a 137  
 
Anche le informazioni personali non richieste da un  titolare, cioè non intenzionalmente ottenute, 
potrebbero essere memorizzate da un software. Ad es empio, l’interessato potrebbe fornire delle 
informazioni personali anche quando non è stato ric hiesto dal trattamento (ad es. ulteriori informazio ni 
personali fornite nel contesto di un modulo di feed back anonimo su un sito Web). Il rischio di raccogl iere 
informazioni personali indesiderate può essere rido tto considerando le misure di tutela della privacy al 
momento della progettazione del software. 
I dati personali stabiliti dal GDPR (cfr. DR-1 ) sono suddivisi nelle seguenti categorie di dati p ersonali: 
Categorie di dati 
personali Descrizione 
Dati identificativi  I dati identificativi rappresentano tutti quei dati  che possono identificare, 
direttamente o indirettamente una persona, con part icolare riferimento a un 
identificativo come il nome, un numero di identific azione, dati relativi 
all'ubicazione, un identificativo online. 
Dati 
Particolari/Sensibili I dati particolari  sono tutti quei dati personali che rivelino l’origi ne razziale o 
etnica, le opinioni politiche, le convinzioni relig iose o filosofiche, o l’appartenenza 
sindacale, nonché dati genetici dati biometrici int esi a identificare in modo 
univoco una persona fisica, dati relativi alla salu te o alla vita sessuale o 
all'orientamento sessuale della persona. 
Dati giudiziari  I dati giudiziari rappresentano tutti quei dati rel ativi alle condanne penali e ai 
reati o a connesse misure di sicurezza. 
10.1.5  Flusso informativo del trattamento 
Per definire l’architettura e il design di un softw are i progettisti dovranno prendere in considerazio ne la 
struttura del flusso informativo, descrivendo le in terazioni tra interessato, titolare, responsabile e  terze 
parti all’interno dell’applicativo software. Gli at tori identificati possono interagire tra loro in va ri modi, 
secondo i seguenti scenari, maturati dalla ISO/IEC 29134:2017 45 : 
 
 
  
                                                           
45  https://www.iso.org/standard/62289.html  
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 111  a 137  
 
 
  Interessato Titolare del 
trattamento Responsabile del 
trattamento Terze parti 
Raccolta     
Archiviazione     
Utilizzo     
Trasferimento      
Cancellazione     
Figura 28 - Esempio di flusso informativo del tratta mento 
10.1.6  Privacy Implementation Strategy 
La Privacy Implementation Strategy prevede che i pr ogettisti del software definiscano e selezionino un  
modello di ciclo di vita adeguato all’ambiente di p roduzione e di sviluppo, all'ambito, all'ampiezza e  alla 
complessità del progetto, parametrato sulle necessi tà emerse dai risultati della data protection impac t 
assessment per la privacy ( 10.1.4) .  
Dovranno essere documentate: 
• I principi generali della privacy applicabili alla progettazione del software (10.1.1) 
• Gli obiettivi di protezione che il software dovrebb e garantire (10.1.2) 
• I principi della privacy by design applicabili alla  progettazione del software (10.1.3.2) 
• I risultati della data protection impact assessment  per il software e l’individuazione dei requisiti d i 
protezione per la privacy (10.1.4) 
• Le tipologie di Informazioni Personali Identificabi li (PII) trattate nell’ambiente software (10.1.4.1)  
• La descrizione del flusso informativo derivante dal  trattamento all’interno del software (10.1.5) 
10.2  Ciclo di vita dello sviluppo software nell'ambito d el GDPR 
Molti articoli che trattano la tecnologia dell'info rmazione sulla base del regolamento generale sulla 
protezione dei dati dell'UE si focalizzano su speci fici obblighi commerciali e legali in materia di da ti 
personali. Tali articoli si concentrano spesso sul trattamento fisico dei dati e sugli obblighi del re sponsabile 
di quest’ultimo nella gestione dello stesso. Questa  è una considerazione importante per le organizzazi oni 
che operano nell'UE.  
Tuttavia, oltre alla localizzazione dei dati, il GD PR ha un impatto profondo e significativo sul ciclo  di vita 
dello sviluppo del software e sui relativi processi  di sviluppo informatico per quelle organizzazioni che 
prevedono la realizzazione di progetti relativi a s istemi informativi all'interno dell'UE. Registrazione 
utente Dato  Raccoglie 
Trasferisce Trasferisce Riceve Fruizione 
Servizio 
 Utilizza Tratta Archivia Fornisce 
Cancella  Dato  Dato  
Dato  Dato  
 Dato   Dato  
Legenda  
Flusso dei dati 
Istruzione 
Servizio 
 Cancella 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 112  a 137  
 
Il reparto IT di un'organizzazione può utilizzare u no dei molteplici e distinti tipi di SDLC (System 
Development LifeCycle) presenti sul mercato, come A gile, DevOPS, Waterfall, Iterative e così via. 
Nonostante i nomi e gli approcci differenti, queste  tipologie di SDLC hanno diverse aree in comune: tu tti gli 
SDLC hanno una qualche forma di pianificazione, pro gettazione, realizzazione, test, rollout e mantenim ento 
che coprono l'intero ciclo di vita di un sistema in formativo. 
Gli SDLC vengono utilizzati per costruire sistemi i nformatici gestendo e controllando con successo il 
progetto IT, sfruttando il fatto che la maggior par te dei sistemi informatici hanno livelli o moduli c omuni.  
In generale, nella maggior parte delle tecnologie i mpiegate, troviamo in comune i seguenti moduli: 
• Livelli di trasporto dati e sicurezza; 
• I livelli di database e architettura dei dati; 
• I livelli applicativi e logici; 
• I livelli di presentazione e portale. 
L'SDLC, qualunque sia il tipo utilizzato, gestisce e controlla il progetto informatico, dalla pianific azione 
all'implementazione, attraverso i suddetti livelli o moduli. 
Nell'ambito del GDPR vi è un numero significativo d i requisiti e cambiamenti a livello di attività, pr ocesso, 
politica e procedure.  
Il GDPR ha un impatto incredibile sul processo SDLC  per quelle imprese che installano sistemi nell'UE e 
aumenta notevolmente la complessità dei progetti fu nzionali e tecnici associati ai vari livelli tecnic i sopra 
descritti (ad esempio il livello di database). 
I requisiti funzionali e tecnici introdotti dal GDP R per i sistemi informatici, sono sostanziali e non  irrilevanti. 
In effetti, influenzano quasi tutti gli aspetti del la progettazione e della realizzazione dei sistemi attraverso 
ciascuno dei suddetti livelli tecnologici. Tali inf luenze da parte del GDPR devono essere affrontate n ella fase 
di pianificazione dell'SDLC, ovvero all'inizio, per  evitare sovraccosti significativi e rielaborazioni  successive 
nel processo informatico. 
Segue un inventario di sedici aree di pertinenza ad  articoli del GDPR che influenzano la pianificazion e 
funzionale e tecnica dell'SDLC e i requisiti per i reparti IT. Tale elenco può essere considerato come  un 
insieme di consigli generali per i CIO e i responsa bili IT che redigono i requisiti dei loro sistemi o peranti 
nell’ambito dell'UE: 
1.  L' implementazione della protezione dei dati nel si stema e nell'organizzazione, per progettazione e 
per impostazione predefinita, è un requisito legale : 
a.  considerando 78 e Articolo 25 
2.  I dati devono essere protetti, e l'integrità e la r iservatezza devono essere mantenute, utilizzando 
mezzi tecnici e organizzativi sotto la direzione de l controllore: 
a.  considerando 49 e Articoli 5-1(f), 32-1(b-d) 
3.  Ove possibile, deve essere utilizzata la cifratura dei dati: 
a.  considerando 83 e Articoli 6-4(e), 32-1(a) 
4.  Ove possibile, deve essere utilizzata una pseudonim izzazione dei dati: 
a.  considerando 26, 28, 29, 78 e Articoli 6-4(e), 25-1 , 32-1(a) 
5.  Ove possibile, i dati devono essere resi anonimi: 
a.  considerando 26 
6.  Al momento della raccolta dei dati, gli attributi d el trattamento e le fasi elaborative devono essere 
forniti all'interessato, per via elettronica o per iscritto, in forma chiara e facilmente comprensibil e: 
a.  considerando 39, 58 e Articoli 12-1, 13-2(a-f) 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 113  a 137  
 
7.  Le persone interessate hanno il diritto di accedere  ai loro dati e di controllarne il trattamento in 
qualsiasi momento: 
a.  considerando 58, 61, 63 e Articoli 12, 15-1(a, d) 
8.  Separare le informazioni che potrebbero essere cons iderate dati personali o profili personali se 
trattati o combinati separatamente o insieme, al ri sultato di attività illecite: 
a.  considerando 30 
9.  I dati relativi a un soggetto interessato dovranno essere portabili verso un altro provider (anche se 
concorrente): 
a.  considerando 68 e Articoli 13-2(b), 14-2(c), 20 
10.  L'interessato ha diritto a una copia dei suoi dati in un formato comunemente utilizzato 
a.  Articolo 15-3 
11.  L'interessato ha il diritto di ottenere gratuitamen te l'aggiornamento dei propri dati in caso di 
errore. 
a.  considerando 59, 65 e articolo 16 e, l'interessato ha il diritto di chiedere tale 
aggiornamento per via elettronica, riferimento 59 
12.  L'interessato ha il diritto di ottenere la cancella zione immediata dei dati che lo riguardano: 
a.  considerando 59, 65 e articoli 13-2(b), 14-2(b), 17  e, l'interessato ha il diritto di chiedere 
tale cancellazione per via elettronica, riferimento  59 (Nota: Esistono nel GDPR particolari 
eccezioni a tale diritto.) 
13.  Il titolare del trattamento deve comunicare ad altr e organizzazioni IT che detengono i dati 
dell'interessato che questi ha richiesto la cancell azione dei propri dati: 
a.  considerando 66 e articolo 19 (quindi, il dipartime nto IT deve sapere dove vengono 
conservati da terze parti tutti i dati degli intere ssati in modo che le parti coinvolte possano 
essere informate della richiesta di cancellazione. Sono essenziali inventari aggiornati dei 
dati interni ed esterni). 
14.  L'interessato ha il diritto di opporsi, revocare il  consenso e rinunciare al trattamento. Questo può 
opporsi o revocare il proprio consenso in caso di t rattamento elettronico dei propri dati: 
a.  considerando 59, 63 e articoli 7-3,18,21 (e con rac comandazione tecnica del Consiglio UE: 
riferimento 67) 
15.  I dati vengono conservati solo per il tempo necessa rio a conseguire gli obiettivi dell'interessato. I 
dati personali scaduti non devono essere memorizzat i. (Parte di una strategia di gestione dei 
registri elettronici). La persona interessata deve essere informata di tale periodo o delle modalità d i 
elaborazione al momento della raccolta dei suoi dat i: 
a.  considerando 39, 45 e Articoli 13-2(a), 14-2(a), 25 -2 
16.  Si deve stabilire, quasi immediatamente, se una vio lazione dei dati possa essere stata un "rischio 
elevato per i diritti e la libertà della persona fi sica" in quanto deve essere predisposto l’opportuno  
ambiente tecnico per individuare, tracciare e valut are tali violazioni. 
a.  considerando 85, 86 (relativi agli obblighi di noti fica), 87 (Nota: Molti articoli, ad esempio 
33,34) del GDPR riguardanti gli obblighi di comunic azione alla persona interessata e alle 
autorità competenti in materia. 
Inoltre, molti dei punti di cui sopra, ad esempio l ’undicesimo, richiedono aggiornamenti del contact c enter 
e interazioni e conferme con e da parte dell'intere ssato.  
Una cosa è certa: ciascuno dei sedici punti di cui sopra dovrà avere una posizione nella documentazion e di 
progettazione funzionale e tecnica dei sistemi real izzati con il supporto dell'SDLC, e ciascuno di ess i 
apporterà una certa complessità alle fasi di proget tazione del sistema nel suo complesso. In più, molt i di 
questi influenzeranno anche i processi globali di a ssistenza verso i clienti dell'azienda, poiché il G DPR non 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 114  a 137  
 
solo richiede determinati requisiti tecnici "puri",  ma anche requisiti funzionali all'attività organiz zativa 
supportati sia dalla tecnologia che dai processi az iendali. 
In sintesi, il testo del GDPR contiene requisiti fu nzionali e tecnici del sistema, sia espliciti che i mpliciti, che 
influiscono e influenzano l'SDLC adottato dalle org anizzazioni che progettano l'introduzione dei nuovi  
sistemi nell'UE.  
L'impatto del GDPR sullo sviluppo del software iniz ia a partire dall'architettura dei dati e dai livel li di 
trasporto di questi, per arrivare fino ai livelli d i portale e di presentazione. La chiave di base per  il successo 
dello sviluppo IT è la pianificazione di tali requi siti durante le fasi iniziali dell'SDLC; sebbene po ssano 
aggiungere una certa complessità alle fasi iniziali  di pianificazione e progettazione dell'SDLC, i cos ti di 
sviluppo complessivi saranno notevolmente ridotti a l minimo se considerati il più precocemente possibi le 
nel processo di costruzione dei sistemi IT. 
10.3  Implementazione della strategia nelle fasi di svilu ppo del software 
10.3.1  Scopo 
Gli elementi definiti all’interno della Privacy Imp lementation Strategy (10.1.6), i requisiti di prote zione della 
privacy e le strategie di design per la privacy (ri cavabili sulla base di quelli individuati da ENISA in DR-3), 
dovranno essere inquadrati all’interno di ciascuna fase della Engineering privacy by design (10.3.2) e  
rimappati per ciascuna fase del ciclo di vita dei s oftware), così come definiti nelle fasi Software life Cycle 
Processes (cfr. DR-2). 
10.3.2  Le fasi di implementazione della Engineering Privac y by Design  
La seguente impostazione è stata maturata dal Privacy Engineering Framework  del MITRE (cfr. DR-6), 
prevedendo le seguenti attività: 
Attività  Descrizione  
Definizione dei requisiti privacy:  
 Definizione delle proprietà della privacy di un sof tware in 
modo che possa essere integrato con il design e lo sviluppo  
Design e sviluppo privacy:  
 Definizione del design e sviluppo dei requisiti pre visti  
Verifica e validazione privacy:  
 Riscontro della conferma che i requisiti di privacy  sono stati 
correttamente implementati e validati attraverso de lle 
verifiche  
Tabella 9 - Fasi dell'Engineering Privacy by Design  
10.3.2.1  Definizione dei requisiti privacy 
Input : Requisiti di privacy di base e test; Normative, b est practice e procedure applicabili sulla privacy;  
requisiti funzionali; Profili di rischio per la pri vacy. 
Attività : Svolgere una Data Protection Impact Assessment mo dernizzata sugli obiettivi di protezione 
individuati; Selezionare e perfezionare i requisiti  di protezione per la privacy di base e effettuare dei test; 
Sviluppare dei requisiti di protezione della privac y personalizzati e testarli sulla base dei risultat i della DPIA. 
Output : Requisiti di protezione per la privacy specifici per il software. 
10.3.2.2  Design e sviluppo privacy 
Input : Requisiti Architetturali e funzionali specifici p er la privacy 
  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 115  a 137  
 
Attività : Identificare delle strategie e dei modelli di des ign della privacy; Identificare dei controlli di pr ivacy, 
dei criteri tecnici e delle policy; Sviluppare dei dati e dei modelli di processo che riflettano i con trolli di 
privacy identificati; Allineare, integrare e implem entare i controlli di privacy con gli elementi funz ionali; 
Analizzare il rischio del design di privacy comples sivo (vedi anche Allegato 4 – Linee Guida per la 
modellazione delle minacce e individuazione delle a zioni di mitigazione conformi ai principi del 
Secure/Privacy by Design – Paragrafo 5.8). 
Output : Componenti del software implementati; Mitigazione  dei rischi accettabili per la privacy residua 
10.3.2.3  Verifica e validazione privacy 
Input : Componenti del software implementati; Requisiti d i privacy specifici del sistema e test]; Politiche e 
procedure di privacy applicabili. 
Attività : Sviluppare / perfezionare dei test sulla privacy;  Eseguire delle verifiche sulla privacy; Verificare  il 
comportamento operativo rispetto alle politiche e a lle procedure sulla privacy applicabili. 
Output : Risultati dei test di privacy; Documentazione del le Incoerenze sulla privacy documentate; 
Descrizione del piano di trattamento della privacy.  
10.4  Integrazione della Engineering Privacy by Design ne l Software Life Cycle Process 
Il diagramma illustrato nella Figura 29, definisce la mappatura delle fasi della Engineering Privacy b y Design 
sulle fasi del Software Life Cycle Process: 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Figura 29 - Integrazione della Engineering privacy b y design nel Software Life Cycle Process Definizione dei 
requisiti privacy 
•Svolgere una Data Protection Impact Assessment parametra ta 
sugli obiettivi di protezione individuati; Selezionare e
perfezionare i requisiti di protezione per la privacy di bas e e
effetturare dei test; Sviluppare dei requisiti di protezio ne della 
privacy personalizzati e testarli sulla base dei risultati della DPIA.
Design e sviluppo 
priavcy 
•Identificare delle strategie e dei modelli di design della
privacy; Identificare dei controlli di privacy, dei criter i 
tecnici e delle policy; Sviluppare dei dati e dei modelli di 
processo che riflettano i controlli di privacy identificat i;
Allineare, integrare e implementare i controlli di privacy
con gli elementi funzionali; Analizzare il rischio del desi gn 
di privacy complessivo .
Verifica e 
validazione privacy 
•Sviluppare / perfezionare dei test sulla privacy; Eseguir e 
delle verifiche sulla privacy; Verificare il comportament o 
operativo rispetto alle politiche e alle procedure sulla 
privacy applicabili.• Software Requirements Analysis 
Process  
• Software Architectural Design Process  
• Software Detailed Design Process  
• Software Construction Process 
• Software Integration Process 
 
• Software Qualification Testing Process 
• Software Configuration Management 
Process 
• Software Quality Assurance Process 
• Software Verification, Validation and Audit 
Process 
Software Problem Resolution Process  
  
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 116  a 137  
 
  APPENDICE 1.  CATALOGO SECURITY TOOLS 
 
Prodotto Categoria Fase SSE Tipo Licenza Sito Web 
Acunetix Web Vulnerability Scanner DAST, IAST Verification Versione trial a 
14 giorni disponibile https://www.acunetix.com/  
Microsoft Cloud App 
Security (MCAS) Cloud Access 
Security Broker Verification Versione trial 
disponibile  https://www.microsoft.com/en -us/microsoft -365/enterprise -mobility -
security/cloud-app-security  
Airlock Suite by Ergon Informatik WAF, 
Authentication, Identity Response Versione trial disponibile  
https://www.airlock.com  
Management 
Akamai CDN, DDoS 
Protection, WAF Response Prova gratuita 
disponibile https://www.akamai.com/it/it/   
Alert Logic SIEMless Threat Management Intrusion 
Prevention System, Cloud Access Security Broker, WAF, Container Security Response Versione trial disponibile 
https://www.alertlogic.com/  
AWS WAF WAF Response Nessuna trial 
disponibile https://aws.amazon.com/it/waf/   
Visual Trace Spec Requirements 
management Requirements Versione trial 
disponibile http://visualtracespec.com/#  
Open Source 
Requirements Management ToolaNimble Requirements management Requirements Open Source 
https://github.com/osrmt/osrmt/  
  
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 117  a 137  
 
  Potection Center Mobile AST  Response Non disponibile https://appmobi.com  
AppSpider Pro by 
Rapid7 DAST Verification Versione trial 
disponibile https://www.rapid7.com  
AppWall by Radware WAF, DDoS Protection Response Nessuna 
versione trial disponibile https://www.radware.com/  
Arbor DDoS Protection DDoS Protection Response Nessuna 
versione trial disponibile https://www.netscout.com/arbor-ddos  
Armor Complete Cloud Security Platform Release Nessuna 
versione trial disponibile https://www.armor.com  
Arxan Application Protection Mobile AST  DAST Response 
Nessuna 
versione trial disponibile https://www.arxan.com/application-protection  
Pradeo Security Mobile AST Verification Nessuna 
versione trial disponibile https://www.pradeo.com/it-IT/protezione-flotta-mobi le  
Barracuda Web Application Firewal WAF Response Versione trial 
disponibile su richiesta https://www.barracuda.com/products/webapplicationfi rewall  
BeEF Penetration 
Testing Verification Open Source https://beefproject.com/  
VMWare Carbon Black Endpoint Security Verification / Response 
Demo 
disponibile su richiesta https://www.carbonblack.com/  
Synopsys Black Duck Hub Library Inspection Verification  
Demo 
disponibile su richiesta https://www.blackducksoftware.com/  
Lookout Mobile Mobile Access Response Demo https://www.lookout.com/products/mobile-endpoint-se curity  
  
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 118  a 137  
 
  Endpoint Security  Security Broker  disponibile su 
richiesta 
Brakeman SAST Implementation Open Source https://brakemanscanner.org/  
BrightCloud Threat 
Intelligence by Webroot DAST Verification Nessuna 
versione trial disponibile https://www.brightcloud.com  
Burp Suite by PortSwigger SAST, DAST, Penetration Testing Implementation / Verification 
 Versione 
Community liberamente scaricabile https://portswigger.net  
CaseComplete Requirements management Requirements Versione  trial 
disponibile su richiesta https://casecomplete.com/  
CppCheck SAST Implementation Open Source http://cppcheck.sourceforge.net/  
CD Protection by CD Networks CDN, WAF, DDoS Protection Response 
Nessuna 
versione trial disponibile https://www.cdnetworks.com  
Checkmarx CxSAST SAST, DAST, RASP Implementation / Verification Versione  trial 
disponibile a richiesta https://www.checkmarx.com/  
CipherCloud Cloud Access 
Security Broker Response Versione trial 
disponibile https://www.ciphercloud.com  
CloudFlare CDN, DDoS Protection, WAF Response Nessuna 
versione trial disponibile www.cloudflare.com  
CloudFront by Amazon CDN, DDoS Protection Response 
Nessuna 
versione trial disponibile https://aws.amazon.com/it/cloudfront/  
Cloud Access Security 
Broker (CASB) Cloud Access 
Security Broker Response Demo gratuita a 
richiesta https://umbrella.cisco.com/products/casb  
  
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 119  a 137  
 
  CloudPassage Halo Cloud Access 
Security Broker Response Versione trial 
disponibile https://www.cloudpassage.com  
CloudSOC Cloud 
Access Security Broker (CASB)CloudSOC by Elastica Cloud Security Testing/Scanning 
 Verification Nessuna versione trial disponibile 
https://www.symantec.com/products/cloud-application -security-cloudsoc  
CodeDx SAST, DAST Implementation / 
Verification Versione trial 
disponibile https://codedx.com/  
CodeProfiler by Virtual Forge SAST per applicazioni SAP Implementation 
Nessuna 
versione trial disponibile https://www.virtualforge.com  
Yottaa CDN, DDoS Protection, WAF Verification Demo 
disponibile su richiesta https://www.yottaa.com  
Contrast Enterprise IAST, RASP Implementation / Verification Demo 
disponibile su richiesta https://www.contrastsecurity.com  
Coras Threat Modeling 
tool/practies Design Open Source http://coras.sourceforge.net/downloads.html  
DDoS Strike by Security Compass DDoS Protection Response Demo 
disponibile su richiesta https://www.securitycompass.com  
Endpoint Privilege Management Endpoint Security Verification / Response 
Demo 
disponibile su richiesta https://www.beyondtrust.com/  
R&S®Web Application Firewall WAF Response Demo 
disponibile su richiesta www.denyall.com  
Dependency Check Library 
Inspection Implementation Open Source https://www.owasp.org/index.php/OWASP_Dependency_Ch eck  
  
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 120  a 137  
 
  F5 Big-IP  WAF, DDoS Protection Response Demo 
disponibile su richiesta https://f5.com  
Falcon  Endpoint 
Security Verifica tion / 
Response Versione trial 
disponibile https://www.crowdstrike.com  
SpotBugs SAST Implementation Open Source https://spotbugs.github.io/  
FireEye NX Web Server 
Scanner, WAF Response Versione trial 
non disponibile https://www.fireeye.com  
FortiWeb: Web 
Application Firewall and API ProtectionFortigate Firewall Platform by Fortinet WAF Response Demo disponibile su richiesta 
https://www.fortinet.com/products/web-application-
firewall/fortiweb.html  
FortiGate NGFW WAF Response Demo 
disponibile su richiesta https://www.fortinet.com/it/products/next-generatio n-firewall/models-
specs.html  
Gendarme SAST Implementation Open Source https://github.com/mono/website/blob/gh -
pages/docs/tools+libraries/tools/gendarme/index.md  
Microfocus Fortify Static Code Analyzer SAST, DAST, IAST, RASP Implementation / Verification 
Demo 
disponibile su richiesta https://www.microfocus.com/it-it/products/static-co de-analysis-
sast/overview  
HCL Security AppScan  SAST, DAST, IAST  Implementation / 
Verification Versione trial 
non disponibile https://www.hcltech.com  
IBM Engineering 
Requirements Management DOORS Next Requirements management Requirements  Versione trial non disponibile 
https://www.ibm.com   
IBM Rational 
RequisitePro solution  Requirements 
management Requirements  Versione trial 
non disponibile https://www.ibm.com  
Imperva FlexProtect WAF, DDoS Response Demo https://www.imperva.com/products/flexprotect-plans/  
  
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 121  a 137  
 
  Protection  disponibile su 
richiesta 
BloxOne Threat Defense WAF Response Versione trial 
disponibile su richiesta https://www.infoblox.com/products/bloxone-threat-de fense/  
Hillstone E -Series  
WAF Response Demo non disponibile https://www.hillstonenet.com  
Next -Generation 
Firewalls (NGFW) Verification Demo non 
disponibile  https://www.hillstonenet.com  
Visure Requirements Management Tool Requirements management Requirements 
Versione trial 
disponibile su richiesta https://visuresolutions.com/requirements-management -tool/  
JSHint SAST Implementation Open Source https://jshint.com/  
Kali Linux Penetration 
Testing Verification Open Source https://www.kali.org/  
Klocwork SAST Implementation Versione trial 
disponibile su richiesta https://www.perforce.com/products/klocwork  
Kona Site Defender by Akamai WAF, DDoS Protection Response 
Demo 
disponibile su richiesta https://www.akamai.com/it/it/products/security/kona -site-defender.jsp  
CenturyLink DDoS 
and Web Application Security CDN, DDoS Protection Response Demo non disponibile 
https://www.centurylink.com/business/security/ddos- and-web-
application.html  
LogRhythm Security Intelligence Platform Predictive 
Security Analytics Verification / Response Demo 
disponibile su richiesta www.logrhythm.com  
Malwarebytes 
Endpoint Security Endpoint 
Security Verification Versione trial 
disponibile https://www.malwarebytes.com/business/endpointsecur ity/  
MetaFlows Cloud Security Implementation Demo www.metaflows.com  
  
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 122  a 137  
 
  Scanning  disponibile su 
richiesta 
MetaDefender Predictive 
Security Analytics Verification / Response Available by Request 
https://metadefender.opswat.com/  
Metasploit by Rapid7 Penetration 
Testing Verification Open Source https://www.metasploit.com/  
Microsoft Application 
Verifier DAST Verification Free https://www.microsoft.com  
Microsoft Attack 
Surface Analyzer  Intrusion 
Prevention Verification Free https://www.microsoft.com  
Microsoft BinScope SAST Implementation Free https://www.microsoft.com  
Microsoft Code 
Analysis Tool SAST Implementation Free https://www.microsoft.com  
Microsoft FxCop Library 
Inspection Implementation Free https://www.microsoft.com  
Microsoft SDL Regex 
Fuzzer SAST Implementation Free https://www.microsoft.com  
Microsoft SDL 
MiniFuzz File Fuzzer SAST Implementation Free https://www.microsoft.com  
Microsoft Security 
Assessment Tool (MSAT) Risk Management Risk Assessment Free 
https://technet.microsoft.com/it-it/security/cc1857 12.aspx  
Microsoft Threat 
Modeling Tool Threat Modeling 
tool Design Free https://www.microsoft.com  
ModSecurity WAF Implementation / 
Verification Open Source http://modsecurity.org/  
MyAppSecurity ThreatModeler Threat Modeling tool Design Demo disponibile 
https://threatmodeler.com/  
N-Stalker Cloud Web SAST, DAST Implementation / Free Tier https://www.nstalker.com  
  
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 123  a 137  
 
  Scan  Verification  Available  
Citrix Web App Firewall WAF Verification Demo 
disponibile su richiesta https://www.citrix.com/it-it/products/citrix-web-ap p-firewall/  
Netsparker Web 
Application Security Scanner DAST Response Demo 
disponibile su richiesta https://www.netsparker.com/  
Neustar DDoS Protection, WAF Response Demo 
disponibile su richiesta https://www.home.neustar/  
NEVIS Security Suite  WAF, Authentication, Identity mngt Verification Available by Request 
https://www.nevis-security.ch/en/  
NEVIS Security Suite  
Nikto2 Web Server 
Scanner Verification Open Source https://www.cirt.net/Nikto2  
Nmap Penetration 
Testing and Network Mapping Verification / Response Open Source 
https://nmap.org/  
NSFOCUS Web Application Firewall DAST, WAF Verification Demo non disponibile 
https://nsfocusglobal.com/web-application-firewall- waf/  
Objectives Requirements 
management Requirements Versione trial 
disponibile http://www.objectiver.com  
OWASP Zed Attack 
Proxy (ZAP) Penetration 
Testing Verification / 
Response Open Source www.owasp.org  
Open Source 
Requirements Management Tool (OSRMT) Requirements management Requirements Open Source 
http://sourceforge.net/projects/osrmt/  
  
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 124  a 137  
 
  Paloalto Next -
Generation Firewall 
WAF Verification Demo disponibile su richiesta 
https://www.paloaltonetworks.com  
Paloalto Next -
Generation Firewall  
Palo Alto Threat Prevention Services RASP WAF Response Demo 
disponibile su richiesta https://www.paloaltonetworks.com  
Peach Fuzzer Penetration Testing Verification / Response Demo 
disponibile su richiesta https://www.peach.tech/  
PYLINT SAST Implementation Demo 
disponibile su richiesta https://polarion.plm.automation.siemens.com/product s/polarion-
requirements  
PMD SAST Implementation Demo 
disponibile su richiesta https://www.imperva.com/products/runtime-applicatio n-self-protection-
rasp/  
Polarion REQUIREMENTS 
 Application Lifecycle Management (ALM) Requirements   
http://www.emerasoft.com/agile-application-lifecycl e-
management/polarion-alm/  
Runtime Application Self-Protection RASP Verification / Response Demo 
disponibile su richiesta https://www.imperva.com/products/runtime-applicatio n-self-protection-
rasp/  
Network Threat Detection Intrusion 
Prevention System Response Demo 
disponibile su richiesta https://www.bricata.com  
Network Security 
Monitoring and Management CDN, App 
Security Scanning Verification Demo non disponibile 
https://enterprise.verizon.com/products/security/  
  
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 125  a 137  
 
  Qualys Security & Compliance Suite DAST, WAF Verification / Response Versione trial disponibile 
https://www.qualys.com  
Reqtify Requirements management Requirements Demo non disponibile 
https://www.3ds.com/it/prodotti-e-servizi/catia/pro dotti/reqtify/  
Risk Fabric by Bay Dynamics Pred ictive 
Security Analytics Implementation / 
Verification / Response Demo 
disponibile su richiesta https://baydynamics.com  
rmtoo Requirements management Requirements Open Source 
http://rmtoo.florath.net/  
RSA Advanced Threat 
Management Solution DAST Implementation / Verification Available by Request 
https://www.dellemc.com  
Samurai Web Testing Framework DAST, 
Penetration testing Verification Open Source 
http://www.samurai-wtf.org/  
SeaMonster- Security Modeling Software Threat Modeling tool Design  Open Source 
https://sourceforge.net/projects/seamonster/  
Website Malware 
Scanner SAST, DAST Implementation / 
Verification Demo non 
disponibile https://www.sitelock.com  
SonarLint SAST Implementation Open Source https://www.sonarlint.org  
SonarQube SAST Implementation Open Source https://www.sonarqube.org  
Sophos Next-Gen Firewall WAF Response Versione Trial a 
30 giorni disponibile https://www.sophos.com/en-us/products/next-gen-fire wall.aspx  
SRX Series Firewall by Juniper Networks WAF Verification Versione Trial disponibile 
https://www.juniper.net/us/en/products-services/sec urity/srx-series/  
Sucuri Website WAF Verification Demo non https://sucuri.net/website-firewall/  
  
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 126  a 137  
 
  Application Firewall  disponibile  
Sucuri Website Security Solutions WAF, DDoS 
Protection, App Security Scanning Response Demo non 
disponibile https://sucuri.net/website-security-platform/signup /  
Symantec Advanced Threat Protection IAST, RASP Implementation / Verification Versione Trial 
disponibile su richiesta https://www.symantec.com  
Tanium Endpoint Platform Endpoint 
Security, App Security Scanning Implementation / Verification Demo non disponibile 
https://www.tanium.com  
Simulink Requirements Requirements management Requirements Versione Trial disponibile  
https://it.mathworks.com/products/simulink-requirem ents.html  
Telelogic DOORS Requirements Management Requirements Gratuito 
http://telelogic-doors.software.informer.com/  
Thunder TPS by A10 
Networks DDoS Protection Verification / 
Response Versione Trial 
disponibile https://www.a10networks.com/products/thunder-tps/  
Trend Micro Deep Security Platform SAST, DAST Implementation / Verification Versione Trial disponibile 
https://www.trendmicro.com  
TRIKE Threat Modeling 
tool/practies Design Open Source http://www.octotrike.org/  
Tripwire Enterprise IAST, RASP Implementation / Verification  Demo 
disponibile su richiesta https://www.tripwire.com  
Trustwave Secure 
Web Gateway CDN, DAST Verification Demo non 
disponibile https://www.trustwave.com/en -us/services/technology/secure -web -
gateway/  
  
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 127  a 137  
 
  Trustwave Web Application Firewall WAF, 
Penetration Testing Verification Demo non disponibile 
https://www.trustwave.com  
Veracode Cloud Platform SAST, DAST, 
Mobile AST, Penetration Testing Implementation / Verification Demo disponibile su richiesta 
www.veracode.com  
vSentry by Bromium Endpoint Security Verification / Response Demo 
disponibile su richiesta www.bromium.com  
GrayMatter Platform Penetration 
Testing, App Security Scanning Verification Demo disponibile su richiesta 
https://www.reliaquest.com/  
WhiteHat Sentinel SAST, DAST Implementation / Verification Demo di 30 
giorni disponibile su richiesta https://www.whitehatsec.com/info/security-check/  
Wireshark Penetration 
Testing and Packet-level Monitoring Verification Open Source 
https://www.wireshark.org/  
Ziften Endpoint Security Response Demo 
disponibile su richiesta https://ziften.com/  
    
 
  
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 128  a 137  
 
  APPENDICE 2.  VALUTAZIONE STRUMENTI 
a.  CHECKMARX 
PRODOTTO  CATEGORIA  FASE SSE  SITO WEB   
CxSAST  SAST  Implementation  https://www.checkmarx.co 
m/  
DESCRIZIONE  
È un tool commerciale , per l’analisi statica del codice, posizionato da Gartner nel quadrante Leaders 
nell’ambito dell’Application Security Testing (AST) . Supporta numerosi linguaggi (vedi oltre). Può ess ere 
integrato a vari livelli nell’ambito della fase di implementation: IDE, build server, bug tracking too ls. 
Tainted analysis, Pattern matching, "scan r ules" (customizable)  
ANALISI DEL VALUTATORE  SCORE  
Livello di integrazione con i seguenti prodotti   
a.        IDEs  Esistono plugin per i seguenti IDE:  
Eclipse,  
Visual Studio e  
IntelliJ. 
I plugin consentono la scansione del codice, l'anal isi e la navigazione dei 
risultati in modo integrato con l'IDE. 7 
b.       source repository,  TFS,  
SVN,  
GIT,  
Perforce. 7 
c.        build server,  Jenkins,  
Bamboo, 
TeamCity, 
TFS, 
Anthill Pro, 
Maven. 7 
d.       bug tracking tools  
 Jira.  5 
I linguaggi di 
programmazione 
supportati C#, JavaScript and commonly used frameworks, Node.J S and commonly 
used frameworks, VB.NET, ASP, VB6, PHP, C/C++, Apex  and VisualForce, 
Ruby, VBScript, Perl, HTML5, Python, Groovy, Scala,  PL/SQL, JSP, 
Typescript, Go, Windows Mobile .NET/.NET Core 8 
  
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 129  a 137  
 
  I framework applicativi 
supportati (es. Spring, 
Hibernate, …) [*] Requires minor adjustments  
 
Platform/Enviroment: Java     
Struts, Spring MVC, iBatis*, GWT, Hibernate, OWASP ESAPI, JSTL FMT 
Taglib, ATG DSP Taglib, Java Server Faces (JSF), Ja vaScript 
 
Platform/Enviroment: .NET  
Enterprise Libraries, Telerik, ComponentArt, Infrag istics, FarPoint, iBatis*, 
Hibernate.Net [*], Entity framework up to 4.3.1 
 
Platform/Enviroment: PHP  
Zend, Kohana, CakePHP, Symfony, Smarty, OWASP ESAPI  
 
Platform/Enviroment: C/C++  
MISRA 
 
Platform/Enviroment: Ruby  
Ruby on Rails 
 
Platform/Enviroment: JavaScript 
JQuery, Node.js, Ajax, Knockout, AngularJS, Express JS, Jade, Backbone, 
Handlebars, Hapi.JS 
 
Platform/Enviroment: iOS  
iOS mobile applications 
 
Platform/Enviroment: Python 
Django 
 
Platform/Enviroment: Groovy 
Grails 
 7 
Le tipologie di 
applicazione 
supportate (Web, 
Mobile, Client-
Server…) Web application, Mobile , Client -Server . 7 
Le vulnerabilità 
riconosciute (Sql 
injection, Cross-site 
scripting, Code 
injection…) SQL Injection, Cross -site scripting, Code injection, Buffer Overflow, 
Parameter tampering, Cross-site request forgery, XXE injection, Unsecure 
deserializarion,  HTTP splitting, Log forgery, DoS, Session Fixation,  Session 
poisoning, path traversal, Unhandled exceptions, Unreleased resources, 
unvalidated input, URL redirection attack, Dangerou s Files Upload, 
Hardcoded password. 7 
Gli Standard supportati 
(OWASP Top 10, SANS 
25, …) OSWAP Top 10, OSWAP Mobile Top 10, SANS 25, HIPAA, FISMA, BSIMM, 
PCI DSS, Mitre CWE, MISRA. 7 
L’integrazione di 
“Custom rules” È possibile definire delle regole personalizzate.  4 
  
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 130  a 137  
 
  L’incidenza dei “Falsi 
positivi” In primo luogo, è possibile “spegnere” falsi positi vi estendendo la lista dei 
“sanitizer” fornita out of the box da checkmarx (co n pochi colpi di click). 
In secondo luogo, è possibile “spegnere” falsi posi tivi dichi arandoli come 
“Not Exploitable”. 
In terzo luogo, è stato possibile apprezzare un app roccio messo in atto da 
Checkmarx atto a limitare il numero di segnalazioni. La prova eseguita ha 
evidenziato che: in presenza di codice evidentement e prono a una SQL 
INJECTION, ma in assenza di un vettore di attacco, la segnalazione della 
vulnerabilità viene soppressa. Viceversa la segnala zione viene prodotta se 
vie ne individuato anche un vettore di attacco. Il side  effect è che in una 
scansione parziale che considera il codice vulnerab ile ma esclude in tutto o 
in parte il vettore d’attacco, non vengono prodotte  segnalazioni. 
 4 
La capacità di analisi 
“raw source code” vs 
“need to compile” Lo strumento è in grado di funzionare in modalità “ raw source code”. È 
quindi possibile sottoporre anche porzioni di codic e "out-of- context". 
Tuttavia, in questo caso potrebbero non essere segn alate certe 
vulnerablità che invece si manifestano in una scans ione "in-context". È una 
scelta by design per limitare falsi positivi. Raw 
Source  
La capacità di 
analizzare le 
dipendenze da librerie 
esterne al fine di 
controllare se sono 
presenti vulnerabilità 
note Questa funzionalità non è compresa fra quelle stand ard del prodotto. 
Esiste un add- on di CheckMarx (acquistabile a parte) che analizza  le 
dipendenze da librerie esterne al fine di controlla re se sono presenti 
vulnerabilità note, interrogando una base dati este rna. 1 
La capacità di correlare 
lo scan statico con 
l’esito di uno scan 
dinamico (correlazione 
White Box con Black 
Box) CxSAST non possiede questa funzionalità.  1 
LE PERFORMANCE  
a.        Full scan vs 
Incremental scan  Sono supportati sia Full sia Incremental scanning . 7 
b.       Client -side scan 
vs Server-side scan Server -side scanning: i sorgenti vengono compressi e invia ti al server dove 
vengono decompressi e riconosciuti, dopodichè avvie ne effettivamente lo 
scan. L’elaborazione è sempre centrale . Se più scansioni sono ordinate 
contemporaneamente, i lavori vengono accodati. 7 
Eventuali funzionalità 
di prioritizzazione delle 
remediation Le vulnerabilità individuate vengono ordinate secon do 4 livelli: High, 
Medium, Low, Information che indirizzano la priorit à della remediation. 7 
La facilità d’uso  Lo strumento è fortemente orientato alla facilità.  Alla prova dei fatti, lo 
strumento è davvero molto user friendly e intuitivo . 
 7 
  
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 131  a 137  
 
  I costi di licenza  Esistono varie forme di licenza. In generale i criteri per stabilir e il costo 
della licenza sono: il numero di progetti, le linee di codice e il nume ro di 
sviluppatori. Il prezzo è stabilito attraverso una trattativa commerciale. Medio 
/Alto 
Il supporto alla 
reportistica E' supportata una reportistica di tipo custom (non sono espressamente 
disponibili report pre- definiti, ad esempio specificamente orientati a CWE  
SANS Top 25, OWASP Top 10, PCI Data Security Standa rd, ecc). I formati 
supportati sono: PDF, CSV, RTF, XML. 4 
La classificazione degli 
errori riportati Sono riferiti agli standard supportati (es. "PCI DSS (3.1) - 6.5.1 - Injection 
flaws - particularly SQL injection", OWASP Top 10 2 013 - A1-Injection). 7 
CONSIDERAZIONI GENERALI  
Considerazioni generali:  
• L’installazione risulta agevole. 
• La dashboard di gestione è semplice e intuitiva. 
• Apprezzabile il riconoscimento automatico del lingu aggio: è sufficiente eseguire lo zip dei sorgenti 
e farne l’upload verso il server. 
• Agevole utilizzare il plug-in integrato con un IDE (tasto destro su un punt o del progetto per 
eseguire la scansione) 
• Supporto alla remediation in tutti gli ambienti: Cx Audit, plug-in, browser  
• Inserimento di regole custom agevole (esaminato il caso "sanitizer") 
• Reportistica completa e flessibile in diversi forma ti. 
• È possibile ef fettuare una scansione piena (iniziale) e una scans ione incrementale (successiva alla 
prima). 
• Il software caricato per la scansione non deve esse re compilato  
• Non è prevista la funzionalità di controllo delle v ulnerabilità delle librerie utilizzate dal pro getto, a 
meno di integrare un componente licenziato a parte.  
• Integrazione con Jenkins, come step aggiuntivo dell a fase di build (Continuous Integration), agevole 
attraverso plug-in  
 
Punti di forza: 
• Vettore di attacco  
• Funzionalità “Full Graph” che raccord a più vettori di attacco mostrando eventuali punti di 
intersezione (candidati ideali per il fix)   
APPROCCIO PER LA VALUTAZIONE  
  
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 132  a 137  
 
  Nei test di sicurezza delle applicazioni, i “falsi positivi” da soli non determinano la piena precisio ne, 
sebbene la loro bassa incidenza sia spesso considerata l’indicatore più i mportante che rivela la bontà del 
tool in esame. I falsi positivi sono solo uno dei q uattro aspetti che determinano l'accuratezza di uno  
strumento: gli altri tre sono i "veri positivi", i "veri negativi" e i "falsi negativi". 
 
    Falsi Positivi (FP): false vulnerabilità che so no non ci sono. 
    Veri Positivi (TP): vulnerabilità reali segnala te correttamente. 
    Falsi negativi (FN): vulnerabilità reali che no n sono state correttamente segnalate. 
    Veri negativi (TN): false vulnerabilità che cor rettamente non sono state segnalate. 
 
Pertanto, il tasso dei veri positivi (TPR) è il tas so con il quale sono state segnalate correttamente le 
vulnerabilità reali. Il tasso di falsi positivi (FP R) è il tasso con c ui le vulnerabilità false sono state segnalate 
come reali, in modo errato. 
Le formule per determinare i veri e i falsi positiv i: 
• Tasso dei veri positivi (TPR) = FP / (FP + TN) 
• Tasso dei falsi positivi (FPR) = TP / (TP + FN) 
CONSIDERAZIONI FINALI DEL VALUTATORE  
Nonostante la presenza accertata di falsi positivi e falsi negativi nei risultati delle scansioni, il prodotto si 
presta a una grande facilità d’uso e a una buona fl essibilità, sia nella personalizzazione delle regol e, sia 
nella reportistica. 
Il prodotto prevede la scansione di molti tipi di li nguaggi sviluppati su diverse piattaforme e s’integ ra nelle 
pipeline di DevOps. 
L’interpretazione dei risultati è tuttavia d’obblig o, per valutare l’effettiva presenza delle vulnerab ilità 
segnalate. 
TEAM DI VALUTAZIONE  Software Security team  
 
b.  CodeDX 
PRODOTTO CATEGORIA FASE SSE SITO WEB 
CodeDx SAST/DAST  Implementation/Verification https://codedx.com/  
DESCRIZIONE 
CodeDx è un Tool commerciale che serve ad effettuare la veri fica di eventuali vulnerabilità di programmi e 
software presi in considerazione relative al codice  sorgente. CodeDx riunisce una serie di strumenti d i 
analisi del codice (sia gratuiti, sia commerciali) che consentono a loro volta di individuare agevolme nte 
eventuali difetti nel codice da analizzare. 
Source analysis, Pattern matching, "scan rules" (cu stomizable). 
ANALISI DEL VALUTATORE SCORE 
Livello di integrazione con i seguenti prodotti   
a.       IDEs CodeDx si integra con i seguenti ide: Eclipse, Inte lliJ e Visual Studio. 8 
  
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 133  a 137  
 
  b.      source 
repository, CodeDx si integra i seguenti repository:  
Git (direttamente); Subversion, Mercurial, o Team F oundation 
Version Control (TFVC) (tramite zip del "source out side" di CodeDx e 
successivo upload verso CodeDx). 8 
c.       build server,  CodeDx si integra con i seguenti build server:  
 Azure DevOps, Jenkins, Maven, TeamCity, Bamboo. 7 
d.       bug tracking 
tools CodeDx supporta AlienVault, Git, Jira Software, Microsoft Threat 
Modeling, SD Elements.   
Le tipologie di 
applicazione 
supportate (Web, 
Mobile, Client-
Server…) Client Server, Web, Mobile (Android Studio). 7 
 I linguaggi di 
programmazione 
supportati C/C++, Java, Javascript, JSP, .NET(C#, Visual Basic ), PHP, Python, 
Ruby, Scala. 8 
I framework 
applicativi supportati 
(es. Spring, 
Hibernate, …) Il tool supporta i più popolari frameworks tra i qu ali Spring-MVC, 
JQuery e molti altri. 7 
Gli Standard 
supportati (OWASP 
Top 10, SANS 25, …) 7PK (Seven Pernicious Kingdoms), CERT Coding Standards for C/C++ 
& Java, CLASP Vulnerability Lexicon, CWE/SANS Top 2 5 Most 
Dangerous Software Errors, DISA STIGs version 3.1 a nd 4.3, HIPAA 
Compliance Check, MISRA C, Mobile OWASP Top 10, NIS T 800-53, 
OWASP Top 10 Project, PCI DSS, Software Fault Patte rns (SFP), WASC 
Threat Classification v2 9 
Le vulnerabilità 
riconosciute (Sql 
injection, Cross-site 
scripting, Code 
injection…) Le vulnerabilità riportate dai seguenti tools, dire ttamente incorporati 
nel prodotto: Brakeman, Checkstyle, CppCheck, ESLin t, SpotBugs, 
Find Security-Bugs, Gendarme, OWASP Dependency Chec k, JSHint, 
PHP_CodeSniffer, PHPMD, PMD, Pylint, Retire.js, Sca laStyle.  8 
L’integrazione di 
“Custom rules”  È possibile all'interno di CodeDx creare delle rego le personalizzate. 7 
Possi bilità  di inibire 
la segnalazione di 
particolari 
vulnerabilità  È possibile all'interno del Tool gestire la segnal azione di una 
particolare vulnerabilità. 7 
L’incidenza dei “Falsi 
positivi” Dai riscontri, l'incidenza di falsi positivi è acce ttabile. 8 
La capacità di analisi 
“raw source code” vs 
“need to compile” CodeDx (a seconda dei tool embedded che vengono inv ocati) 
permette di analizzare il codice in entrambe le mod alità (sia source-
code che raw-code). Entrambe 
La capacità di 
analizzare le 
dipendenze da 
librerie esterne al 
fine di controllare se 
sono presenti 
vulnerabilità note Black Duck (by Synopsys), OWASP Dependency Check,  
Retire.js,  Synopsys Protecode, Sonatype Nexus 8 
  
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 134  a 137  
 
  La capacità di 
correlare lo scan 
statico con l’esito di 
uno scan dinamico 
(correlazione White 
Box con Black Box) Il prodotto è in grado di effettuare correlazioni t ra entrambe le 
tipologie di scan del codice. 7 
LE PERFORMANCE 
a.       Full scan vs 
Incremental scan  Il prodotto è in grado di effettuare entrambe le ti pologie di scan del 
codice. 8 
b.       Client -side 
scan vs Server-side 
scan Il prodotto consente di effettuare scan sia lato se rver che client. 7 
Supporto alla 
Remediation  Il tool guida nella localizzazione del problema ed offre supporto 
informativo utile per sanarlo. 6 
Funzionalità di 
prioritizzazione delle 
Remediation Il tool permete di evidenziare i bugs in base a del le priorità di 
intervento. 7 
La facilità d’uso Il prodotto è piuttosto facile da installare e asso lutamente intuitivo 
da utilizzare. 8 
I costi di licenza CodeDx è un prodotto commerciale a pagamento dai costi non 
eccessivi rispetto a strumenti similari commerciali . L'argomento 
andrebbe comunque analizzato in una logica commerci ale 
complessiva aziendale. MEDIO 
Il supporto alla 
reportistica Il tool consente di produrre un'ottima reportistica  in vari tipi di 
formato (Pdf, xml, Excel). 8 
La classificazione 
degli errori riportati Il Tool CodeDx permette di classificare gli errori secondo quattro 
tipologie di gravità: High, Medium, Low e Info. 7 
CONSIDERAZIONI FINALI DEL VALUTATORE  
Dopo aver preso in considerazione tutti i punti des critti nella scheda si ritiene che il Tool CodeDx s ia un 
ottimo strumento di facile uso e integrabile con mo lti altri tool sia gratuiti che a pagamento. Il too l 
permette agli sviluppatori di software, tester e an alisti della sicurezza di individuare e gestire con  modalità 
abbastanza semplici le vulnerabilità nel software. Il tool permette di integrare una quantità molto am pia 
di plugin e di altri tool che danno una copertura e stesa di tutti i linguaggi più diffusi e degli IDE.  
L’integrazione fra i risultati di scansioni di tool  differenti e la reportistica molto dettagliata e d isponibile in 
vari formati, sono i veri punti di forza di CodeDx.  Dalle evidenze riscontrate, è emerso che i tool ai  quali 
CodeDx si appoggia forniscano risultati per lo più affidabili. Si ritiene pertanto che CodeDx sia util izzabile 
proficuamente per gli scopi aziendali. 
TEAM DI 
VALUTAZIONE Software Security team 
 
c.  SonarQube 
PRODOTTO  CATEGORIA  FASE SSE  SITO WEB    
SonarQube  SAST  Implementation  http://www.sonarqube.org  
  
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 135  a 137  
 
  DESCRIZIONE       
SonarQube è un prodotto avanzato per l'analisi stat ica del codice sorgente, finalizzato alla ricerca d i errori 
di programmazione e di costrutti che costituiscono delle bad practise. I Bug rilevati sono tracciati e d 
evidenziati in un'interfaccia web intuitiva, in mod o da poter seguire e gestire il processo di remedia tion. 
Dato che si tratta di un prodotto open source, il m iglioramento dei pattern per il riconoscimento dei 
problemi è demandato all'ampia community in rete. 
      
SonarQube esegue  le sue analisi attraverso appositi plugin che appli cano al codice  
sorgente dei pattern match pre-definiti.   
ANALISI DEL VALUTATORE  SCORE  
Livello di integrazione con i seguenti prodotti   
a.        IDEs  S’ integra tramite il plugin SonarLint con Eclipse, Vi sual Studio, 
IntelliJ. SonarLint è uno strumento che analizza il  codice dal 
punto di vista della qualità, ma è possibile utiliz zarlo in 
collegamento con SonarQube, per sfruttare le regole  di sicurezza 
di quest'ultimo. 8 
b.       source repository,  S’ integra, tramite plugin, a Git, Svn, CVS, TFVC, Jaz z RTC, 
ClearCase. 8 
c.        build server,    
d.       bug tracking tools  
 SonarQube comprende la gestione completa dei bug 
riscontrati (tracciamento incluso).  8 
Le tipologie di applicazione 
supportate (Web, Mobile, 
Client-Server…) Web, Mobile Android . 8 
 I linguaggi di 
programmazione supportati ABAP, Apex, C#, C, C++, COBOL, CSS, Flex, Go, Java,  JavaScript, 
Kotlin, Objective-C, PHP, PLI, PLSQL, Python, RPG, Ruby, Scala, 
Swift, TypeScript, TSQL, VB.NET, VB6, HTML, XML 10  
I framework applicativi 
supportati (es. Spring, 
Hibernate, …)    
Gli Standard supportati 
(OWASP Top 10, SANS 25, …)  SonarQube comprende fra le sue rules CWE, SANS TOP 25 e 
OWASP TOP 10 10  
L’integrazione di “Custom 
rules”  SonarQube offre la possibilità di creare delle rego le 
personalizzate, attraverso dei custom templates 10  
Possibilità  di inibire la 
segnalazione di particolari 
vulnerabilità Il tool consente di "s opprimere" la segnalazione di una 
particolare vulnerabilità in maniera agevole. 9 
L’incidenza dei “Falsi 
positivi” Coloro che scoprono un falso positivo possono segna larlo alla 
Community. Per questo motivo l'incidenza dei falsi positivi è 
tenuta bassa. 7 
La capacità di analisi “raw 
source code” vs “need to 
compile” SonarQube fa le sue valutazioni su bytecode, per cu i presuppone 
un rebuild del codice modificato. Need to 
Compile  
  
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 136  a 137  
 
  La capacità di analizzare le 
dipendenze da librerie 
esterne al fine di controllare 
se sono presenti 
vulnerabilità note Attraverso plugin  7 
La capacità di correlare lo 
scan statico con l’esito di 
uno scan dinamico 
(correlazione White Box con 
Black Box)    
LE PERFORMANCE  
a.        Full scan vs Incremental scan  Il prodotto è in grado di eseguire  entrambe le tipologie di 
scan del codice. 8 
b.       Client -side scan vs Server -
side scan Il prodotto consente di eseguire  scan sia lato server, sia 
lato client. 8 
Supporto alla Remediation  SonarQube offre la possibilità di organizzare e seguire la 
fase di correzione dei bugs. 9 
Funzionalità di prioritizzazione 
delle Remediation SonarQube classifica i bugs in base all'urgenza con  la quale 
devono essere corretti. 8 
La facilità d’uso  Il prodotto è piuttosto facile da installare e assolutamente 
intuitivo da utilizzare. 7 
I costi di licenza  La Community edition di SonarQube è Open Source, con 
licenza GNU Lesser GPL License, Version 3, quindi n on 
comporta alcun costo di licenza. Le edizioni Develo per, 
Enterprise e Data Center sono commerciali. Free  
Il supporto alla reportistica  Si realizza tramite plugin open source o commercial i. La 
dashboard e l'interfaccia web costituiscono, di per  sé, una 
valida reportistica. 7 
CONSIDERAZIONI FINALI DEL VALUTATORE  
Sebbene l’aspetto della sicurezza non sia ancora il  core delle funzionalità di SonarQube, sono stati f atti 
molti passi avanti per migliorare la scoperta delle  vulnerabilità insite nella scrittura di codice sor gente. 
SonarQube ha diversi punti di forza che ne hanno fa tto lo strumento preferito dai gruppi di sviluppo p er il 
controllo statico del codice: 
• Un’estesa community che lavora costantemente al suo  miglioramento. 
• Una grande disponibilità di plugin che ne ampliano le funzionalità, fino a coprire molteplici aspetti 
dello sviluppo sicuro. 
• La possibilità di utilizzarlo all’interno di una mo derna pipeline di delivery DevOps-oriented, per 
automatizzare l’efficientamento del codice ad ogni rilascio. 
• Metriche sofisticate che servono a stabilire comple ssità e leggibilità del codice e l’adesione alle 
best practises di programmazione. 
• La gestione grafica delle vulnerabilità emerse.  
• L’adesione ai principali standard di sicurezza: CWE , SANS To 25 e OWASP Top 10. 
TEAM DI VALUT AZIONE  Software Security team   
 
  
  
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 137  a 137  
 
  11  BIBLIOGRAFIA 
 
[1]  G. McGraw, «Software Security: Building Security In , Addison Wesley,» 2006.  
[2]  S. H. Flechais, « Bringing Security Home: A Process  for Developing Secure and Usable Systems,” In Proc. 
of the New Security Paradigms Workshop (NSPW’07),» Switzerland, 2003, pp. 49-57. 
[3]  C. M. a. M. S. I. Flechais, in “Integrating Security and Usability into the Requir ements and Design 
Process,” International Journal of Electronic Securi ty and D igital Forensics, Inderscience Publishers, vol. 
1, no. 1, , Geneva, Switzerland, 2007, pp. 12-26. 
[4]  A. A. a. M. Pourzandi, in “Secure Software Development by Example,” IEEE Secu rity and Privacy vol. 3, 
no. 4 , IEEE CS Press, 2005, pp. 10-17. 
[5]  S. O.  a. O. A. A.S. Sodiya, in “Towards Building Secure Software Systems,” Issues i n Informing Science 
and Information Technology vol. 3. , California, USA, Informing Science Institute, 200 6, pp. 635-646. 
[6]  J. Juerjens, « Secure Systems Development with UML,  Springer,,» 2005.  
[7]  L. F. a. R. Solms, in “SecSDM: A Model for Integrating Security into the S oftware Development Life 
Cycle,” In IFIP International Federation for Informat ion Processing, Volume 237, Proc. of the 5th World 
Conference on Information Security Education, .  
[8]  T. W. J. S. a. M. B. D.P. Gilliam, « “Software Secu rity Checklist for the Software Life Cycle,” In Pro c. of 
the 12th IEEE International Workshops on Enabling T echnologies: Infrastructure for Collaborative 
Enterprises (WETICE’03), Linz, Au,» Linz, Austria, 2003, pp. 243-248. 
[9]  J. P. E. H. a. M. B. D. Gilliam, « “Addressing Soft ware Security Risk and Mitigations in the Life Cycl e,” In 
Proc. of the 28th Annual NASA Goddard Software Engineering Workshop (SEW’03), Greenbelt,»  
Maryland, USA, 2003, pp. 2001-206. 
[10] «Database of Vulnerabilities, Exploits, and Signatu res, http://seclab.cs.ucdavis.edu/projects/DOVES/,»  
2009.  
[11] T. W. J. S. a. M. B. D.P. Gilliam, in “Softwa re Security Checklist for the Software Life Cycle,” I n Proc. of 
the 12th IEEE International Workshops on Enabling T echnologies: Infrastructure for Collaborative 
Enterprises (WETICE’03), , Linz, Austria.  
[12] M. Hadawi, in “Vulnerability Prevention in Sof tware Development Process,” In Proc. of the 10th 
International Conference on Computer & Information Te chnology (ICCIT’07) , Dhaka, Banglades, 2007.  
[13] L. L. a. H. G. M. Essafi, in “S2D -ProM: A Strategy Oriented Process Model for Secure S oftware 
Develop ment,” In Proc. of the 2nd International Conference o n Software Engineering Advances 
(ICSEA’07), Cap Esterel, French Riviera , France, 2007, p. 24. 
[14] N. Davis, in “Secure Software Development Life Cycle Processes: A Technology Scouting Report”, 
technical note CMU/SEI-2005-TN- 024, Software Engineering Institute, Carnegie Mello n University, 
Pittsburgh , Pennsalyania, USA, 2005.  
[15] T. W. J. S. a. M. B. D.P. Gilliam, « “Software Secu rity Checklist for the Software Life Cycle,” In Pro c. of 
the 12th IEEE International Workshops on Enabling Technologies: I nfrastructure for Collaborative 
Enterprises (WETICE’03), Linz, Au,» Austria, 2003, pp. 243-248.  
 
