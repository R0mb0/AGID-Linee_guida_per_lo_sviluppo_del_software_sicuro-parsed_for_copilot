 
 
Linee guida per lo sviluppo sicuro Pag. 94  a 156  
 
 
Forma corretta: la stringa inserita dall'utente vie ne trasformata con un’opportuna routine di escaping , 
prima dell'uso nella query XPath:  
from  sys import  stdin 
import  XPath 
print  'Insert item number: '  
userInput = stdin.readline()  
XPath.find( '//item'  + escaped(userInput), doc) 
 
Per ulteriori informazioni si veda: http://cwe.mitre.org/data/definitions/643.html , 
CWE-643: Improper Neutralization of Data within XPa th Expressions ('XPath Injection'). 
 
7.5.9  XML External Entity (XXE) injection 
Come riconoscerla  
Se l’applicazione web riceve in input un documento XML che consente l‘elaborazione di entità esterne, 
dichiarate nel DTD, il sistema potrebbe essere espo sto a possibili attacchi di tipo XXE. Se viene effe ttuato il 
parsing di entità create ad arte, come nell’esempio  seguente, potrebbero essere visualizzate dall’atta ccante 
le password di sistema oppure eseguito del codice m alevolo. 
Esempio: 
<!ENTITY xxe SYSTEM "file:///etc/passwd" >]><foo>&x xe;</foo> 
<!ENTITY xxe SYSTEM "http://www.attacker.com/text.t xt" >]><foo>&xxe;</foo> 
Come difendersi 
• Bisogna evitare di incorporare entità esterne. 
• Occorre assicurarsi di disabilitare il parser dal c aricamento automatico di entità esterne. 
• Formati di dati meno complessi, come JSON, possono rendere più difficile la serializzazione di dati 
sensibili. 
• Devono essere apportati i necessari aggiornamenti a  tutti i parser e alle librerie XML in uso da parte  
dell'applicazione o sul sistema operativo sottostan te.  
• Se viene utilizzato SOAP, occorre aggiornarlo alla versione 1.2 o successive. 
• Implementare la convalida dell’input come evidenzia to in altri punti. 
• Verificare che la funzionalità di caricamento di fi le XML o XSL convalidI l'XML in entrata utilizzando  
uno schema XSD. 
• Le librerie utilizzate da Python per fare il parsin g sono: sax, etree, minidom, pulldom, xmlrpc. 
Nessuna di loro offre una protezione completa da at tacchi di tipo XXE, per cui è necessario – se si 
ha necessità di importare entità esterne, di valida te il contenuto in entrata prima di sottoporlo a 
parsing. 
 
7.5.10  OS Access Violation 
Come riconoscerla  
Un malintenzionato potrebbe preparare un input che potrebbe causare una violazione di accesso, perdita  
di dati privati, danneggiamento di dati o un arrest o di eventuali servizi con possibile arresto 
dell'applicazione stessa. 
Il modulo OS di Python fornisce un'interfaccia dest inata all'utilizzo delle funzionalità del sistema o perativo 
che consente l'accesso al file system e alla sua ma nipolazione arbitraria. Nel caso in cui un aggresso re fosse 
in grado di fornire un input specifico per il modul o OS, potrebbero verificarsi situazioni di violazio ne di 
accesso o di corruzione dei dati, laddove non fosse ro messi in atto i dovuti controlli. 
Come difendersi 
