 
 
Linee guida per lo sviluppo sicuro Pag. 111  a 156  
 
 
Per ulteriori informazioni si veda: http://cwe.mitre.org/data/definitions/79.html  CWE-79: Improper 
Neutralization of Input During Web Page Generation ('Cross-site Scripting') 
7.7.2  Code Injection 
Come riconoscerla 
L'applicazione esegue del codice ricevuto attravers o l’input che non è stato sufficientemente verifica to. Un 
utente in grado di inserire codice arbitrario può p rendere il controllo dell’applicazione e del server , se non 
sono state adottate tecniche di difesa in profondit à. 
Come difendersi. 
È vietata qualsiasi esecuzione dinamica di codice r icevuto da canali non attendibili. Se è prorpio nec essario 
compilare ed eseguire dinamicamente del codice dina mico, occorre allore predisporre una sandbox isolat a, 
ad esempio AppDomain di .NET o un thread isolato.  
Devono essere effettuati tutti i controlli possibil i per validare il codice in ingresso. 
Configurare l'applicazione da eseguire utilizzando un account utente limitato che non disponga di priv ilegi 
non necessari. 
Se è possibile optare per isolare tutta l'esecuzion e dinamica utilizzando un account utente separato e  
dedicato che abbia privilegi solo per le operazioni  e i file specifici utilizzati dal codice da esegui re, in base al 
principio denominato "Principle of Least Privilege" . Il principio stabilisce che agli utenti venga att ribuito il 
più basso livello di “diritti” che possano, detener e rimanendo comunque in grado di compiere il propri o 
lavoro. 
 
Esempio: 
Il seguente codice permette di filtrare eventuale c odice dannoso: 
<% 
strHTML = "<s" & "cript>alert(document.cookie);</s"  & "cript>" 
 
' code injection 
Response.Write(strHTML) 
 
' protetto 
Response.Write(Server.HtmlEncode(strHTML)) 
%> 
 
Per ulteriori informazioni: http://cwe.mitre.org/data/definitions/94.html  , 
Improper Control of Generation of Code ('Code Injec tion') CWE-94. 
 
7.7.3  Command Injection 
Come riconscerla 
Sfruttando questa vulnerabilità un aggressore potre bbe eseguire comandi di sistema arbitrari 
sull’application server. Il danno che potrebbe esse re arrecato comprende: 
• la possibilità di modificare i permessi all’interno  di file o directory nel file system (read / create  / 
modify / delete); 
• la possibilità di instaurare connessioni di rete no n autorizzate verso il server;  
• la possibilità di gestire i servizi di sistema, avv iandoli, fermandoli o rimuovendoli; 
• la completa acquisizione del controllo del server d a parte dell'attaccante. 
Attraverso questa vulnerabilità l'applicazione vien e portata ad eseguire i comandi dell’attaccante. 
L'operazione spesso viene effettuata utilizzando st ringhe di input controllate dall'utente, sulle qual i non 
viene effettuata alcuna verifica. 
Potrebbero così essere eseguiti direttamente sul se rver comandi anche molto pericolosi per il sistema o per 
la sicurezza dei dati. 
