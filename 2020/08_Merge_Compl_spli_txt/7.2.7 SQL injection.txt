 
 
Linee guida per lo sviluppo sicuro Pag. 66  a 156  
 
   break; 
  case "smtp": 
   portNum = 25; 
   break; 
  default: 
   portNum = 80; 
  } 
  try { 
   ServerSocket serverSocket = new ServerSocket(por tNum); 
  } catch (Exception e) { 
   System.err.println("Caught Exception: " + e.getM essage()); 
  } 
 } 
} 
 
Per ulteriori informazioni si veda: http://cwe.mitre.org/data/definitions/99.html,   
CWE-99: Improper Control of Resource Identifiers (' Resource Injection'). 
7.2.7  SQL injection 
Come riconoscerla  
Si verifica quando l’input non verificato viene uti lizzato per comporre dinamicamente uno statement SQ L 
che poi verrà eseguito sulla base dati. Adeguatamen te manipolati, i parametri di input possono modific are 
le query in maniera sostanziale, causando danni di impatto notevole, come l’inserimento di dati malevo li, la 
cancellazione e la modifica di record e la rivelazi one indebita di informazioni riservate. Se i dati u tilizzati per 
la SQL injection sono memorizzati nel database o ne l file system in generale, si parla di SQL injectio n di 
second’ordine (second order SQL injection). 
Come difendersi  
• Come prima misura, occorre validare l’input, sottop onendolo a rigidi controlli, come già illustrato 
nei punti precedenti; 
• Le query SQL non devono mai essere realizzate conca tenando stringhe con l’input esterno. Si 
devono invece utilizzare componenti di database sic uri come le stored procedure, le query 
parametrizzate e le associazioni degli oggetti (per  comandi e parametri; 
• Una soluzione che può essere d’aiuto consiste nell’ utilizzazione di una libreria ORM, come 
EntityFramework, Hibernate o iBatis; 
• Occorre limitare l'accesso agli oggetti e alle funz ionalità del database, in base al "Principle of Lea st 
Privilege" (non fornire agli utenti permessi superi ori a quelli strettamente necessari. 
 
Esempio : 
Codice vulnerabile 
String q='SELECT r FROM User r where r.userId=''+us er+'''; 
Query query=em.createQuery(q); 
List users=query.getResultList();  
 
Codice sicuro 
Query query=em.createNamedQuery('User.findByUserId' ); 
query.setParameter('userId', user); 
List users=query.getResultList(); 
 
Per ulteriori informazioni si veda: http://cwe.mitre.org/data/definitions/89.html,   
CWE-89: Improper Neutralization of Special Elements  used in an SQL Command ('SQL Injection'). 
7.2.8  XPath injection 
Come riconoscerla 
