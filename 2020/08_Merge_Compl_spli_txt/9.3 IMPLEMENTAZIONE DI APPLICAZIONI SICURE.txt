  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 94  a 137  
 
• Convalida del modello architetturale; 
• Verifica dell’esistenza di una contromisura per ogn i potenziale minaccia identificata. 
 
I tool a supporto di questa fase sono stati identif icati nel paragrafo 6.4.2.  
 
9.3  Implementazione di applicazioni sicure 
Le azioni di sicurezza che devono essere intraprese  in questa fase possono essere così sintetizzate:  
• Data Validation:  verificare la presenza di vulnerabilità che posson o riguardare eventuali dati 
corrotti in ingresso e che possono portare a un com portamento anomalo dell’applicazione; 
• Control Flow : verificare i rischi collegati all’assenza di spec ifiche sequenze di operazioni che, se non 
eseguite nel corretto ordine, possono portare a vio lazioni sulla memoria o sull’uso scorretto di 
determinati componenti; 
• Analisi Semantica : rilevare eventuali problematiche legate all’uso p ericoloso di determinate 
funzioni o API (es. funzioni deprecate); 
• Controllo Configurazioni : verificare i parametri intrinseci di configurazio ne dell’applicazione; 
• Buffer Validation : verificare la presenza di buffer overflow sfrutta bile attraverso la scrittura o la 
lettura di un numero di dati superiore alla reale c apacità del buffer stesso. 
 
L’esame del codice sorgente applicativo deve portar e alla produzione, mediante la Static Analysis, del le 
seguenti tipologie di documenti: 
• Report delle Vulnerabilità riscontrate : report di dettaglio delle vulnerabilità riscontra te nella fase 
di analisi statica del codice tramite gli strumenti  a supporto; 
• Remediation Plan : report che analizza i falsi positivi ed indirizza  la risoluzione delle problematiche 
riscontrate nell’analisi stessa. 
 
La figura che segue sintetizza gli elementi in inpu t e l’output prodotto dal processo SAST: 
 
 
 
Figura 20 - Input e Output della fase Static Analysi s 
 
9.3.1  Identificazione degli strumenti a supporto 
Nel paragrafo 6.5.1 sono stati presentati i tool a supporto di questa fase. Si riporta di seguito un e stratto: 
• closed source 
o IBM App Scan (versione SAST), 
o Checkmarx, 
o CodeDx, 
o HP fortify. 

  
 
 
LINEE GUIDA PER L’ADOZIONE DI UN CICLO DI SVILUPPO DI 
SOFTWARE SICURO Pag. 95  a 137  
 
• open source 
o SonarQube, 
o FxCop (.NET), 
o BRAKEMAN (Ruby on Rails), 
o PMD (Java, XML e XSL), 
o PYLINT (Python), 
o CppCheck  (C/C++), 
o FindBugs (Java), 
o JSHint (Javascript), 
o OWASP Dependency-Check (Java,.NET, Ruby, Node.js, P ython, supporto limitato per 
C/C++). 
L’utilizzo combinato dei tool sopra indicati consen te una copertura ad ampio spettro semplificando 
significativamente la revisione manuale che richied erebbe molto tempo.  
In Appendice 2 è fornito un approccio metodologico per la valutazione dei tool. L’approccio è basato s u una 
‘Scheda valutazione’ che identifica la baseline per  l’analisi. I parametri di valutazione includono, a d 
esempio:  
• Linguaggi di programmazione supportati (C/C++, java , JPS, ..); 
• Standard supportati (OWASP, Top 10, SANS 25, ..); 
• Le vulnerabilità riconosciute (Sql injection, Cross -site scripting, ..); 
• L’incidenza dei falsi positivi; 
• La capacità di analizzare le dipendenze da librerie  esterne; 
• Il supporto alla reportistica, 
• Altro. 
 
Ogni elemento viene valutato assegnando uno score ( da 0 a 10) adeguatamente motivato. La metodologia 
è stata applicata, a titolo di esempio, su tre tool  (i risultati sono indicativi con finalità di linee  guida): 
 
Tools Categoria Fase Report 
Checkmarx  SAST Implementation / Verification Vedi Appendice 2.a 
CodeDx SAST/DAST  Implementation/Verification Vedi Appendice 2.b 
SonarQube/SonarLint  SAST Implementation Vedi Appendice 2.c 
 
1)  Checkmarx , è un tool per l’analisi statica del codice, posiz ionato da Gartner nel quadrante 
Challengers nell’ambito dell’Application Security T esting (AST). Supporta numerosi linguaggi (vedi 
scheda nella tabella di cui sopra). Può essere inte grato a vari livelli nell’ambito della fase di 
Implementation: IDE, build server, bug tracking too ls.  
