 
 
Linee guida per lo sviluppo sicuro Pag. 52  a 156  
 
 
 portname = argv[1]; 
 switch (portname) { 
  case "quicktime": 
   portno = 1220; 
   break; 
  case "kazaa": 
   portno = 1214; 
   break;  
  case "battlenet": 
   portno = 1119; 
   break; 
  default: 
   portno = 80; 
 } 
  
 serv_addr.sin_family = AF_INET; 
 memcpy(&serv_addr.sin_addr.s_addr, SERVER_ADDRESS,  strlen(SERVER_ADDRESS)); 
 serv_addr.sin_port = htons(portno); 
  
 sockfd = socket(AF_INET, SOCK_STREAM, 0); 
 if (sockfd < 0)  
  errorAndExit(); 
   
 if (connect(sockfd, &serv_addr, sizeof(serv_addr))  < 0)  
  errorAndExit(); 
 
 sendAndProcessMessage(sockfd); 
  
 close(sockfd); 
} 
 
 
Per ulteriori informazioni si veda: http://cwe.mitre.org/data/definitions/99.html,   
CWE-99: Improper Control of Resource Identifiers (' Resource Injection'). 
7.1.5  SQL Injection 
Come riconoscerla  
Si verifica quando l’input non verificato viene uti lizzato per comporre dinamicamente uno statement SQ L 
che poi verrà eseguito sulla base dati. Adeguatamen te manipolati, i parametri di input possono modific are 
le query in maniera sostanziale, causando danni di impatto notevole, come l’inserimento di dati malevo li, la 
cancellazione e la modifica di record e la rivelazi one indebita di informazioni riservate. Se i dati u tilizzati per 
la SQL injection sono memorizzati nel database o ne l file system in generale, si parla di SQL injectio n di 
second’ordine (second order SQL injection). 
Come difendersi 
Mettere in pratica i seguenti suggerimenti:  
• Come prima misura, occorre validare l’input, sottop onendolo a rigidi controlli, come già illustrato 
nei punti precedenti. 
• Le query SQL non devono mai essere realizzate conca tenando stringhe con l’input esterno. Si 
devono invece utilizzare componenti di database sic uri come le stored procedure (stored 
procedures), query parametrizzate e le associazioni  degli oggetti (per comandi e parametri). 
• Una soluzione che può essere d’aiuto consiste nell’ utilizzazione di una libreria ORM, come 
EntityFramework, Hibernate o iBatis. 
• Occorre limitare l'accesso agli oggetti e alle funz ionalità del database, in base al "Principle of Lea st 
Privilege" (non fornire agli utenti permessi superi ori a quelli strettamente necessari). 
 
Esempio:  
int main(int argc, char** argv) { 
