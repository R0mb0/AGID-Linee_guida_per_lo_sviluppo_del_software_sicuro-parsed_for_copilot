 
 
Linee guida per lo sviluppo sicuro Pag. 93  a 156  
 
Validare tutti gli input, indipendentemente dalla l oro provenienza. La validazione dovrebbe essere bas ata 
su una white list: dovrebbero essere accettati cioè  solo i dati conformi a una struttura specificata, 
scartando quelli che non la rispettano. Occorre con trollare il tipo del dato, la sua dimensione, l'int ervallo di 
validità (range), il formato ed eventuali valori at tesi (white list). 
Invece di concatenare le stringhe si consiglia di:  
• Utilizzare componenti di database sicuri come le st ored procedures, le query parametrizzate e le 
associazioni degli oggetti (per comandi e parametri ); 
• Una soluzione consigliabile è l’adozione di una lib reria ORM, come EntityFramework, Hibernate o 
iBatis. 
• Occorre inoltre limitare l'accesso agli oggetti e a lle funzionalità di database, in base al "Principle  of 
Least Privilege" (non fornire agli utenti permessi più elevati di quelli strettamente necessari). 
 
Per ulteriori informazioni si veda: http://cwe.mitre.org/data/definitions/89.html , 
CWE-89: Improper Neutralization of Special Elements  used in an SQL Command ('SQL Injection'). 
 
Esempio: 
Il codice seguente adotta una query parametrizzata,  una difesa contro la SQL injection: 
cursor = connection.cursor(prepared=True) 
stringaSQLInserimento = """ INSERT INTO dipendenti 
          (id, Nome, DataAssunzione, Importo_Annuo)  VALUES (%s,%s,%s,%s)""" 
 
tupla_inserimento_1 = (progressivo, input_name, dat etime.datetime.now(), 
input_salario) 
cursor.execute(stringaSQLInserimento, tupla_inserim ento_1) 
 
connection.commit() 
print("record inserito")  
  
7.5.8  XPath Injection 
Come riconoscerla  
Gli attacchi XPath Injection sono possibili quando un sito Web utilizza le informazioni fornite dall'u tente per 
costruire una query XPath per i dati XML. Inviando informazioni intenzionalmente malformate nel sito W eb, 
un utente malintenzionato può scoprire come sono st rutturati i dati XML o accedere a dati a cui 
normalmente non avrebbe accesso. Potrebbe persino e ssere in grado di elevare i suoi privilegi sul sito  Web 
se i dati XML vengono utilizzati per l'autenticazio ne (come un file utente basato su XML).  
Come difendersi 
Evitare che la costruzione della query XPath dipend a dalle informazioni inserite dall'utente. Possibil mente 
mapparla con i parametri utente mantenendo la separ azione tra dati e codice. Nel caso fosse necessario  
includere l'input dell’utente nella query, questo d ovrà essere precedentemente validato. 
Validare tutti gli input, indipendentemente dalla l oro provenienza. La validazione dovrebbe essere bas ata 
su una white list (si dovrebbero accettare solo i d ati che adattano a una struttura specificata, scart ando 
quelli che non la rispettano). Bisogna controllare il tipo del dato, la sua dimensione, l'intervallo d i validità 
(range), il formato ed eventuali valori attesi (whi te list). 
 
Esempio: 
Forma non corretta: l'applicazione utilizza una str inga inserita dall'utente per costruire una query X Path:  
from  sys import  stdin 
import  XPath 
print  'Insert item number: '  
userInput = stdin.readline()  
XPath.find( '//item'  + userInput, doc) 
