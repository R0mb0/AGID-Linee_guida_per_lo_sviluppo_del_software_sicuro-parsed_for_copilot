 
 
Linee guida per lo sviluppo sicuro Pag. 141  a 156  
 
 
Per ulteriori informazioni si veda: http://cwe.mitre.org/data/definitions/94.html, Improper Control of 
Generation of Code ('Code Injection') CWE-94. 
 
7.11.2   Client DOM Stored Code Injection 
Come riconoscerla 
L'utente malintenzionato può attraverso questo tipo  di vulnerabilità causare la riscrittura di pagine web e 
l'inserimento di script dannosi per la sicurezza.  
Una vulnerabilità persistente (o stored) come la “C lient DOM Stored Code Injection” è una variante più  
pericolosa di cross-site scripting con manipolazion e di codice: si verifica quando i dati forniti dall 'attaccante 
vengono salvati sul server, e quindi visualizzati i n modo permanente sulle pagine normalmente fornite agli 
utenti durante la normale navigazione. 
Come difendersi 
Occorre evitare qualsiasi esecuzione dinamica del c odice. Se è proprio necessaria, anziché utilizzare i dati 
sul lato client, inclusi i dati precedentemente mem orizzati nella cache dalla stessa applicazione, uti lizzare 
solo dati attendibili provenienti dal server.    
Evitare di chiamare dinamicamente una funzione senz a averne prima bonificato l'input. 
Nel caso debba essere impostato del codice Javascri pt per delle chiamate dinamiche, vanno utilizzati s olo 
metodi predefiniti o codice Javascript non influenz abile da variabili dinamiche o non dipendente da ro utine 
tipo “eval()” non particolarmente sicure. 
 
Esempio di codice Javascript sicuro:  
window .setInterval( "timedFunction();" , 1000 ); 
 
Per ulteriori informazioni ed esempi si veda: http://cwe.mitre.org/data/definitions/94.html,  
Improper Control of Generation of Code ('Code Injec tion') CWE-94. 
 
7.11.3   Client Dom Stored XSS 
 
Come riconoscerla 
Un malintenzionato può utilizzare l'accesso legitti mo all'applicazione per inviare dati ingegnerizzati  al 
database dell'applicazione. Quando un altro utente accede in seguito, le pagine Web potrebbero essere 
riscritte con i dati salvati e potrebbero essere at tivati script dannosi.       
L'applicazione crea pagine web che includono dati p rovenienti dal database, incorporati direttamente 
nell'HTML della pagina. Il browser, quindi, li visu alizza come parte della pagina.  
Il problema nasce quando questi dati salvati sono s tati immessi da un altro utente. Se i dati includon o 
frammenti HTML o Javascript malevoli, anche questi vengono visualizzati (o eseguiti), sebbene la vitti ma 
non si accorga dell’inganno sottostante. La vulnera bilità è perciò il risultato dell'incorporazione di  dati 
arbitrari provenienti dal database, senza prima cod ificarli. La codifica trasforma i caratteri malevol i in 
normale testo, e il browser non può più trattarli c ome codice valido HTML/Javascript. 
 
Come difendersi 
I parametri devono essere limitati a un set di cara tteri consentito e l'input non convalidato deve ess ere 
eliminato. Oltre ai caratteri, occorre controllare il tipo di dati, la loro dimensione, l’intervallo d i validità, il 
formato e l’eventuale corrispondenza all’interno de i valori previsti (white list). Sconsigliata invece  la black 
list, ossia una lista di valori non consentiti: l’e lenco sarebbe sempre troppo limitato, rispetto ai c asi che 
potrebbero verificarsi. 
