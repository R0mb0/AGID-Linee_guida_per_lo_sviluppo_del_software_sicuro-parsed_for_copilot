 
 
Linee guida per lo sviluppo sicuro Pag. 80  a 156  
 
SQL Injection è una tecnica che consente a un attac cante di inserire comandi SQL arbitrari nelle query  
eseguite da un'applicazione Web sul proprio databas e. Può funzionare su pagine Web e app vulnerabili c he 
utilizzano un database relazionale. 
Un attacco riuscito può comportare l'accesso non au torizzato a informazioni riservate nel database o l a 
modifica di dati. In alcuni casi, una SQL Injection  riuscita può arrestare o addirittura eliminare l'i ntero 
database. 
Come difendersi 
Come prima misura, occorre validare l’input, sottop onendolo a rigidi controlli, come già illustrato ne i punti 
precedenti. 
Le query SQL non devono mai essere realizzate conca tenando stringhe con l’input esterno. Bisogna invec e 
utilizzare componenti di database sicuri come le st ored procedure (stored procedures), query 
parametrizzate alle quali si associano i valori in input. 
Una soluzione che può essere d’aiuto consiste nell’ utilizzazione di una libreria ORM, come 
EntityFramework, Hibernate o iBatis. 
Occorre limitare l'accesso agli oggetti e alle funz ionalità del database, in base al "Principle of Lea st 
Privilege" (non fornire agli utenti permessi superi ori a quelli strettamente necessari).  
Esempio: 
Consideriamo la seguente query: 
SELECT * FROM Tabella WHERE username='$user' AND pa ssword='$pass' 
$user e $pass sono impostate dall'utente e supponia mo che nessun controllo su di esse venga fatto. 
Vediamo cosa succede inserendo i seguenti valori: 
$user = ' or '1' = '1 
$pass = ' or '1' = '1 
La query risultante sarà: 
SELECT * FROM Tabella WHERE username='' or '1' = '1 ' AND password='' or '1' = '1' 
 
Nell'approccio white list viene proposto un insieme  di caratteri validi. Ad ogni richiesta, se l'input  ricevuto 
contiene dei caratteri non presenti in tale lista, allora segnaleremo un errore. Ciò comporta un’atten ta 
definizione della lista in fase di definizione dei requisiti dell'applicazione, oltre che una corretta  gestione dei 
caratteri. 
Oltre la white list, si può anche usare il metodo d ella concatenazione delle variabili con uso della 
funzionalità “quote”. 
 
Esempio: 
Forma non corretta: 
SQLExec("SELECT NAME, PHONE FROM PS_INFO WHERE NAME ='" | &UserInput | "'", &Name, 
&Phone); 
 
Forma corretta 
SQLExec("SELECT NAME, PHONE FROM PS_INFO WHERE NAME ='" |  
Quote(&UserInput) | "'", &Name, &Phone); 
 
Per ulteriori informazioni si veda:  http://cwe.mitre.org/data/definitions/89.html  CWE-89, 
Improper Neutralization of Special Elements used in  an SQL Command ('SQL Injection') 
7.3.4  Ulteriori indicazioni per lo sviluppo sicuro 
Di seguito vengono descritte ulteriori direttive pe r lo sviluppo PL/SQL in sicurezza. 
7.3.4.1  Posizionamento delle procedure PL/SQL 
È  necessario valutare attentamente la posizione in  cui si collocano le procedure sviluppate: 
• In file separati, organizzati per categoria, sul fi lesystem del db server: 
• Minor numero di vulnerabilità derivanti dal fatto c he il codice non viene precaricato 
• Implementazione di meccaniche di “failover” più sem plice 
