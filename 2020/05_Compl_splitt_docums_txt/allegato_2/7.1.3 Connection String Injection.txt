 
 
Linee guida per lo sviluppo sicuro Pag. 49  a 156  
 
• Se possibile, isolare tutta l'esecuzione dinamica u tilizzando un account utente separato e dedicato, 
che abbia privilegi solo per le operazioni e i file  specifici utilizzati dall'applicazione, in base al  
principio del "Least Privilege". Il principio stabi lisce che agli utenti venga attribuito il più basso  
livello di “diritti” che possano detenere rimanendo  comunque in grado di compiere il proprio 
lavoro. 
 
Esempio: 
#include <stdio.h> 
#include <unistd.h> 
  
int main(int argc, char **argv) { 
  
 char cat[] = "cat "; 
 char *command; 
 size_t commandLength; 
  
 commandLength = strlen(cat) + strlen(argv[1]) + 1;  
 command = (char *) malloc(commandLength); 
 strncpy(command, cat, commandLength); 
 strncat(command, argv[1], (commandLength - strlen( cat)) ); 
  
 system(command); 
 return (0); 
} 
 
L’istruzione system() esegue un commando provenient e dall’input, non verificato né controllato. 
 
Per ulteriori informazioni si veda: http://cwe.mitre.org/data/definitions/77.html,   
CWE-77: Improper Neutralization of Special Elements  used in a Command ('Command Injection'). 
7.1.3  Connection String Injection 
Come riconoscerla 
Un utente malintenzionato potrebbe manipolare la st ringa di connessione dell'applicazione al database.  
Utilizzando semplici strumenti di modifica testo, l 'aggressore potrebbe essere in grado di eseguire un a delle 
seguenti operazioni: 
• Danneggiare le performance delle applicazioni (ad e sempio incrementando il valore relativo al MIN 
POOL SIZE); 
• Manomettere la gestione delle connessioni di rete ( ad esempio, tramite TRUSTED CONNECTION); 
• Dirigere l'applicazione sul database dell'attaccant e al posto dell’originario; 
• Scoprire la password dell'account di sistema del da tabase. 
Per comunicare con il proprio database o con un alt ro server (ad esempio Active Directory), l'applicaz ione 
costruisce dinamicamente una sua stringa di conness ione. Questa stringa di connessione viene costruita  
dinamicamente con l’input inserito dall’utente. Se tali valori non sono stati verificati né tantomeno 
sanificati, potrebbero essere utilizzati per manipo lare la stringa di connessione. 
Come difendersi 
L’input deve essere validato, come già evidenziato nei punti precedenti. 
Evitare di costruire dinamicamente stringhe di conn essione. Se è necessario creare dinamicamente una 
stringa di connessione, cercare di non includere l' input dell'utente. In ogni caso, utilizzare utilità  basate 
sulla piattaforma, come SqlConnectionStringBuilder di .NET. 
 
Esempio:  
 
int main( int argc, char* argv[] )  
{  
 int result; 
 
 
Linee guida per lo sviluppo sicuro Pag. 50  a 156  
 
 if ( argc == 3 ) 
 { 
  char* databaseServer = argv[1]; 
  char* databaseName = argv[2]; 
   
  char connString[BUFFER_SIZE] = database_PROTOCOL_ STRING; 
  strncat( connString, databaseServer, sizeof(connS tring) - 
strlen(connString) - strlen(database_PORT_STRING) ) ; 
  strcat( connString, database_PORT_STRING ); 
 
  sql::mysql::MySQL_Driver* database_driver = 
sql::mysql::get_mysql_driver_instance(); 
  sql::Connection* database_conn = database_driver- >connect( 
connString, database_USER, database_PASSWORD ); 
  database_conn->setSchema( databaseName ); 
   
  result = processData( database_conn ); 
   
  delete database_conn; 
 } 
 return result; 
} 
 
Nell’esempio riportato, la stringa di connessione v iene costruita concatenando parametri di input. 
Nel codice che segue, la scelta da una white list è  obbligata: 
 
int main( int argc, char* argv[] )  
{  
 int result; 
 if ( argc == 2 ) 
 { 
  int appId = atoi( argv[1] ); 
 
  char* connString; 
  char* databaseName;  
  switch( appId ) {  
   case APP_ID1: 
    connString = CONN_STRING_APP1; 
    break; 
   case APP_ID2: 
    connString = CONN_STRING_APP2; 
    break; 
   case APP_ID3: 
    connString = CONN_STRING_APP3; 
    break; 
   default: 
    connString = CONN_STRING_DEFAULT; 
  } 
 
  sql::mysql::MySQL_Driver* database_driver = 
sql::mysql::get_mysql_driver_instance(); 
  sql::Connection* database_conn = database_driver- >connect(connString, 
database_USER, database_PASSWORD); 
   
  result = processData(database_conn); 
   
  delete database_conn; 
 } 
 return result; 
} 
 
Per ulteriori informazioni si veda: http://cwe.mitre.org/data/definitions/99.html,   
CWE-99: Improper Control of Resource Identifiers (' Resource Injection'). 
 
