 
 
Linee guida per lo sviluppo sicuro Pag. 131  a 156  
 
 echo "Funzione non attendibile!"; 
 
Per ulteriori informazioni si veda: http://cwe.mitre.org/data/definitions/470.html,  
Use of Externally-Controlled Input to Select Classe s or Code ('Unsafe Reflection'). 
7.9.9  SQL Injection 
Come riconoscerla  
I dati forniti dall'utente, in un modulo (form) o a ttraverso i parametri URL, devono essere sempre 
considerati non attendibili e potenzialmente corrot ti. La composizione dinamica di query SQL, a partir e da 
dati non verificati, consente agli aggressori di in serire valori appositamente predisposti per modific arne il 
contenuto e il significato. Gli attacchi di SQL inj ection possono leggere, modificare o eliminare info rmazioni 
riservate dal database e talvolta persino metterlo fuori uso o eseguire comandi arbitrari di sistema 
operativo. 
Come difendersi 
In genere, la soluzione consiste nel fare affidamen to su query parametriche, piuttosto che sulla 
concatenazione di stringhe. Questa tecnica fornisce  un valido escaping dei caratteri pericolosi. 
Validare tutti gli input, indipendentemente dalla l oro provenienza. La validazione dovrebbe essere bas ata 
su una white list: dovrebbero essere accettati solo  i dati che adattano a una struttura specificata, s cartando 
quelli che non rispettano la white list. Occorre co ntrollare il tipo del dato, la sua dimensione, l'in tervallo di 
validità (range), il formato ed eventuali valori at tesi (white list). 
Limitare l'accesso agli oggetti e alle funzionalità  di database, in base al "Principle of Least Privil ege" (non 
fornire agli utenti permessi più elevati di quelli strettamente necessari per svolgere il loro lavoro) . 
Esempio: 
Codice vulnerabile: 
$unsafe_variable = $_POST['user_input'];  
mysql_query(" SELECT * FROM tabella WHERE name = '$unsafe_variablè ");  
 
Codice sicuro: 
Utilizzando i Php Data Objets (PDO) si può scrivere  una query con i prepared statement: 
$stmt = $pdo->prepare('SELECT * FROM tabella WHERE name = :namè); 
$stmt->execute(array('namè => $name)); 
foreach ($stmt as $row) { 
  // Ciclo sulla riga ($row) 
} 
 
Per ulteriori informazioni si veda: http://cwe.mitre.org/data/definitions/89.html,  
CWE-89: Improper Neutralization of Special Elements  used in an SQL Command ('SQL Injection'). 
7.9.10   XPath Injection 
Come riconoscerla  
Gli attacchi XPath Injection sono possibili quando un sito Web utilizza le informazioni fornite dall'u tente per 
costruire una query XPath per i dati XML. Inviando informazioni intenzionalmente malformate nel sito W eb, 
un utente malintenzionato può scoprire come sono st rutturati i dati XML o accedere a dati a cui 
normalmente non avrebbe accesso. Potrebbe persino e ssere in grado di elevare i suoi privilegi sul sito  Web 
se i dati XML vengono utilizzati per l'autenticazio ne (come un file utente basato su XML).  
Come difendersi 
• Evitare che la costruzione della query XPath dipend a dalle informazioni inserite dall'utente. 
Possibilmente mapparla con i parametri utente mante nendo la separazione tra dati e codice. Nel 
