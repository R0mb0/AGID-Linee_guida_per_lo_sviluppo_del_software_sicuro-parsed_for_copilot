 
 
Linee guida per lo sviluppo sicuro Pag. 120  a 156  
 
7.8.6  Resource Injection 
Come riconoscerla  
Quando un'applicazione definisce un tipo di risorsa  o posizione in base all'input dell'utente, come un  nome 
file o un numero di porta, questi dati possono esse re manipolati per eseguire o accedere a risorse div erse. 
L’attacco di “path traversal” è un caso particolare  della resource injection. In tal caso a essere ini ettato è un 
path manipolativo che punta a risorse diverse nel f ile system. 
Se si utilizza l’input dell’utente per definire la porta sulla quale aprire un socket, si da all’utent e la possibilità 
di introdurre una backdoor attraverso la quale potr ebbe prendere il controllo del sistema. 
Come difendersi 
• In molti casi non è necessario aprire un socket man ualmente; meglio affidarsi a librerie e protocolli 
esistenti. 
• Tutti i dati inviati devono essere crittografati, s e sono sensibili. Nel dubbio se i dati siano sensib ili o 
possano diventarlo, meglio comunque crittografarli.  
• Qualsiasi input letto dal socket deve essere valida to. 
• Le applicazioni non dovrebbero utilizzare l’input d ell’utente per accedere a risorse del sistema. Nel 
caso si scelga di farlo, è obbligatorio validare l’ input, per esempio attraverso una white list. Se si  
consente la creazione di socket, controllare scrupo losamente questo tipo di attività. 
 
Per ulteriori informazioni si veda: http://cwe.mitre.org/data/definitions/99.html,  
CWE-99: Improper Control of Resource Identifiers (' Resource Injection'). 
 
7.8.7  SQL Injection  
Come riconoscerla  
I dati forniti dall'utente, in un modulo (form) o a ttraverso i parametri dell’URL, devono essere sempr e 
considerati non attendibili e potenzialmente corrot ti. La composizione dinamica di query SQL, a partir e da 
dati non verificati, consente agli aggressori di in serire valori appositamente predisposti per modific arne il 
contenuto e il significato. Gli attacchi di SQL inj ection possono leggere, modificare o eliminare info rmazioni 
riservate dal database e talvolta persino metterlo fuori uso o eseguire comandi arbitrari di sistema 
operativo. 
Come difendersi 
• In genere, la soluzione consiste nel fare affidamen to su query parametriche, piuttosto che sulla 
concatenazione di stringhe. Questa tecnica fornisce  un valido escaping dei caratteri pericolosi. 
• Validare tutti gli input, indipendentemente dalla l oro provenienza. La validazione dovrebbe essere 
basata su una white list: dovrebbero essere accetta ti solo i dati che adattano a una struttura 
specificata, scartando quelli che non rispettano la  white list. Occorre controllare il tipo del dato, la 
sua dimensione, l'intervallo di validità (range), i l formato ed eventuali valori attesi (white list). 
• Limitare l'accesso agli oggetti e alle funzionalità  di database, in base al "Principle of Least Privil ege" 
(non fornire agli utenti permessi più elevati di qu elli strettamente necessari per svolgere il loro 
lavoro). 
 
Per ulteriori informazioni si veda: http://cwe.mitre.org/data/definitions/89.html,  
CWE-89: Improper Neutralization of Special Elements  used in an SQL Command ('SQL Injection'). 
7.8.8  XPath Injection 
Come riconoscerla  
